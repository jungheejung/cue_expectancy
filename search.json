[{"path":"index.html","id":"about","chapter":"1 About","heading":"1 About","text":"analysis book written Markdown. purpose keep track analyses summarize findings, decluttering result vs. code.","code":""},{"path":"index.html","id":"usage","chapter":"1 About","heading":"1.1 Usage","text":"bookdown chapter .Rmd file. .Rmd migrated git repository cue-expectancy cue-expectancy specifically folder step02_R. .Rmd file developed standalone analysis pipeline. validated, identical .Rmd migrated bookdown folder edited bookdown compiling.","code":""},{"path":"index.html","id":"order","chapter":"1 About","heading":"1.2 Order","text":"Behavioral analysisReinforcement learning simulationsfMRI analysis (signatures)fMRI FIR time series analysis","code":""},{"path":"beh-intro.html","id":"beh-intro","chapter":"Behavioral Rating analysis","heading":"Behavioral Rating analysis","text":"following chapters analyze behavioral ratings – expectation outcome ratings – function experimental variables. first build analyses factor: cue stimulus intensity. , include analysis shifting trials analyzing impact previous trial ratings current ratingChapter 2 details cue effect expectation ratings.Chapter 2 details cue effect expectation ratings.Chapter 3 examines cue effect outcome ratingsChapter 3 examines cue effect outcome ratingsChapter 5 examines interaction cue stimulus intensity outcome ratings.Chapter 5 examines interaction cue stimulus intensity outcome ratings.Chapter 7 examines outcome rating function cue, stimulus intensity, expectation ratings, N-1 outcome rating.Chapter 7 examines outcome rating function cue, stimulus intensity, expectation ratings, N-1 outcome rating.","code":""},{"path":"beh-intro.html","id":"beh-sub","chapter":"Behavioral Rating analysis","heading":"Check if this one produces a line","text":"Let’s begin working workflow developing apps.text. Let’s see wraps aroundthis lead lineInclude actual content . thoughts:::: {.todolist}convert ratingszscore ratingscalculate relationship\n::::","code":"\n# and let me check my code"},{"path":"beh-expect-cue.html","id":"beh-expect-cue","chapter":"2 beh :: expectation ~ cue","heading":"2 beh :: expectation ~ cue","text":"output:\nrmdformats::downcute:\nuse_bookdown: true","code":""},{"path":"beh-expect-cue.html","id":"what-is-the-purpose-of-this-notebook","chapter":"2 beh :: expectation ~ cue","heading":"What is the purpose of this notebook?","text":", plot expectation ratings function cue.Main model: lmer(expect_rating ~ cue)Main question: expectations ratings differ function cue type?main effect cue expectation ratings, cue effect differ depending task type?IV: cue (high / low)DV: expectation rating","code":"\nfor (taskname in c(\"pain\", \"vicarious\", \"cognitive\")) {\n    dv_keyword <- \"expect\"\n    model_savefname <- file.path(\n        analysis_dir,\n        paste(\"lmer_task-\", taskname,\n            \"_rating-\", dv_keyword,\n            \"_\", as.character(Sys.Date()), \".txt\",\n            sep = \"\"\n        )\n    )\n    iv <- \"param_stimulus_type\"\n    dv <- \"event02_expect_angle\"\n    subject_varkey <- \"src_subject_id\"\n\n    print_lmer_output = TRUE\n    exclude <- \"sub-0001|sub-0999\"\n    # load data, run model, and exclude outliers\n    data <- load_task_social_df(datadir, taskname, subject_varkey, iv, dv, exclude)\n\n    data$subject = factor(data$src_subject_id)\n    data$stim_name[data$param_stimulus_type == \"high_stim\"] <- \"high\"\n    data$stim_name[data$param_stimulus_type == \"med_stim\"] <- \"med\"\n    data$stim_name[data$param_stimulus_type == \"low_stim\"] <- \"low\"\n\n    data$stimlin[data$param_stimulus_type == \"high_stim\"] <- 0.5\n    data$stimlin[data$param_stimulus_type == \"med_stim\"] <- 0\n    data$stimlin[data$param_stimulus_type == \"low_stim\"] <- -0.5\n\n    data$stimquad[data$param_stimulus_type == \"high_stim\"] <- -0.34\n    data$stimquad[data$param_stimulus_type == \"med_stim\"] <- 0.66\n    data$stimquad[data$param_stimulus_type == \"low_stim\"] <- -0.34\n\n        data$cue_name[data$param_cue_type == \"high_cue\"] <- \"high\"\n    data$cue_name[data$param_cue_type == \"low_cue\"] <- \"low\"\n\n            data$cue_con[data$param_cue_type == \"high_cue\"] <- 0.5\n    data$cue_con[data$param_cue_type == \"low_cue\"] <- -0.5\n    # DATA$levels_ordered <- factor(DATA$param_stimulus_type, levels=c(\"low\", \"med\", \"high\"))\n\n    data$stim_ordered <- factor(\n        data$stim_name,\n        levels = c(\"low\", \"med\", \"high\")\n    )\n    iv <- \"stim_ordered\"\n    dv <- \"event02_expect_angle\"\n    print(taskname)\n    model <- lmer(event02_expect_angle ~ cue_con + (1|src_subject_id), data = data)\n    print(summary(model))\n}## [1] \"pain\"\n## Linear mixed model fit by REML. t-tests use Satterthwaite's method [\n## lmerModLmerTest]\n## Formula: event02_expect_angle ~ cue_con + (1 | src_subject_id)\n##    Data: data\n## \n## REML criterion at convergence: 56012.8\n## \n## Scaled residuals: \n##     Min      1Q  Median      3Q     Max \n## -5.1273 -0.6288 -0.0305  0.6197  4.8504 \n## \n## Random effects:\n##  Groups         Name        Variance Std.Dev.\n##  src_subject_id (Intercept) 831.9    28.84   \n##  Residual                   529.5    23.01   \n## Number of obs: 6095, groups:  src_subject_id, 114\n## \n## Fixed effects:\n##              Estimate Std. Error        df t value Pr(>|t|)    \n## (Intercept)   60.9943     2.7230  113.0814   22.40   <2e-16 ***\n## cue_con       34.4542     0.5899 5981.2865   58.41   <2e-16 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Correlation of Fixed Effects:\n##         (Intr)\n## cue_con 0.000 \n## [1] \"vicarious\"\n## Linear mixed model fit by REML. t-tests use Satterthwaite's method [\n## lmerModLmerTest]\n## Formula: event02_expect_angle ~ cue_con + (1 | src_subject_id)\n##    Data: data\n## \n## REML criterion at convergence: 57065.6\n## \n## Scaled residuals: \n##     Min      1Q  Median      3Q     Max \n## -4.3554 -0.6080 -0.0778  0.5620  6.2802 \n## \n## Random effects:\n##  Groups         Name        Variance Std.Dev.\n##  src_subject_id (Intercept) 116.5    10.79   \n##  Residual                   293.8    17.14   \n## Number of obs: 6656, groups:  src_subject_id, 114\n## \n## Fixed effects:\n##              Estimate Std. Error        df t value Pr(>|t|)    \n## (Intercept)   31.1604     1.0368  112.8038   30.05   <2e-16 ***\n## cue_con       33.7887     0.4205 6542.0225   80.36   <2e-16 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Correlation of Fixed Effects:\n##         (Intr)\n## cue_con 0.002 \n## [1] \"cognitive\"\n## Linear mixed model fit by REML. t-tests use Satterthwaite's method [\n## lmerModLmerTest]\n## Formula: event02_expect_angle ~ cue_con + (1 | src_subject_id)\n##    Data: data\n## \n## REML criterion at convergence: 58008\n## \n## Scaled residuals: \n##     Min      1Q  Median      3Q     Max \n## -3.3780 -0.6120 -0.0800  0.5341  9.3354 \n## \n## Random effects:\n##  Groups         Name        Variance Std.Dev.\n##  src_subject_id (Intercept) 167.4    12.94   \n##  Residual                   303.3    17.41   \n## Number of obs: 6737, groups:  src_subject_id, 114\n## \n## Fixed effects:\n##              Estimate Std. Error        df t value Pr(>|t|)    \n## (Intercept)   33.8866     1.2332  112.1041   27.48   <2e-16 ***\n## cue_con       31.7535     0.4246 6622.2852   74.78   <2e-16 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Correlation of Fixed Effects:\n##         (Intr)\n## cue_con 0.000\n# parameters _____________________________________ # nolint\nsubject_varkey <- \"src_subject_id\"\niv <- \"param_cue_type\"; iv_keyword <- \"cue\"; dv <- \"event02_expect_angle\"; dv_keyword <- \"expect\"\nxlab <- \"\"; ylim = c(0,180); ylab <- \"ratings (degree)\"\nsubject <- \"subject\"\nexclude <- \"sub-0001|sub-0003|sub-0004|sub-0005|sub-0025|sub-0999\"\nsubjectwise_mean <- \"mean_per_sub\"; group_mean <- \"mean_per_sub_norm_mean\"; se <- \"se\"\ncolor_scheme <-     if (any(startsWith(dv_keyword, c(\"expect\", \"Expect\")))) {\n        color_scheme <- c(\"#1B9E77\", \"#D95F02\")\n    } else {\n        color_scheme <- c(\"#4575B4\", \"#D73027\")\n    }\nprint_lmer_output <- FALSE\nggtitle_phrase <- \" - Expectation Rating (degree)\"\nanalysis_dir <- file.path(main_dir, \"analysis\", \"mixedeffect\", \"model01_iv-cue_dv-expect\", as.character(Sys.Date()))\ndir.create(analysis_dir, showWarnings = FALSE, recursive = TRUE)"},{"path":"beh-expect-cue.html","id":"pain","chapter":"2 beh :: expectation ~ cue","heading":"2.1 Pain","text":"","code":""},{"path":"beh-expect-cue.html","id":"for-the-pain-task-what-is-the-effect-of-cue-on-expectation-ratings","chapter":"2 beh :: expectation ~ cue","heading":"For the pain task, what is the effect of cue on expectation ratings?","text":"[ INSERT DESCRIPTION ]","code":""},{"path":"beh-expect-cue.html","id":"vicarious","chapter":"2 beh :: expectation ~ cue","heading":"2.2 Vicarious","text":"","code":""},{"path":"beh-expect-cue.html","id":"for-the-vicarious-task-what-is-the-effect-of-cue-on-expectation-ratings","chapter":"2 beh :: expectation ~ cue","heading":"For the vicarious task, what is the effect of cue on expectation ratings?","text":"[ INSERT DESCRIPTION ]","code":""},{"path":"beh-expect-cue.html","id":"cognitive","chapter":"2 beh :: expectation ~ cue","heading":"2.3 Cognitive","text":"","code":""},{"path":"beh-expect-cue.html","id":"for-the-cognitive-task-what-is-the-effect-of-cue-on-expectation-ratings","chapter":"2 beh :: expectation ~ cue","heading":"For the cognitive task, what is the effect of cue on expectation ratings?","text":"[ INSERT DESCRIPTION ]","code":""},{"path":"beh-expect-cue.html","id":"individual-difference-analysis","chapter":"2 beh :: expectation ~ cue","heading":"2.4 Individual difference analysis","text":"","code":""},{"path":"beh-expect-cue.html","id":"are-cue-effects-on-expectation-ratings-similar-across-tasks","chapter":"2 beh :: expectation ~ cue","heading":"Are cue effects (on expectation ratings) similar across tasks?","text":"Using random slopes cue effects, plot side side\nthree tasks pain, cognitive, vicarious. can see, \nhigh correlation across random effects cue across\npain-cognitive, pain-vicarious, cognitive-vicarious. plots\nsuggest universal mechansim cue-expectancy effect, although\nmay critic cues identical across tasks, thereby \ncue effects identical due stimuli , necessarily \ndomain-general expectation process.","code":"## Warning: Removed 3 rows containing non-finite values (`stat_cor()`).## Warning: Removed 3 rows containing missing values (`geom_point()`).## Warning: Removed 1 rows containing non-finite values (`stat_cor()`).## Warning: Removed 1 rows containing missing values (`geom_point()`).## Warning: Removed 3 rows containing non-finite values (`stat_cor()`).## Warning: Removed 3 rows containing missing values (`geom_point()`)."},{"path":"beh-outcome-cue.html","id":"beh-outcome-cue","chapter":"3 beh :: outcome ~ cue","heading":"3 beh :: outcome ~ cue","text":"","code":""},{"path":"beh-outcome-cue.html","id":"what-is-the-purpose-of-this-notebook-1","chapter":"3 beh :: outcome ~ cue","heading":"What is the purpose of this notebook?","text":", plot outcome ratings function cue.Main model: lmer(outcome_rating ~ cue)Main question: outcome ratings differ function cue type?main effect cue outcome ratings, cue effect differ depending task type?IV: cue (high / low)DV: outcome ratingFIX: plot statistics random effect plot - broken?","code":"\n# parameters _____________________________________ # nolint\nsubject_varkey <- \"src_subject_id\"\niv <- \"param_cue_type\"; iv_keyword <- \"cue\"; dv <- \"event04_actual_angle\"; dv_keyword <- \"outcome\"\nxlab <- \"\"; ylim = c(0,180); ylab <- \"ratings (degree)\"\nsubject <- \"subject\"\nexclude <- \"sub-0001|sub-0003|sub-0004|sub-0005|sub-0025|sub-0999\"\nsubjectwise_mean <- \"mean_per_sub\"; group_mean <- \"mean_per_sub_norm_mean\"; se <- \"se\"\ncolor_scheme <-     if (any(startsWith(dv_keyword, c(\"expect\", \"Expect\")))) {\n        color_scheme <- c(\"#1B9E77\", \"#D95F02\")\n    } else {\n        color_scheme <- c(\"#4575B4\", \"#D73027\")\n    }\nprint_lmer_output <- FALSE\nggtitle_phrase <- \" - Outcome Rating (degree)\"\nanalysis_dir <- file.path(main_dir, \"analysis\", \"mixedeffect\", \"model03_iv-cue_dv-outcome\", as.character(Sys.Date()))\ndir.create(analysis_dir, showWarnings = FALSE, recursive = TRUE)"},{"path":"beh-outcome-cue.html","id":"pain-1","chapter":"3 beh :: outcome ~ cue","heading":"3.1 Pain","text":"","code":""},{"path":"beh-outcome-cue.html","id":"for-the-vicarious-task-what-is-the-effect-of-cue-on-outcome-ratings","chapter":"3 beh :: outcome ~ cue","heading":"For the vicarious task, what is the effect of cue on outcome ratings?","text":"[ INSERT DESCRIPTION ]","code":""},{"path":"beh-outcome-cue.html","id":"vicarious-1","chapter":"3 beh :: outcome ~ cue","heading":"3.2 Vicarious","text":"","code":""},{"path":"beh-outcome-cue.html","id":"for-the-vicarious-task-what-is-the-effect-of-cue-on-outcome-ratings-1","chapter":"3 beh :: outcome ~ cue","heading":"For the vicarious task, what is the effect of cue on outcome ratings?","text":"[ INSERT DESCRIPTION ]","code":""},{"path":"beh-outcome-cue.html","id":"cognitive-1","chapter":"3 beh :: outcome ~ cue","heading":"3.3 Cognitive","text":"","code":""},{"path":"beh-outcome-cue.html","id":"for-the-cognitive-task-what-is-the-effect-of-cue-on-outcome-ratings","chapter":"3 beh :: outcome ~ cue","heading":"For the cognitive task, what is the effect of cue on outcome ratings?","text":"[ INSERT DESCRIPTION ]","code":""},{"path":"beh-outcome-cue.html","id":"individual-differences-analysis-random-cue-effects","chapter":"3 beh :: outcome ~ cue","heading":"3.4 Individual differences analysis: random cue effects","text":"Using random effects mixed effects model, ’m plotting random effect cue types per task.[ INSERT DESCRIPTION ]Note:Pain: Warning: Removed 2 rows containing non-finite values (stat_cor()).Vicarious: Warning: Removed 1 rows containing non-finite values (stat_cor()).Cognitive: Warning: Removed 2 rows containing non-finite values (stat_cor()).","code":""},{"path":"beh-outcome-cue.html","id":"individual-differences-analysis-2-random-intercept-random-slopes-of-cue-effect","chapter":"3 beh :: outcome ~ cue","heading":"3.5 Individual differences analysis 2: random intercept + random slopes of cue effect","text":"based Tor’s suggestion, plotting random efects random intercepts well. just cue effectsNote:Pain: Warning: Removed 49 rows containing non-finite values (stat_cor()).Vicarious: Removed 8 rows containing non-finite values (stat_cor()).Cognitive: Removed 52 rows containing non-finite values (stat_cor()).","code":""},{"path":"beh-outcome-stim.html","id":"beh-outcome-stim","chapter":"4 beh :: outcome ~ stim","heading":"4 beh :: outcome ~ stim","text":"","code":""},{"path":"beh-outcome-stim.html","id":"what-is-the-purpose-of-this-notebook-2","chapter":"4 beh :: outcome ~ stim","heading":"What is the purpose of this notebook?","text":", plot outcome ratings function stimulus intensityMain model: lmer(outcome_rating ~ stim)Main question: outcome ratings differ function stimulus intensity? expect see linear effect stimulus intensity.main effect cue expectation ratings, cue effect differ depending task type?IV: stim (high / med / low)DV: outcome ratingFIX: plot statistics random effect plot - broken?","code":"\n# parameters _____________________________________ # nolint\nsubject_varkey <- \"src_subject_id\"\niv <- \"param_stimulus_type\"; iv_keyword <- \"stim\"; dv <- \"event04_actual_angle\"; dv_keyword <- \"outcome\"\nxlab <- \"\"; ylim = c(0,180); ylab <- \"ratings (degree)\"\nsubject <- \"subject\"\nexclude <- \"sub-0001|sub-0003|sub-0004|sub-0005|sub-0025|sub-0999\"\nsubjectwise_mean <- \"mean_per_sub\"; group_mean <- \"mean_per_sub_norm_mean\"; se <- \"se\"\ncolor_scheme <-     if (any(startsWith(dv_keyword, c(\"expect\", \"Expect\")))) {\n        color_scheme <- c(\"#1B9E77\", \"#D95F02\")\n    } else {\n        color_scheme <- c(\"#4575B4\", \"#D73027\")\n    }\nprint_lmer_output <- FALSE\nggtitle_phrase <- \" - Outcome Rating (degree)\"\nanalysis_dir <- file.path(main_dir, \"analysis\", \"mixedeffect\", paste0(\"model04_iv-\",iv_keyword,\"_dv-\",dv_keyword), as.character(Sys.Date()))\ndir.create(analysis_dir, showWarnings = FALSE, recursive = TRUE)"},{"path":"beh-outcome-stim.html","id":"pain-2","chapter":"4 beh :: outcome ~ stim","heading":"4.1 Pain","text":"","code":""},{"path":"beh-outcome-stim.html","id":"for-the-pain-task-what-is-the-effect-of-stimulus-intensity-on-outcome-ratings","chapter":"4 beh :: outcome ~ stim","heading":"For the pain task, what is the effect of stimulus intensity on outcome ratings?","text":"[ INSERT DESCRIPTION ]","code":"## Warning in geom_line(data = subjectwise, aes(group = .data[[subject]], x =\n## as.numeric(as.factor(.data[[iv]])) - : Ignoring unknown aesthetics: fill## Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n## ℹ Please use `linewidth` instead.\n## This warning is displayed once every 8 hours.\n## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was\n## generated."},{"path":"beh-outcome-stim.html","id":"vicarious-2","chapter":"4 beh :: outcome ~ stim","heading":"4.2 Vicarious","text":"","code":""},{"path":"beh-outcome-stim.html","id":"for-the-vicarious-task-what-is-the-effect-of-stimulus-intensity-on-outcome-ratings","chapter":"4 beh :: outcome ~ stim","heading":"For the vicarious task, what is the effect of stimulus intensity on outcome ratings?","text":"[ INSERT DESCRIPTION ]","code":"## Warning: Model failed to converge with 1 negative eigenvalue: -8.5e+01## Warning in geom_line(data = subjectwise, aes(group = .data[[subject]], x =\n## as.numeric(as.factor(.data[[iv]])) - : Ignoring unknown aesthetics: fill"},{"path":"beh-outcome-stim.html","id":"cognitive-2","chapter":"4 beh :: outcome ~ stim","heading":"4.3 Cognitive","text":"","code":""},{"path":"beh-outcome-stim.html","id":"for-the-cognitive-task-what-is-the-effect-of-stimulus-intensity-on-outcome-ratings","chapter":"4 beh :: outcome ~ stim","heading":"For the cognitive task, what is the effect of stimulus intensity on outcome ratings?","text":"[ INSERT DESCRIPTION ]","code":"## Warning: Model failed to converge with 1 negative eigenvalue: -1.1e+02## Warning in geom_line(data = subjectwise, aes(group = .data[[subject]], x =\n## as.numeric(as.factor(.data[[iv]])) - : Ignoring unknown aesthetics: fill"},{"path":"beh-outcome-stim.html","id":"for-loop","chapter":"4 beh :: outcome ~ stim","heading":"4.4 for loop","text":"","code":"## boundary (singular) fit: see help('isSingular')## Linear mixed model fit by REML. t-tests use Satterthwaite's method [\n## lmerModLmerTest]\n## Formula: \n## as.formula(reformulate(c(iv, sprintf(\"(%s|%s)\", iv, subject_keyword)),  \n##     response = dv))\n##    Data: df\n## \n## REML criterion at convergence: 52938.5\n## \n## Scaled residuals: \n##     Min      1Q  Median      3Q     Max \n## -4.5365 -0.5608 -0.0002  0.5695  4.6143 \n## \n## Random effects:\n##  Groups         Name                        Variance Std.Dev. Corr       \n##  src_subject_id (Intercept)                 952.46   30.862              \n##                 param_stimulus_typelow_stim 127.22   11.279   -0.47      \n##                 param_stimulus_typemed_stim  29.79    5.458   -0.24  0.97\n##  Residual                                   448.14   21.169              \n## Number of obs: 5851, groups:  src_subject_id, 110\n## \n## Fixed effects:\n##                             Estimate Std. Error       df t value Pr(>|t|)    \n## (Intercept)                  80.3242     2.9886 109.1411   26.88   <2e-16 ***\n## param_stimulus_typelow_stim -29.2521     1.2974 107.5783  -22.55   <2e-16 ***\n## param_stimulus_typemed_stim -13.7621     0.8652 148.5592  -15.90   <2e-16 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Correlation of Fixed Effects:\n##                 (Intr) prm_stmls_typl_\n## prm_stmls_typl_ -0.455                \n## prm_stmls_typm_ -0.236  0.718         \n## optimizer (nloptwrap) convergence code: 0 (OK)\n## boundary (singular) fit: see help('isSingular')## Warning in geom_line(data = subjectwise, aes(group = .data[[subject]], x =\n## as.numeric(as.factor(.data[[iv]])) - : Ignoring unknown aesthetics: fill## Coordinate system already present. Adding new coordinate system, which will\n## replace the existing one.\n## boundary (singular) fit: see help('isSingular')## Linear mixed model fit by REML. t-tests use Satterthwaite's method [\n## lmerModLmerTest]\n## Formula: \n## as.formula(reformulate(c(iv, sprintf(\"(%s|%s)\", iv, subject_keyword)),  \n##     response = dv))\n##    Data: df\n## \n## REML criterion at convergence: 56882.7\n## \n## Scaled residuals: \n##     Min      1Q  Median      3Q     Max \n## -5.5482 -0.5779 -0.1812  0.4475  6.1884 \n## \n## Random effects:\n##  Groups         Name                        Variance Std.Dev. Corr       \n##  src_subject_id (Intercept)                 283.44   16.836              \n##                 param_stimulus_typelow_stim 172.13   13.120   -0.88      \n##                 param_stimulus_typemed_stim  98.63    9.931   -0.85  1.00\n##  Residual                                   448.25   21.172              \n## Number of obs: 6313, groups:  src_subject_id, 110\n## \n## Fixed effects:\n##                             Estimate Std. Error      df t value Pr(>|t|)    \n## (Intercept)                   40.822      1.681 108.598   24.29   <2e-16 ***\n## param_stimulus_typelow_stim  -24.936      1.426 109.210  -17.49   <2e-16 ***\n## param_stimulus_typemed_stim  -17.614      1.162 114.541  -15.15   <2e-16 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Correlation of Fixed Effects:\n##                 (Intr) prm_stmls_typl_\n## prm_stmls_typl_ -0.837                \n## prm_stmls_typm_ -0.784  0.862         \n## optimizer (nloptwrap) convergence code: 0 (OK)\n## boundary (singular) fit: see help('isSingular')## Warning in geom_line(data = subjectwise, aes(group = .data[[subject]], x =\n## as.numeric(as.factor(.data[[iv]])) - : Ignoring unknown aesthetics: fill## Coordinate system already present. Adding new coordinate system, which will\n## replace the existing one.## boundary (singular) fit: see help('isSingular')## Linear mixed model fit by REML. t-tests use Satterthwaite's method [\n## lmerModLmerTest]\n## Formula: \n## as.formula(reformulate(c(iv, sprintf(\"(%s|%s)\", iv, subject_keyword)),  \n##     response = dv))\n##    Data: df\n## \n## REML criterion at convergence: 54866.8\n## \n## Scaled residuals: \n##     Min      1Q  Median      3Q     Max \n## -3.7173 -0.6283 -0.1660  0.4545  7.0548 \n## \n## Random effects:\n##  Groups         Name                        Variance Std.Dev. Corr       \n##  src_subject_id (Intercept)                 176.9233 13.3013             \n##                 param_stimulus_typelow_stim   8.2230  2.8676  -0.75      \n##                 param_stimulus_typemed_stim   0.4181  0.6466   0.37  0.33\n##  Residual                                   374.7596 19.3587             \n## Number of obs: 6220, groups:  src_subject_id, 110\n## \n## Fixed effects:\n##                             Estimate Std. Error       df t value Pr(>|t|)    \n## (Intercept)                  31.4642     1.3417 109.5625  23.451   <2e-16 ***\n## param_stimulus_typelow_stim  -8.1551     0.6623 106.7910 -12.313   <2e-16 ***\n## param_stimulus_typemed_stim  -1.0096     0.6056 718.4229  -1.667   0.0959 .  \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Correlation of Fixed Effects:\n##                 (Intr) prm_stmls_typl_\n## prm_stmls_typl_ -0.500                \n## prm_stmls_typm_ -0.186  0.465         \n## optimizer (nloptwrap) convergence code: 0 (OK)\n## boundary (singular) fit: see help('isSingular')## Warning in geom_line(data = subjectwise, aes(group = .data[[subject]], x =\n## as.numeric(as.factor(.data[[iv]])) - : Ignoring unknown aesthetics: fill## Coordinate system already present. Adding new coordinate system, which will\n## replace the existing one."},{"path":"beh-outcome-stim.html","id":"lineplot","chapter":"4 beh :: outcome ~ stim","heading":"4.5 Lineplot","text":"","code":"\nlibrary(ggpubr)\nDATA = as.data.frame(combined_se_calc_cooksd)\ncolor = c( \"#4575B4\", \"#D73027\")\nLINEIV1 = \"stim_ordered\"\nLINEIV2 = \"cue_ordered\"\nMEAN = \"mean_per_sub_norm_mean\"\nERROR = \"se\"\ndv_keyword = \"actual\"\np1 = plot_lineplot_onefactor(DATA, 'pain',\n               LINEIV1, MEAN, ERROR, color, xlab = \"Stimulus intensity\" , ylab= \"Outcome rating\", ggtitle = 'pain' )\np2 = plot_lineplot_onefactor(DATA,'vicarious',\n               LINEIV1, MEAN, ERROR, color,xlab = \"Stimulus intensity\" , ylab= \"Outcome rating\",ggtitle = 'vicarious')\np3 = plot_lineplot_onefactor(DATA, 'cognitive',\n               LINEIV1, MEAN, ERROR, color,xlab = \"Stimulus intensity\" , ylab= \"Outcome rating\",ggtitle = 'cognitive')\n#grid.arrange(p1, p2, p3, ncol=3 , common.legend = TRUE)\nggpubr::ggarrange(p1,p2,p3,ncol = 3, nrow = 1, common.legend = TRUE,legend = \"bottom\")\nplot_filename = file.path(analysis_dir,\n                          paste('lineplot_task-all_rating-',dv_keyword,'.png', sep = \"\"))\nggsave(plot_filename, width = 15, height = 6)"},{"path":"beh-outcome-stim.html","id":"individual-differences-in-outcome-rating-cue-effect","chapter":"4 beh :: outcome ~ stim","heading":"4.6 individual differences in outcome rating cue effect","text":"[ INSERT DESCRIPTION ]","code":""},{"path":"beh-outcome-cueXstim.html","id":"beh-outcome-cueXstim","chapter":"5 beh :: outcome ~ cue * stim","heading":"5 beh :: outcome ~ cue * stim","text":"","code":""},{"path":"beh-outcome-cueXstim.html","id":"what-is-the-purpose-of-this-notebook-3","chapter":"5 beh :: outcome ~ cue * stim","heading":"What is the purpose of this notebook?","text":", plot outcome ratings function cue stimulus intensity.Main model: lmer(outcome_rating ~ cue * stim)Main question: outcome ratings differ function cue type stimulus intensity?main effect cue outcome ratings, cue effect differ depending task type?interaction two factors?IV:\ncue (high / low)\nstim (high / med / low)\ncue (high / low)stim (high / med / low)DV: outcome rating","code":""},{"path":"beh-outcome-cueXstim.html","id":"cue-contrasts","chapter":"5 beh :: outcome ~ cue * stim","heading":"5.1 Cue contrasts","text":"lmer(Outcome ~ Cue_contrast)IV: Stim X Cue_contrastDV: Outcome rating","code":""},{"path":"beh-outcome-cueXstim.html","id":"todo-model-03-3-2.-individual-differences","chapter":"5 beh :: outcome ~ cue * stim","heading":"5.2 TODO: model 03 3-2. individual differences","text":"","code":""},{"path":"beh-outcome-cueXstim.html","id":"delete-after-sandbox","chapter":"5 beh :: outcome ~ cue * stim","heading":"5.2.1 DELETE AFTER SANDBOX","text":"","code":""},{"path":"beh-outcome-cueXstim.html","id":"cue-x-stim-raincloud-plots","chapter":"5 beh :: outcome ~ cue * stim","heading":"5.3 Cue X Stim Raincloud plots","text":"IV: Cue x stimDV: Outcome rating","code":"## TableGrob (1 x 2) \"arrange\": 2 grobs\n##   z     cells    name              grob\n## 1 1 (1-1,1-1) arrange    gtable[layout]\n## 2 2 (1-1,2-2) arrange gtable[guide-box]## TableGrob (1 x 2) \"arrange\": 2 grobs\n##   z     cells    name              grob\n## 1 1 (1-1,1-1) arrange    gtable[layout]\n## 2 2 (1-1,2-2) arrange gtable[guide-box]## TableGrob (1 x 2) \"arrange\": 2 grobs\n##   z     cells    name              grob\n## 1 1 (1-1,1-1) arrange    gtable[layout]\n## 2 2 (1-1,2-2) arrange gtable[guide-box]"},{"path":"beh-outcome-cueXstim.html","id":"cue-x-stim-linear-model","chapter":"5 beh :: outcome ~ cue * stim","heading":"5.3.1 Cue X Stim linear model","text":"\nMultilevel-modeling:\nlmer(OUTCOME ~ CUE * STIM + (CUE * STIM | sub), data = pvc)\n","code":"\n    # stim_con1 <- \"STIM_linear\"\n    # stim_con2 <- \"STIM_quadratic\"\n    # iv1 <- \"CUE_high_gt_low\"\n    # dv <- \"OUTCOME\"\n\n\nlibrary(Matrix)\nlibrary(glmmTMB)## Warning in checkDepPackageVersion(dep_pkg = \"TMB\"): Package version inconsistency detected.\n## glmmTMB was built with TMB version 1.9.6\n## Current TMB version is 1.9.10\n## Please re-install glmmTMB from source or restore original 'TMB' package (see '?reinstalling' for more information)\nlibrary(TMB)\nlibrary(RcppEigen)\n\ndf <- data[!is.na(data$OUTCOME), ]\n\nfullmodel <-\n  lmer(\n    OUTCOME ~ CUE_high_gt_low * STIM_linear + (\n      CUE_high_gt_low * STIM_linear  |\n        subject\n    ),\n    data = df\n\n  )## boundary (singular) fit: see help('isSingular')\n# TODO:: troubleshoot\n# m <- glmmTMB(OUTCOME ~ CUE_high_gt_low * STIM_linear + ( CUE_high_gt_low * STIM_linear  | subject),\n#              data = df,\n#              control = glmmTMBControl(rank_check = \"adjust\"))\n#              #start = start_values,\n#\n# summary(m)\n\nsjPlot::tab_model(fullmodel,\n                  title = \"Multilevel-modeling: \\nlmer(OUTCOME ~ CUE * STIM + (CUE * STIM | sub), data = pvc)\",\n                  CSS = list(css.table = '+font-size: 12;'))"},{"path":"beh-outcome-cueXstim.html","id":"individual-differences-in-cue-effects","chapter":"5 beh :: outcome ~ cue * stim","heading":"5.4 Individual differences in cue effects","text":"","code":""},{"path":"beh-outcome-cueXstim.html","id":"cue-x-stim-lineplot","chapter":"5 beh :: outcome ~ cue * stim","heading":"5.5 Cue X Stim Lineplot","text":"Instead rain cloud plots, , plot lines confidence interval\ncue x stim combination. Plotted per task.","code":""},{"path":"beh-outcome-cueXstim.html","id":"clinical-trials","chapter":"5 beh :: outcome ~ cue * stim","heading":"5.6 Clinical trials","text":"","code":""},{"path":"beh-outcome-cueXstim.html","id":"cue-contrast-average-across-intensity","chapter":"5 beh :: outcome ~ cue * stim","heading":"5.7 cue contrast average across intensity","text":"","code":"## [1] \"pain\"\n## [1] 8.203947\n## [1] 0.8871599\n## [1] \"high vs. low cue\"\n## [1] \"low\"              \"61.6884121864272\" \"2.860880140792\"  \n## [1] \"high\"             \"70.2234946843967\" \"2.85365310068339\"\n## [1] \"vicarious\"\n## [1] 7.69279\n## [1] 0.6584873\n## [1] \"high vs. low cue\"\n## [1] \"low\"              \"22.7808026788692\" \"1.0440409512757\" \n## [1] \"high\"             \"30.636407755966\"  \"1.20480098494488\"\n## [1] \"cognitive\"\n## [1] 8.019356\n## [1] 0.7038933\n## [1] \"high vs. low cue\"\n## [1] \"low\"              \"24.308987672219\"  \"1.19373008209444\"\n## [1] \"high\"             \"32.34623546235\"   \"1.37653031156445\""},{"path":"beh-outcome-cueXstim.html","id":"cue-contrast-average-across-expectation","chapter":"5 beh :: outcome ~ cue * stim","heading":"5.8 cue contrast average across expectation","text":"https://stackoverflow.com/questions/29402528/append-data-frames-together----loop/29419402","code":"## [1] \"pain\"\n## [1] 35.05694\n## [1] 1.989724\n## [1] \"high vs. low cue\"\n## [1] \"low\"              \"44.6580941421071\" \"3.02430373086043\"\n## [1] \"high\"             \"79.4644108331637\" \"2.85584321656255\"\n## [1] \"vicarious\"\n## [1] 33.25123\n## [1] 1.503149\n## [1] \"high vs. low cue\"\n## [1] \"low\"              \"14.9314711535258\" \"1.00860750130232\"\n## [1] \"high\"             \"48.146271174259\"  \"1.54236667339445\"\n## [1] \"cognitive\"\n## [1] 30.7638\n## [1] 1.53046\n## [1] \"high vs. low cue\"\n## [1] \"low\"              \"18.5956241315907\" \"1.20836045474955\"\n## [1] \"high\"             \"49.3940294143433\" \"1.73640570707356\""},{"path":"jepma.html","id":"jepma","chapter":"6 beh :: expect-outcome ~ cue * trial","heading":"6 beh :: expect-outcome ~ cue * trial","text":"","code":""},{"path":"jepma.html","id":"overview","chapter":"6 beh :: expect-outcome ~ cue * trial","heading":"6.1 Overview","text":"purpose markdown benchmark plots Jepma et al. (2018).\n, plot expectancy ratings actual ratings, high low cues – one panel.","code":""},{"path":"jepma.html","id":"some-thoughts-todos","chapter":"6 beh :: expect-outcome ~ cue * trial","heading":"Some thoughts, TODOs","text":"plot 2. runs repeated omitted subjects 72 trials. need identify list work behavioral data.need check whether counterbalancing done correctly.load data combine participant data","code":"\nmain_dir = dirname(dirname(getwd()))\ndatadir = file.path(main_dir, 'data', 'beh', 'beh02_preproc')\n# parameters _____________________________________ # nolint\nsubject_varkey <- \"src_subject_id\"\niv <- \"param_cue_type\"\ndv <- \"event03_RT\"\ndv_keyword <- \"RT\"\nxlab <- \"\"\ntaskname <- \"pain\"\n\nylab <- \"ratings (degree)\"\nsubject <- \"subject\"\nexclude <- \"sub-0001|sub-0003|sub-0004|sub-0005|sub-0025|sub-0999\" #/ \"sub-0999|sub-0001|sub-0002|sub-0003|sub-0004|sub-0005|sub-0006|sub-0007|sub-0008|sub-0009|sub-0010|sub-0011\"\n\n# load data _____________________________________\ndata <- load_task_social_df(datadir, taskname = taskname, subject_varkey = subject_varkey, iv = iv, exclude = exclude)\ndata$event03_RT <- data$event03_stimulusC_reseponseonset - data$event03_stimulus_displayonset\n# data['event03_RT'], data.event03_RT - pandas\nanalysis_dir <- file.path(main_dir, \"analysis\", \"mixedeffect\", \"model06_iv-cue-trial_dv-expect-actual\", as.character(Sys.Date()))\ndir.create(analysis_dir, showWarnings = FALSE, recursive = TRUE)\nsummary(data)##  src_subject_id     session_id    param_task_name    param_run_num   \n##  Min.   :  2.00   Min.   :1.000   Length:6492        Min.   :-2.000  \n##  1st Qu.: 37.00   1st Qu.:1.000   Class :character   1st Qu.: 2.000  \n##  Median : 73.00   Median :3.000   Mode  :character   Median : 3.000  \n##  Mean   : 69.86   Mean   :2.595                      Mean   : 3.462  \n##  3rd Qu.:101.00   3rd Qu.:4.000                      3rd Qu.: 5.000  \n##  Max.   :133.00   Max.   :4.000                      Max.   : 6.000  \n##                                                                      \n##  param_counterbalance_ver param_counterbalance_block_num param_cue_type    \n##  Min.   :1.000            Min.   :1.000                  Length:6492       \n##  1st Qu.:2.000            1st Qu.:1.000                  Class :character  \n##  Median :3.000            Median :2.000                  Mode  :character  \n##  Mean   :3.157            Mean   :1.503                                    \n##  3rd Qu.:4.000            3rd Qu.:2.000                                    \n##  Max.   :5.000            Max.   :2.000                                    \n##                                                                            \n##  param_stimulus_type param_cond_type param_trigger_onset param_start_biopac \n##  Length:6492         Min.   :1.0     Min.   :1.615e+09   Min.   :1.615e+09  \n##  Class :character    1st Qu.:2.0     1st Qu.:1.627e+09   1st Qu.:1.627e+09  \n##  Mode  :character    Median :3.5     Median :1.632e+09   Median :1.632e+09  \n##                      Mean   :3.5     Mean   :1.634e+09   Mean   :1.634e+09  \n##                      3rd Qu.:5.0     3rd Qu.:1.644e+09   3rd Qu.:1.644e+09  \n##                      Max.   :6.0     Max.   :1.657e+09   Max.   :1.657e+09  \n##                                                                             \n##    ITI_onset           ITI_biopac         ITI_duration      event01_cue_onset  \n##  Min.   :1.615e+09   Min.   :1.615e+09   Min.   : 0.00281   Min.   :1.615e+09  \n##  1st Qu.:1.627e+09   1st Qu.:1.627e+09   1st Qu.: 1.56340   1st Qu.:1.627e+09  \n##  Median :1.632e+09   Median :1.632e+09   Median : 3.26975   Median :1.632e+09  \n##  Mean   :1.634e+09   Mean   :1.634e+09   Mean   : 4.44243   Mean   :1.634e+09  \n##  3rd Qu.:1.644e+09   3rd Qu.:1.644e+09   3rd Qu.: 6.65337   3rd Qu.:1.644e+09  \n##  Max.   :1.657e+09   Max.   :1.657e+09   Max.   :17.07488   Max.   :1.657e+09  \n##                                                                                \n##  event01_cue_biopac  event01_cue_type   event01_cue_filename\n##  Min.   :1.615e+09   Length:6492        Length:6492         \n##  1st Qu.:1.627e+09   Class :character   Class :character    \n##  Median :1.632e+09   Mode  :character   Mode  :character    \n##  Mean   :1.634e+09                                          \n##  3rd Qu.:1.644e+09                                          \n##  Max.   :1.657e+09                                          \n##                                                             \n##   ISI01_onset         ISI01_biopac       ISI01_duration   \n##  Min.   :1.615e+09   Min.   :1.615e+09   Min.   :0.00396  \n##  1st Qu.:1.627e+09   1st Qu.:1.627e+09   1st Qu.:0.99133  \n##  Median :1.632e+09   Median :1.632e+09   Median :1.39215  \n##  Mean   :1.634e+09   Mean   :1.634e+09   Mean   :1.47844  \n##  3rd Qu.:1.644e+09   3rd Qu.:1.644e+09   3rd Qu.:1.98314  \n##  Max.   :1.657e+09   Max.   :1.657e+09   Max.   :2.89685  \n##                                                           \n##  event02_expect_displayonset event02_expect_biopac event02_expect_responseonset\n##  Min.   :1.615e+09           Min.   :1.615e+09     Min.   :1.615e+09           \n##  1st Qu.:1.627e+09           1st Qu.:1.627e+09     1st Qu.:1.627e+09           \n##  Median :1.632e+09           Median :1.632e+09     Median :1.632e+09           \n##  Mean   :1.634e+09           Mean   :1.634e+09     Mean   :1.634e+09           \n##  3rd Qu.:1.644e+09           3rd Qu.:1.644e+09     3rd Qu.:1.643e+09           \n##  Max.   :1.657e+09           Max.   :1.657e+09     Max.   :1.657e+09           \n##                                                    NA's   :661                 \n##  event02_expect_RT event02_expect_angle event02_expect_angle_label\n##  Min.   :0.6504    Min.   :  0.00       Length:6492               \n##  1st Qu.:1.6341    1st Qu.: 30.18       Class :character          \n##  Median :2.0517    Median : 58.56       Mode  :character          \n##  Mean   :2.1397    Mean   : 62.94                                 \n##  3rd Qu.:2.5678    3rd Qu.: 90.00                                 \n##  Max.   :3.9912    Max.   :180.00                                 \n##  NA's   :661       NA's   :661                                    \n##   ISI02_onset         ISI02_biopac       ISI02_duration   \n##  Min.   :1.615e+09   Min.   :1.615e+09   Min.   : 0.1422  \n##  1st Qu.:1.627e+09   1st Qu.:1.627e+09   1st Qu.: 1.8599  \n##  Median :1.632e+09   Median :1.632e+09   Median : 4.3664  \n##  Mean   :1.634e+09   Mean   :1.634e+09   Mean   : 4.4542  \n##  3rd Qu.:1.644e+09   3rd Qu.:1.644e+09   3rd Qu.: 6.2697  \n##  Max.   :1.657e+09   Max.   :1.657e+09   Max.   :20.0723  \n##                                                           \n##  event03_stimulus_type event03_stimulus_displayonset event03_stimulus_biopac\n##  Length:6492           Min.   :1.615e+09             Min.   :1.615e+09      \n##  Class :character      1st Qu.:1.627e+09             1st Qu.:1.627e+09      \n##  Mode  :character      Median :1.632e+09             Median :1.632e+09      \n##                        Mean   :1.634e+09             Mean   :1.634e+09      \n##                        3rd Qu.:1.644e+09             3rd Qu.:1.644e+09      \n##                        Max.   :1.657e+09             Max.   :1.657e+09      \n##                                                                             \n##  event03_stimulus_C_stim_match event03_stimulusC_response\n##  Mode:logical                  Min.   :0                 \n##  NA's:6492                     1st Qu.:0                 \n##                                Median :0                 \n##                                Mean   :0                 \n##                                3rd Qu.:0                 \n##                                Max.   :0                 \n##                                                          \n##  event03_stimulusC_responsekeyname event03_stimulusC_reseponseonset\n##  Mode:logical                      Min.   :0                       \n##  NA's:6492                         1st Qu.:0                       \n##                                    Median :0                       \n##                                    Mean   :0                       \n##                                    3rd Qu.:0                       \n##                                    Max.   :0                       \n##                                                                    \n##  event03_stimulusC_RT  ISI03_onset         ISI03_biopac       ISI03_duration   \n##  Min.   :0            Min.   :1.615e+09   Min.   :1.615e+09   Min.   : 0.4788  \n##  1st Qu.:0            1st Qu.:1.627e+09   1st Qu.:1.627e+09   1st Qu.: 2.3846  \n##  Median :0            Median :1.632e+09   Median :1.632e+09   Median : 4.0370  \n##  Mean   :0            Mean   :1.634e+09   Mean   :1.634e+09   Mean   : 4.4870  \n##  3rd Qu.:0            3rd Qu.:1.644e+09   3rd Qu.:1.644e+09   3rd Qu.: 5.8864  \n##  Max.   :0            Max.   :1.657e+09   Max.   :1.657e+09   Max.   :17.6951  \n##                                                                                \n##  event04_actual_displayonset event04_actual_biopac event04_actual_responseonset\n##  Min.   :1.615e+09           Min.   :1.615e+09     Min.   :1.615e+09           \n##  1st Qu.:1.627e+09           1st Qu.:1.627e+09     1st Qu.:1.627e+09           \n##  Median :1.632e+09           Median :1.632e+09     Median :1.631e+09           \n##  Mean   :1.634e+09           Mean   :1.634e+09     Mean   :1.634e+09           \n##  3rd Qu.:1.644e+09           3rd Qu.:1.644e+09     3rd Qu.:1.643e+09           \n##  Max.   :1.657e+09           Max.   :1.657e+09     Max.   :1.657e+09           \n##                                                    NA's   :638                 \n##  event04_actual_RT event04_actual_angle event04_actual_angle_label\n##  Min.   :0.0168    Min.   :  0.00       Length:6492               \n##  1st Qu.:1.9197    1st Qu.: 38.80       Class :character          \n##  Median :2.3510    Median : 60.77       Mode  :character          \n##  Mean   :2.4005    Mean   : 66.33                                 \n##  3rd Qu.:2.8512    3rd Qu.: 88.38                                 \n##  Max.   :3.9930    Max.   :180.00                                 \n##  NA's   :638       NA's   :641                                    \n##  param_end_instruct_onset param_end_biopac    param_experiment_duration\n##  Min.   :1.615e+09        Min.   :1.615e+09   Min.   :398.1            \n##  1st Qu.:1.627e+09        1st Qu.:1.627e+09   1st Qu.:398.6            \n##  Median :1.632e+09        Median :1.632e+09   Median :398.8            \n##  Mean   :1.634e+09        Mean   :1.634e+09   Mean   :398.8            \n##  3rd Qu.:1.644e+09        3rd Qu.:1.644e+09   3rd Qu.:399.0            \n##  Max.   :1.657e+09        Max.   :1.657e+09   Max.   :399.5            \n##                                                                        \n##  event03_stimulus_P_trigger event03_stimulus_P_delay_between_medoc\n##  Length:6492                Min.   :0                             \n##  Class :character           1st Qu.:0                             \n##  Mode  :character           Median :0                             \n##                             Mean   :0                             \n##                             3rd Qu.:0                             \n##                             Max.   :0                             \n##                                                                   \n##  event03_stimulus_V_patientid event03_stimulus_V_filename\n##  Mode:logical                 Mode:logical               \n##  NA's:6492                    NA's:6492                  \n##                                                          \n##                                                          \n##                                                          \n##                                                          \n##                                                          \n##  event03_stimulus_C_stim_num event03_stimulus_C_stim_filename\n##  Min.   :0                   Mode:logical                    \n##  1st Qu.:0                   NA's:6492                       \n##  Median :0                                                   \n##  Mean   :0                                                   \n##  3rd Qu.:0                                                   \n##  Max.   :0                                                   \n##                                                              \n##  delay_between_medoc    subject       event03_RT        \n##  Min.   :0.01409     98     :  96   Min.   :-1.657e+09  \n##  1st Qu.:0.03728     6      :  72   1st Qu.:-1.644e+09  \n##  Median :0.04537     9      :  72   Median :-1.632e+09  \n##  Mean   :0.04818     10     :  72   Mean   :-1.634e+09  \n##  3rd Qu.:0.05712     18     :  72   3rd Qu.:-1.627e+09  \n##  Max.   :2.03502     29     :  72   Max.   :-1.615e+09  \n##                      (Other):6036\n# data(data, package = 'visibly')\n\nmyvars <- names(data) %in%\n  c( \"event02_expect_angle\", \"event02_expect_RT\", \"event04_actual_angle\", \"event04_actual_RT\", \"event01_cue_onset\")\nnewdata <- data[myvars]\n# numdata  <- unlist(lapply(data, is.numeric), use.names = FALSE)\ndata_naomit <- na.omit(newdata)\ncor_matrix = cor(data_naomit)\ncorr_heat(cor_matrix)## No FA options specified, using psych package defaults.## Warning in fac(r = r, nfactors = nfactors, n.obs = n.obs, rotate = rotate, : I\n## am sorry, to do these rotations requires the GPArotation package to be\n## installed\nISIvars <- names(data) %in%\n  c( \"ISI01_duration\", \"ISI02_duration\", \"ISI03_duration\")\nISIdata <- data[ISIvars]\n# numdata  <- unlist(lapply(data, is.numeric), use.names = FALSE)\nISIdata_naomit <- na.omit(ISIdata)\nISIcor_matrix = cor(ISIdata_naomit)\ncorr_heat(ISIcor_matrix)## No FA options specified, using psych package defaults.\ncar::vif(lm(event04_actual_angle ~  event02_expect_angle + event02_expect_RT + event04_actual_RT, dat = data_naomit))## event02_expect_angle    event02_expect_RT    event04_actual_RT \n##             1.019462             1.084419             1.099422"},{"path":"jepma.html","id":"plot-1---one-run-average-across-participants","chapter":"6 beh :: expect-outcome ~ cue * trial","heading":"6.2 plot 1 - one run, average across participants","text":"ggplot","code":"\n# subject # run # param_cue # param_stim # rating_type # rating_value\n\ndata_trial= data %>%\n  arrange(src_subject_id, session_id, param_run_num) %>%\n  group_by(src_subject_id) %>%\n  mutate(trial_index = rep_len(1:12, length.out = n()))\ndata_long = data_trial %>%\n  pivot_longer(cols = c('event02_expect_angle', 'event04_actual_angle'),\n               names_to = \"rating_type\",\n               values_to = \"rating_value\")\n# # PLOT\n    data_long$cue_name[data_long$param_cue_type == \"high_cue\"] <- \"high cue\"## Warning: Unknown or uninitialised column: `cue_name`.\n    data_long$cue_name[data_long$param_cue_type == \"low_cue\"] <- \"low cue\"\n\n    data_long$stim_name[data_long$param_stimulus_type == \"high_stim\"] <- \"high\"## Warning: Unknown or uninitialised column: `stim_name`.\n    data_long$stim_name[data_long$param_stimulus_type == \"med_stim\"] <- \"med\"\n    data_long$stim_name[data_long$param_stimulus_type == \"low_stim\"] <- \"low\"\n\n    data_long$stim_ordered <- factor(\n        data_long$stim_name,\n        levels = c(\"low\", \"med\", \"high\")\n    )\n    data_long$cue_ordered <- factor(\n        data_long$cue_name,\n        levels = c(\"low cue\", \"high cue\")\n    )\n    subject <- \"src_subject_id\"\n    model_iv1 <- \"stim_ordered\"\n    model_iv2 <- \"cue_ordered\"\n    rating <- \"rating_type\"\n    dv <- \"rating_value\"\n    trialorder_subjectwise <- meanSummary(\n        data_long,\n        c(subject, model_iv2, rating, \"trial_index\"), dv\n    )\n\n    subjectwise_naomit <- na.omit(trialorder_subjectwise)\n\n    trialorder_groupwise <- summarySEwithin(\n        data = subjectwise_naomit,\n        measurevar = \"mean_per_sub\",\n        withinvars = c(\"cue_ordered\", \"rating_type\",  \"trial_index\"), idvar = subject\n    )## \n## Attaching package: 'raincloudplots'## The following object is masked _by_ '.GlobalEnv':\n## \n##     GeomFlatViolin## Automatically converting the following non-factors to factors: rating_type, trial_index\ntrialorder_subjectwise$rating_type_key <- mapvalues(trialorder_subjectwise$rating_type,\n                                                from = c(\"event02_expect_angle\", \"event04_actual_angle\"),\n                                                to = c(\"expect\", \"actual\"))\ntrialorder_groupwise$rating_type_key <- mapvalues(trialorder_groupwise$rating_type,\n                                                from = c(\"event02_expect_angle\", \"event04_actual_angle\"),\n                                                to = c(\"expect\", \"actual\"))\nactual_trialorder_groupwise <- trialorder_groupwise[which(trialorder_groupwise$rating_type_key == \"actual\"),]\nexpect_trialorder_groupwise <-trialorder_groupwise[which(trialorder_groupwise$rating_type_key == \"expect\"),]\nactual_trialorder_subjectwise <- trialorder_subjectwise[which(trialorder_subjectwise$rating_type_key == \"actual\"),]\nexpect_trialorder_subjectwise <-trialorder_subjectwise[which(trialorder_subjectwise$rating_type_key == \"expect\"),]\n# * dataset: trialorder_groupwise\n# * x-axis: trial_index (sorted)\n# * y-axis: rating\n# * group: cue_ordered, rating_type\n# * DV: mean_per_sub_norm_mean\n# * error bar: se\n\niv1 = \"trial_index\"\niv2 = \"cue_ordered\"\ndata =\ng <- ggplot(\n  data = trialorder_groupwise,\n  aes(x = trial_index,\n      y = mean_per_sub_norm_mean,\n      color = cue_ordered,\n      group = rating_type_key\n      )\n  ) +\n    geom_point(\n    data = trialorder_groupwise,\n    aes(\n      shape = as.character(rating_type_key),\n      x =trial_index,\n      y = mean_per_sub_norm_mean,\n      group = rating_type_key,\n      #color = cue_ordered\n      ),\n    #position = position_jitter(width = .05),\n    size = 3\n    ) +\n  scale_shape_manual(values=c(16, 21))+\n\n  # geom_point(\n  #   data = trialorder_subjectwise,\n  #   aes(\n  #     x = as.numeric(trial_index) - .15,\n  #     y = mean_per_sub,\n  #     color = cue_ordered\n  #     ),\n  #   position = position_jitter(width = .05),\n  #   size = 1, alpha = 0.8, shape = 20\n  #   ) +\n  geom_errorbar(\n    data = trialorder_groupwise,\n    aes(\n      x = as.numeric(trial_index),\n      y = mean_per_sub_norm_mean,\n      group = rating_type_key,\n      colour = cue_ordered,\n      ymin = mean_per_sub_norm_mean - se,\n      ymax = mean_per_sub_norm_mean + se\n      ), width = .01, size = 0.5\n    ) +\n  scale_color_manual(values = c(\"high cue\" = \"red\",\n                                \"low cue\" = \"blue\")) +\n    xlab(\"no. of trials\") +\n  ylab(\"rating\") +\n  ylim(0,100) +\n  theme_bw() +\n  theme(    axis.text.x = element_text(size = 10),\n    axis.text.y = element_text(size = 10),\n    axis.title.x = element_text(size = 15),\n    axis.title.y = element_text(size = 15))## Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n## ℹ Please use `linewidth` instead.\n## This warning is displayed once every 8 hours.\n## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was\n## generated.\ng"},{"path":"jepma.html","id":"plot-2---average-across-participant-but-spread-all-6-runs-in-one-x-axis","chapter":"6 beh :: expect-outcome ~ cue * trial","heading":"6.3 plot 2 - average across participant, but spread all 6 runs in one x axis","text":"load data combine participant data","code":"\nmain_dir = dirname(dirname(getwd()))\ndatadir = file.path(main_dir, 'data', 'beh', 'beh02_preproc')\n# parameters _____________________________________ # nolint\nsubject_varkey <- \"src_subject_id\"\niv <- \"param_cue_type\"\ndv <- \"event03_RT\"\ndv_keyword <- \"RT\"\nxlab <- \"\"\ntaskname <- \"pain\"\n\nylab <- \"ratings (degree)\"\nsubject <- \"subject\"\nexclude <- \"sub-0999|sub-0001|sub-0002|sub-0003|sub-0004|sub-0005|sub-0006|sub-0007|sub-0008|sub-0009|sub-0010|sub-0011\"\n\n# load data _____________________________________\ndata <- load_task_social_df(datadir, taskname = taskname, subject_varkey = subject_varkey, iv = iv, exclude = exclude)"},{"path":"jepma.html","id":"p2-check-number-of-trials-per-participant","chapter":"6 beh :: expect-outcome ~ cue * trial","heading":"p2 :: check number of trials per participant","text":"","code":"\ndata_p2= data %>%\n  arrange(src_subject_id ) %>%\n  group_by(src_subject_id) %>%\n  mutate(trial_index = row_number())\n# df_clean <- data_p2[complete.cases(data_p2$event02_expect_angle), ]\ndf_clean <- data_p2[complete.cases(data_p2$event04_actual_angle), ]"},{"path":"jepma.html","id":"check-if-every-participant-has-maximum-of-72-trials.-anything-beyond-that-is-erroneous","chapter":"6 beh :: expect-outcome ~ cue * trial","heading":"6.3.0.1 check if every participant has maximum of 72 trials. Anything beyond that is erroneous","text":"","code":"\n# Assuming participant IDs are in a column named \"participant_id\"\n# and row numbers are in a column named \"row_number\"\n# Replace \"your_data\" with the name of your dataset\n\n# Calculate the maximum row number for each participant\nmax_rows <- aggregate(trial_index ~ src_subject_id, data_p2, max)\n\n# Check if any participant's maximum row number is not 72\nmax_rows[max_rows$trial_index > 72,]$src_subject_id## [1] 98"},{"path":"jepma.html","id":"p2-identify-erroneous-participant","chapter":"6 beh :: expect-outcome ~ cue * trial","heading":"p2 :: identify erroneous participant","text":"","code":"\n# participants who have more than 72 trials will be flagged\n# excluded for now\n# TODO: resolve subject 98\ncount_trial <- df_clean %>% count(\"src_subject_id\")\ncount_trial[count_trial$freq > 72,]## [1] src_subject_id freq          \n## <0 rows> (or 0-length row.names)\ncount_trial[count_trial$freq > 60,]$src_subject_id##  [1]  18  29  31  33  34  36  37  38  39  43  44  46  50  51  52  53  55  57  58\n## [20]  60  61  62  65  73  74  78  80  86  87  88  90  91  93  94  95  99 100 101\n## [39] 105 106 109 111 115 116 122 124 126 127 128 130 132 133"},{"path":"jepma.html","id":"p2-convert-to-long-form","chapter":"6 beh :: expect-outcome ~ cue * trial","heading":"p2 :: convert to long form","text":"","code":"\ndf_clean <- df_clean[df_clean$src_subject_id != 98, ]\ndata_p2_long = df_clean %>%\n  pivot_longer(cols = c('event02_expect_angle', 'event04_actual_angle'),\n               names_to = \"rating_type\",\n               values_to = \"rating_value\")"},{"path":"jepma.html","id":"p2-plot-data","chapter":"6 beh :: expect-outcome ~ cue * trial","heading":"p2 :: plot data","text":"’m plotting trials per participant. case, trialwise variability, ’re plotting 72 trials.\nAveraging across participants source variability, reflected error barsggplot","code":"\n# PLOT\n  # I'm plotting\n    data_p2_long$cue_name[data_p2_long$param_cue_type == \"high_cue\"] <- \"high cue\"## Warning: Unknown or uninitialised column: `cue_name`.\n    data_p2_long$cue_name[data_p2_long$param_cue_type == \"low_cue\"] <- \"low cue\"\n\n    data_p2_long$stim_name[data_p2_long$param_stimulus_type == \"high_stim\"] <- \"high\"## Warning: Unknown or uninitialised column: `stim_name`.\n    data_p2_long$stim_name[data_p2_long$param_stimulus_type == \"med_stim\"] <- \"med\"\n    data_p2_long$stim_name[data_p2_long$param_stimulus_type == \"low_stim\"] <- \"low\"\n\n    data_p2_long$stim_ordered <- factor(\n        data_p2_long$stim_name,\n        levels = c(\"low\", \"med\", \"high\")\n    )\n    data_p2_long$cue_ordered <- factor(\n        data_p2_long$cue_name,\n        levels = c(\"low cue\", \"high cue\")\n    )\n    model_iv1 <- \"stim_ordered\"\n    model_iv2 <- \"cue_ordered\"\n    rating <- \"rating_type\"\n    dv <- \"rating_value\"\n\n    trialorder_subjectwise_p2 <- meanSummary(\n        data_p2_long,\n        c( model_iv2, rating, \"trial_index\"), dv\n    )\n\n    subjectwise_naomit_p2 <- na.omit(trialorder_subjectwise_p2)\n    trialorder_groupwise_p2 <- summarySEwithin(\n        data = subjectwise_naomit_p2,\n        measurevar = \"mean_per_sub\",\n        withinvars = c(\"cue_ordered\", \"rating_type\", \"trial_index\"), idvar = subject\n    )## Automatically converting the following non-factors to factors: rating_type, trial_index## Warning in qt(conf.interval/2 + 0.5, datac$N - 1): NaNs produced## Warning in qt(conf.interval/2 + 0.5, datac$N - 1): NaNs produced\ntrialorder_groupwise_p2$rating_type_key <- mapvalues(trialorder_groupwise_p2$rating_type,\n                                                from = c(\"event02_expect_angle\", \"event04_actual_angle\"),\n                                                to = c(\"expect\", \"actual\"))"},{"path":"jepma.html","id":"plot-data-version-2","chapter":"6 beh :: expect-outcome ~ cue * trial","heading":"6.4 plot data version 2","text":"","code":"## Warning: Removed 1 rows containing missing values (`geom_point()`)."},{"path":"jepma.html","id":"subset-of-participants","chapter":"6 beh :: expect-outcome ~ cue * trial","heading":"6.5 subset of participants","text":"","code":"## # A tibble: 5,851 × 60\n## # Groups:   src_subject_id [110]\n##    src_subject_id session_id param_task_name param_run_num\n##             <int>      <int> <chr>                   <int>\n##  1              2          1 pain                        1\n##  2              2          1 pain                        1\n##  3              2          1 pain                        1\n##  4              2          1 pain                        1\n##  5              2          1 pain                        1\n##  6              2          1 pain                        1\n##  7              2          1 pain                        1\n##  8              2          1 pain                        1\n##  9              2          1 pain                        1\n## 10              2          1 pain                        1\n## # ℹ 5,841 more rows\n## # ℹ 56 more variables: param_counterbalance_ver <int>,\n## #   param_counterbalance_block_num <int>, param_cue_type <chr>,\n## #   param_stimulus_type <chr>, param_cond_type <int>,\n## #   param_trigger_onset <dbl>, param_start_biopac <dbl>, ITI_onset <dbl>,\n## #   ITI_biopac <dbl>, ITI_duration <dbl>, event01_cue_onset <dbl>,\n## #   event01_cue_biopac <dbl>, event01_cue_type <chr>, …## Warning: Unknown or uninitialised column: `cue_name`.## Warning: Unknown or uninitialised column: `stim_name`.## Automatically converting the following non-factors to factors: rating_type, trial_index## Warning in qt(conf.interval/2 + 0.5, datac$N - 1): NaNs produced## Warning in qt(conf.interval/2 + 0.5, datac$N - 1): NaNs produced## Warning: Removed 1 rows containing missing values (`geom_point()`)."},{"path":"jepma.html","id":"vicarious-3","chapter":"6 beh :: expect-outcome ~ cue * trial","heading":"6.6 vicarious","text":"","code":"## # A tibble: 5,851 × 60\n## # Groups:   src_subject_id [110]\n##    src_subject_id session_id param_task_name param_run_num\n##             <int>      <int> <chr>                   <int>\n##  1              2          1 pain                        1\n##  2              2          1 pain                        1\n##  3              2          1 pain                        1\n##  4              2          1 pain                        1\n##  5              2          1 pain                        1\n##  6              2          1 pain                        1\n##  7              2          1 pain                        1\n##  8              2          1 pain                        1\n##  9              2          1 pain                        1\n## 10              2          1 pain                        1\n## # ℹ 5,841 more rows\n## # ℹ 56 more variables: param_counterbalance_ver <int>,\n## #   param_counterbalance_block_num <int>, param_cue_type <chr>,\n## #   param_stimulus_type <chr>, param_cond_type <int>,\n## #   param_trigger_onset <dbl>, param_start_biopac <dbl>, ITI_onset <dbl>,\n## #   ITI_biopac <dbl>, ITI_duration <dbl>, event01_cue_onset <dbl>,\n## #   event01_cue_biopac <dbl>, event01_cue_type <chr>, …## Warning: Unknown or uninitialised column: `cue_name`.## Warning: Unknown or uninitialised column: `stim_name`.## Automatically converting the following non-factors to factors: rating_type, trial_index## Warning in qt(conf.interval/2 + 0.5, datac$N - 1): NaNs produced## Warning in qt(conf.interval/2 + 0.5, datac$N - 1): NaNs produced## Warning: Removed 1 rows containing missing values (`geom_point()`)."},{"path":"jepma.html","id":"cognitive-3","chapter":"6 beh :: expect-outcome ~ cue * trial","heading":"6.7 cognitive","text":"","code":"## # A tibble: 5,851 × 60\n## # Groups:   src_subject_id [110]\n##    src_subject_id session_id param_task_name param_run_num\n##             <int>      <int> <chr>                   <int>\n##  1              2          1 pain                        1\n##  2              2          1 pain                        1\n##  3              2          1 pain                        1\n##  4              2          1 pain                        1\n##  5              2          1 pain                        1\n##  6              2          1 pain                        1\n##  7              2          1 pain                        1\n##  8              2          1 pain                        1\n##  9              2          1 pain                        1\n## 10              2          1 pain                        1\n## # ℹ 5,841 more rows\n## # ℹ 56 more variables: param_counterbalance_ver <int>,\n## #   param_counterbalance_block_num <int>, param_cue_type <chr>,\n## #   param_stimulus_type <chr>, param_cond_type <int>,\n## #   param_trigger_onset <dbl>, param_start_biopac <dbl>, ITI_onset <dbl>,\n## #   ITI_biopac <dbl>, ITI_duration <dbl>, event01_cue_onset <dbl>,\n## #   event01_cue_biopac <dbl>, event01_cue_type <chr>, …## Warning: Unknown or uninitialised column: `cue_name`.## Warning: Unknown or uninitialised column: `stim_name`.## Automatically converting the following non-factors to factors: rating_type, trial_index## Warning in qt(conf.interval/2 + 0.5, datac$N - 1): NaNs produced## Warning in qt(conf.interval/2 + 0.5, datac$N - 1): NaNs produced## Warning: Removed 1 rows containing missing values (`geom_point()`)."},{"path":"jepma.html","id":"within-subject-vicarious","chapter":"6 beh :: expect-outcome ~ cue * trial","heading":"6.8 within subject vicarious","text":"","code":"## Warning: Unknown or uninitialised column: `cue_name`.## Warning: Unknown or uninitialised column: `stim_name`.## Automatically converting the following non-factors to factors: trial_index, rating_type## Warning in qt(conf.interval/2 + 0.5, datac$N - 1): NaNs produced## Warning in qt(conf.interval/2 + 0.5, datac$N - 1): NaNs produced## Warning in geom_point(data = trialorder_groupwise_p2, aes(shape =\n## as.character(rating_type), : Ignoring unknown aesthetics: linetype## `geom_smooth()` using formula = 'y ~ x'"},{"path":"jepma.html","id":"tor-request-only-outcome-ratings.-3-tasks","chapter":"6 beh :: expect-outcome ~ cue * trial","heading":"6.9 Tor request – only outcome ratings. 3 tasks","text":"","code":""},{"path":"jepma.html","id":"pain-3","chapter":"6 beh :: expect-outcome ~ cue * trial","heading":"6.9.1 pain","text":"","code":"## Warning: Unknown or uninitialised column: `cue_name`.## Warning: Unknown or uninitialised column: `stim_name`.## Automatically converting the following non-factors to factors: trial_index## Warning in qt(conf.interval/2 + 0.5, datac$N - 1): NaNs produced## Warning in qt(conf.interval/2 + 0.5, datac$N - 1): NaNs produced## `geom_smooth()` using formula = 'y ~ x'"},{"path":"jepma.html","id":"vicarious-4","chapter":"6 beh :: expect-outcome ~ cue * trial","heading":"6.9.2 vicarious","text":"","code":"## Warning: Unknown or uninitialised column: `cue_name`.## Warning: Unknown or uninitialised column: `stim_name`.## Automatically converting the following non-factors to factors: trial_index## Warning in qt(conf.interval/2 + 0.5, datac$N - 1): NaNs produced## Warning in qt(conf.interval/2 + 0.5, datac$N - 1): NaNs produced## `geom_smooth()` using formula = 'y ~ x'"},{"path":"jepma.html","id":"cognitive-4","chapter":"6 beh :: expect-outcome ~ cue * trial","heading":"6.9.3 cognitive","text":"","code":"## Warning: Unknown or uninitialised column: `cue_name`.## Warning: Unknown or uninitialised column: `stim_name`.## Automatically converting the following non-factors to factors: trial_index## Warning in qt(conf.interval/2 + 0.5, datac$N - 1): NaNs produced## Warning in qt(conf.interval/2 + 0.5, datac$N - 1): NaNs produced## `geom_smooth()` using formula = 'y ~ x'"},{"path":"jepma.html","id":"tor-request-only-expect-ratings.-3-tasks","chapter":"6 beh :: expect-outcome ~ cue * trial","heading":"6.10 Tor request – only expect ratings. 3 tasks","text":"","code":""},{"path":"jepma.html","id":"pain-4","chapter":"6 beh :: expect-outcome ~ cue * trial","heading":"6.10.1 pain","text":"","code":"## Linear mixed model fit by REML. t-tests use Satterthwaite's method [\n## lmerModLmerTest]\n## Formula: \n## event04_actual_angle ~ trial_index * param_cue_type + (param_cue_type |  \n##     src_subject_id)\n##    Data: df_clean\n## \n## REML criterion at convergence: 51815.3\n## \n## Scaled residuals: \n##     Min      1Q  Median      3Q     Max \n## -4.1391 -0.6157  0.0088  0.6196  4.0913 \n## \n## Random effects:\n##  Groups         Name                  Variance Std.Dev. Corr \n##  src_subject_id (Intercept)           860.95   29.342        \n##                 param_cue_typelow_cue  41.77    6.463   -0.11\n##  Residual                             582.58   24.137        \n## Number of obs: 5571, groups:  src_subject_id, 110\n## \n## Fixed effects:\n##                                     Estimate Std. Error         df t value\n## (Intercept)                         74.58379    2.94621  125.10816  25.315\n## trial_index                         -0.14818    0.02397 5358.25599  -6.183\n## param_cue_typelow_cue              -10.07630    1.42124  568.67767  -7.090\n## trial_index:param_cue_typelow_cue    0.05386    0.03307 4679.39277   1.629\n##                                   Pr(>|t|)    \n## (Intercept)                        < 2e-16 ***\n## trial_index                       6.76e-10 ***\n## param_cue_typelow_cue             4.00e-12 ***\n## trial_index:param_cue_typelow_cue    0.103    \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Correlation of Fixed Effects:\n##             (Intr) trl_nd prm___\n## trial_index -0.258              \n## prm_c_typl_ -0.241  0.524       \n## trl_ndx:___  0.184 -0.688 -0.765## Type III Analysis of Variance Table with Satterthwaite's method\n##                             Sum Sq Mean Sq NumDF  DenDF F value    Pr(>F)    \n## trial_index                28321.1 28321.1     1 5407.0 48.6134 3.490e-12 ***\n## param_cue_type             29283.6 29283.6     1  568.7 50.2655 3.999e-12 ***\n## trial_index:param_cue_type  1545.4  1545.4     1 4679.4  2.6527    0.1034    \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1## Warning: Unknown or uninitialised column: `cue_name`.## Warning: Unknown or uninitialised column: `stim_name`.## Automatically converting the following non-factors to factors: trial_index## Warning in qt(conf.interval/2 + 0.5, datac$N - 1): NaNs produced## Warning in qt(conf.interval/2 + 0.5, datac$N - 1): NaNs produced## `geom_smooth()` using formula = 'y ~ x'"},{"path":"jepma.html","id":"vicarious-5","chapter":"6 beh :: expect-outcome ~ cue * trial","heading":"6.10.2 vicarious","text":"","code":"## Linear mixed model fit by REML. t-tests use Satterthwaite's method [\n## lmerModLmerTest]\n## Formula: \n## event04_actual_angle ~ trial_index * param_cue_type + (param_cue_type |  \n##     src_subject_id)\n##    Data: df_clean\n## \n## REML criterion at convergence: 54872.6\n## \n## Scaled residuals: \n##     Min      1Q  Median      3Q     Max \n## -2.8647 -0.6683 -0.2164  0.4658  5.5008 \n## \n## Random effects:\n##  Groups         Name                  Variance Std.Dev. Corr \n##  src_subject_id (Intercept)           132.485  11.510        \n##                 param_cue_typelow_cue   4.966   2.229   -0.89\n##  Residual                             578.849  24.059        \n## Number of obs: 5936, groups:  src_subject_id, 110\n## \n## Fixed effects:\n##                                     Estimate Std. Error         df t value\n## (Intercept)                         26.04180    1.42259  222.10012  18.306\n## trial_index                          0.14033    0.02205 5791.42518   6.363\n## param_cue_typelow_cue              -10.93655    1.27427 1283.22709  -8.583\n## trial_index:param_cue_typelow_cue    0.08509    0.03037 5513.06146   2.802\n##                                   Pr(>|t|)    \n## (Intercept)                        < 2e-16 ***\n## trial_index                       2.13e-10 ***\n## param_cue_typelow_cue              < 2e-16 ***\n## trial_index:param_cue_typelow_cue  0.00509 ** \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Correlation of Fixed Effects:\n##             (Intr) trl_nd prm___\n## trial_index -0.543              \n## prm_c_typl_ -0.556  0.594       \n## trl_ndx:___  0.387 -0.697 -0.854## Type III Analysis of Variance Table with Satterthwaite's method\n##                            Sum Sq Mean Sq NumDF  DenDF  F value    Pr(>F)    \n## trial_index                 77430   77430     1 5869.4 133.7658 < 2.2e-16 ***\n## param_cue_type              42638   42638     1 1283.2  73.6606 < 2.2e-16 ***\n## trial_index:param_cue_type   4546    4546     1 5513.1   7.8532  0.005091 ** \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1## Warning: Unknown or uninitialised column: `cue_name`.## Warning: Unknown or uninitialised column: `stim_name`.## Automatically converting the following non-factors to factors: trial_index## Warning in qt(conf.interval/2 + 0.5, datac$N - 1): NaNs produced## Warning in qt(conf.interval/2 + 0.5, datac$N - 1): NaNs produced## `geom_smooth()` using formula = 'y ~ x'"},{"path":"jepma.html","id":"cognitive-5","chapter":"6 beh :: expect-outcome ~ cue * trial","heading":"6.10.3 cognitive","text":"","code":"## Linear mixed model fit by REML. t-tests use Satterthwaite's method [\n## lmerModLmerTest]\n## Formula: \n## event04_actual_angle ~ trial_index * param_cue_type + (param_cue_type |  \n##     src_subject_id)\n##    Data: df_clean\n## \n## REML criterion at convergence: 52049.3\n## \n## Scaled residuals: \n##     Min      1Q  Median      3Q     Max \n## -4.1640 -0.6201 -0.1508  0.4678  6.3870 \n## \n## Random effects:\n##  Groups         Name                  Variance Std.Dev. Corr \n##  src_subject_id (Intercept)           197.53   14.054        \n##                 param_cue_typelow_cue  26.61    5.158   -0.54\n##  Residual                             369.48   19.222        \n## Number of obs: 5901, groups:  src_subject_id, 110\n## \n## Fixed effects:\n##                                     Estimate Std. Error         df t value\n## (Intercept)                         34.74794    1.52822  156.81597  22.737\n## trial_index                         -0.06251    0.01795 5781.38971  -3.482\n## param_cue_typelow_cue              -10.41305    1.13179  632.34807  -9.201\n## trial_index:param_cue_typelow_cue    0.06544    0.02468 5538.06618   2.651\n##                                   Pr(>|t|)    \n## (Intercept)                        < 2e-16 ***\n## trial_index                       0.000502 ***\n## param_cue_typelow_cue              < 2e-16 ***\n## trial_index:param_cue_typelow_cue 0.008037 ** \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Correlation of Fixed Effects:\n##             (Intr) trl_nd prm___\n## trial_index -0.411              \n## prm_c_typl_ -0.514  0.547       \n## trl_ndx:___  0.296 -0.705 -0.776## Type III Analysis of Variance Table with Satterthwaite's method\n##                             Sum Sq Mean Sq NumDF  DenDF F value    Pr(>F)    \n## trial_index                 2020.5  2020.5     1 5783.0  5.4686  0.019395 *  \n## param_cue_type             31276.3 31276.3     1  632.3 84.6500 < 2.2e-16 ***\n## trial_index:param_cue_type  2597.6  2597.6     1 5538.1  7.0304  0.008037 ** \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1## Warning: Unknown or uninitialised column: `cue_name`.## Warning: Unknown or uninitialised column: `stim_name`.## Automatically converting the following non-factors to factors: trial_index## Warning in qt(conf.interval/2 + 0.5, datac$N - 1): NaNs produced## Warning in qt(conf.interval/2 + 0.5, datac$N - 1): NaNs produced## `geom_smooth()` using formula = 'y ~ x'"},{"path":"jepma.html","id":"lmer","chapter":"6 beh :: expect-outcome ~ cue * trial","heading":"6.11 lmer","text":"","code":"## Linear mixed model fit by REML. t-tests use Satterthwaite's method [\n## lmerModLmerTest]\n## Formula: \n## event04_actual_angle ~ trial_index * param_cue_type + (param_cue_type |  \n##     src_subject_id)\n##    Data: df_clean\n## \n## REML criterion at convergence: 52049.3\n## \n## Scaled residuals: \n##     Min      1Q  Median      3Q     Max \n## -4.1640 -0.6201 -0.1508  0.4678  6.3870 \n## \n## Random effects:\n##  Groups         Name                  Variance Std.Dev. Corr \n##  src_subject_id (Intercept)           197.53   14.054        \n##                 param_cue_typelow_cue  26.61    5.158   -0.54\n##  Residual                             369.48   19.222        \n## Number of obs: 5901, groups:  src_subject_id, 110\n## \n## Fixed effects:\n##                                     Estimate Std. Error         df t value\n## (Intercept)                         34.74794    1.52822  156.81597  22.737\n## trial_index                         -0.06251    0.01795 5781.38971  -3.482\n## param_cue_typelow_cue              -10.41305    1.13179  632.34807  -9.201\n## trial_index:param_cue_typelow_cue    0.06544    0.02468 5538.06618   2.651\n##                                   Pr(>|t|)    \n## (Intercept)                        < 2e-16 ***\n## trial_index                       0.000502 ***\n## param_cue_typelow_cue              < 2e-16 ***\n## trial_index:param_cue_typelow_cue 0.008037 ** \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Correlation of Fixed Effects:\n##             (Intr) trl_nd prm___\n## trial_index -0.411              \n## prm_c_typl_ -0.514  0.547       \n## trl_ndx:___  0.296 -0.705 -0.776## Type III Analysis of Variance Table with Satterthwaite's method\n##                             Sum Sq Mean Sq NumDF  DenDF F value    Pr(>F)    \n## trial_index                 2020.5  2020.5     1 5783.0  5.4686  0.019395 *  \n## param_cue_type             31276.3 31276.3     1  632.3 84.6500 < 2.2e-16 ***\n## trial_index:param_cue_type  2597.6  2597.6     1 5538.1  7.0304  0.008037 ** \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"jepma.html","id":"lmer-histogram","chapter":"6 beh :: expect-outcome ~ cue * trial","heading":"6.11.1 lmer histogram","text":"","code":"\nhist(random_slopes)\ndf <- data.frame(sub = group_ids, cue_randomslope = random_slopes)\nwrite.csv(df, file.path(main_dir,\"data\",\"RL\", \"cue_trial_ranef_{taskname}.csv\"), row.names = FALSE)\n# TODO: create a json file that also keeps track of which participants are include hree, using what model\n# comment"},{"path":"jepma.html","id":"do-current-expectation-ratings-predict-outcome-ratings","chapter":"6 beh :: expect-outcome ~ cue * trial","heading":"6.12 Do current expectation ratings predict outcome ratings?","text":"","code":""},{"path":"jepma.html","id":"additional-analyse-01182023","chapter":"6 beh :: expect-outcome ~ cue * trial","heading":"Additional analyse 01/18/2023","text":"see current expectation ratings predict outcome ratingssee prior stimulus experience (N-1) predicts current expectation ratingssee current expectation ratings explained function prior outcome rating current expectation ratingwhen loading dataset, need add trial index per dataframe.\n, shift rating?","code":"\ndata_a3 <- data_p2 %>%\n  group_by(src_subject_id, session_id, param_run_num) %>%\n  mutate(trial_index = row_number(param_run_num))\n\ndata_a3lag <-\n    data_a3 %>%\n    group_by(src_subject_id, session_id, param_run_num) %>%\n    mutate(lag.04outcomeangle = dplyr::lag(event04_actual_angle, n = 1, default = NA))\ndata_a3lag_omit <- data_a3lag[complete.cases(data_a3lag$lag.04outcomeangle),]\n    trialorder_subjectwise_lagoutcome <- meanSummary(\n        data_a3lag_omit,\n        c(\"src_subject_id\", \"session_id\", \"param_run_num\"), \"lag.04outcomeangle\" )\n    trialorder_subjectwise_lagoutcome <- meanSummary(\n        data_a3lag_omit,\n        c(\"src_subject_id\", \"session_id\", \"param_run_num\"), \"lag.04outcomeangle\" )\n\n    # subjectwise_naomit <- na.omit(trialorder_subjectwise)\n    # trialorder_groupwise <- summarySEwithin(\n    #     data = subjectwise_naomit,\n    #     measurevar = \"mean_per_sub\",\n    #     withinvars = c(\"cue_ordered\", \"rating_type\",  \"trial_index\"), idvar = subject\n    # )\nmodel.lagoutcome = lmer(event02_expect_angle ~ lag.04outcomeangle + (1 | src_subject_id) + (1|session_id) , data = data_a3lag_omit)\nsummary(model.lagoutcome)## Linear mixed model fit by REML. t-tests use Satterthwaite's method [\n## lmerModLmerTest]\n## Formula: event02_expect_angle ~ lag.04outcomeangle + (1 | src_subject_id) +  \n##     (1 | session_id)\n##    Data: data_a3lag_omit\n## \n## REML criterion at convergence: 49728.1\n## \n## Scaled residuals: \n##     Min      1Q  Median      3Q     Max \n## -2.8551 -0.7402 -0.1322  0.6351  6.3909 \n## \n## Random effects:\n##  Groups         Name        Variance Std.Dev.\n##  src_subject_id (Intercept) 121.4858 11.0221 \n##  session_id     (Intercept)   0.2696  0.5192 \n##  Residual                   531.1376 23.0464 \n## Number of obs: 5427, groups:  src_subject_id, 110; session_id, 3\n## \n## Fixed effects:\n##                     Estimate Std. Error        df t value Pr(>|t|)    \n## (Intercept)        2.873e+01  1.230e+00 6.852e+01   23.36   <2e-16 ***\n## lag.04outcomeangle 1.780e-01  1.562e-02 5.374e+03   11.40   <2e-16 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Correlation of Fixed Effects:\n##             (Intr)\n## lg.04tcmngl -0.365\nmeanSummary_2dv <- function(DATA, GROUP, DV1, DV2) {\n    z <- ddply(DATA, GROUP, .fun = function(xx) {\n        c(\n            DV1_mean_per_sub = mean(xx[, DV1], na.rm = TRUE),\n            DV1_sd = sd(xx[, DV1], na.rm = TRUE),\n            DV2_mean_per_sub = mean(xx[, DV2], na.rm = TRUE),\n            DV2_sd = sd(xx[, DV1], na.rm = TRUE)\n        )\n    })\n    return(z)\n}\nsubjectwise_2dv = meanSummary_2dv(data_a3lag_omit,\n        c(\"src_subject_id\", \"trial_index\"),\n        \"lag.04outcomeangle\", \"event02_expect_angle\")\nsubjectwise_naomit_2dv <- na.omit(subjectwise_2dv)\nsp <- ggplot(data=subjectwise_naomit_2dv,\n             aes(x=DV1_mean_per_sub, y=DV2_mean_per_sub)) +\n  geom_point() +\n  geom_abline(intercept = 0, slope = 1, color=\"green\",\n                 linetype=\"dashed\", size=0.5) +\n  theme(aspect.ratio=1) +\n  xlab(\"n-1 outcome rating\") +\n  ylab(\"n expectation rating\")\nsp\n# plot(subjectwise_naomit_2dv$DV1_mean_per_sub, subjectwise_naomit_2dv$DV2_mean_per_sub) + lines(x = c(0,200), y = c(0,200))\n    trialorder_groupwise <- summarySEwithin(\n        data = subjectwise_naomit_2dv,\n        measurevar = \"DV1_mean_per_sub\",\n        # betweenvars = \"src_subject_id\",\n        withinvars = factor( \"trial_index\"),\n         idvar = \"src_subject_id\"\n    )## Automatically converting the following non-factors to factors: src_subject_id\n    trialorder_groupwise <- summarySEwithin(\n        data = subset(subjectwise_naomit_2dv, select = -c(src_subject_id)),\n        measurevar = \"DV1_mean_per_sub\",\n        # betweenvars = \"src_subject_id\",\n        withinvars = as.factor( \"trial_index\")\n         #idvar = \"trial_index\"\n    )## Automatically converting the following non-factors to factors: trial_index\ndata_a3lag_omit$src_subject_id <- as.factor(data_a3lag_omit$src_subject_id)\n\nlag.raw <- ggplot(aes(x=lag.04outcomeangle, y=event02_expect_angle), data=data_a3lag_omit) +\n  geom_smooth(method='lm', se=F, size=0.75) +\n  geom_point(size=0.1) +\n    geom_abline(intercept = 0, slope = 1, color=\"green\",\n                 linetype=\"dashed\", size=0.5) +\n  facet_wrap(~src_subject_id) +\n  theme(legend.position='none') +\n  xlim(0,180) + ylim(0,180) +\n  xlab(\"raw data from each participant: n-1 lagged outcome angle\") +\n  ylab(\"n current expectation rating\")\nlag.raw +\n  labs(title = paste(taskname, \"- Is there a linear relationship between current expectation ratings and the previous outcome ratings?\"),\n       subtitle = \"Plotting the raw data - with all of the datapoints ignoring run differences\",\n       caption = \"Blue = fitted linear slope per participant; Green: 1:1 slope\")## `geom_smooth()` using formula = 'y ~ x'## Warning: Removed 276 rows containing non-finite values (`stat_smooth()`).## Warning: Removed 276 rows containing missing values (`geom_point()`).\nsubjectwise_naomit_2dv$src_subject_id <- as.factor(subjectwise_naomit_2dv$src_subject_id)\n\nlag.avg <- ggplot(aes(x=DV1_mean_per_sub, y=DV2_mean_per_sub), data=subjectwise_naomit_2dv) +\n  geom_smooth(method='lm', se=F, size=0.75) +\n  geom_point(size=0.1) +\n    geom_abline(intercept = 0, slope = 1, color=\"green\",\n                 linetype=\"dashed\", size=0.5) +\n  facet_wrap(~src_subject_id) +\n  theme(legend.position='none') +\n  xlim(0,180) + ylim(0,180) +\n  xlab(\"raw data from each participant: n-1 lagged outcome angle\") +\n  ylab(\"n current expectation rating\")\n\nlag.avg +\n  labs(title = paste(taskname, \"- Is there a linear relationship between current expectation ratings and the previous outcome ratings?\"),\n       subtitle = \"Observation notes: 1) The relationship is more of an attenuated one, where the higher outcome ratings lead to a slightly lower expectation rating, and a low outcome leads to a higher expectation rating, when considering a 1:1 relationship. This pattern could be explained by regression to the mean type mechanism, where participants are accounting for the fact that their previous experience was extreme on either ends and that this current trial will be under/over estimated. It probably will make sense to also see the relationship between current expectation ratings influencing current outcome ratings. \",\n       caption = \"Blue = fitted linear slope per participant; Green: 1:1 slope\")## `geom_smooth()` using formula = 'y ~ x'\n# https://gist.github.com/even4void/5074855\nggplot(data_a3lag_omit, aes(y = event02_expect_angle,\n                       x = lag.04outcomeangle,\n                       colour = subject), size = .3, color = 'gray') +\n  geom_point(size = .1) +\n  geom_smooth(method = 'lm', formula= y ~ x, se = FALSE, size = .3) +\n  theme_bw()## Warning: Removed 276 rows containing non-finite values (`stat_smooth()`).## Warning: Removed 276 rows containing missing values (`geom_point()`)."},{"path":"jepma.html","id":"additional-analysis","chapter":"6 beh :: expect-outcome ~ cue * trial","heading":"6.13 Additional analysis","text":"01/23/2023","code":"\nmodel.lag_cue = lmer(event02_expect_angle ~ lag.04outcomeangle*param_cue_type + (1 | src_subject_id) + (1|session_id) , data = data_a3lag_omit)\nsummary(model.lag_cue)## Linear mixed model fit by REML. t-tests use Satterthwaite's method [\n## lmerModLmerTest]\n## Formula: event02_expect_angle ~ lag.04outcomeangle * param_cue_type +  \n##     (1 | src_subject_id) + (1 | session_id)\n##    Data: data_a3lag_omit\n## \n## REML criterion at convergence: 46175.7\n## \n## Scaled residuals: \n##     Min      1Q  Median      3Q     Max \n## -4.3458 -0.6383 -0.0833  0.5246  9.8300 \n## \n## Random effects:\n##  Groups         Name        Variance  Std.Dev.\n##  src_subject_id (Intercept) 128.73691 11.3462 \n##  session_id     (Intercept)   0.03408  0.1846 \n##  Residual                   272.07427 16.4947 \n## Number of obs: 5427, groups:  src_subject_id, 110; session_id, 3\n## \n## Fixed effects:\n##                                            Estimate Std. Error         df\n## (Intercept)                                42.76857    1.21398  129.42606\n## lag.04outcomeangle                          0.23730    0.01465 5394.92176\n## param_cue_typelow_cue                     -27.33964    0.71898 5316.67781\n## lag.04outcomeangle:param_cue_typelow_cue   -0.15072    0.01922 5309.65154\n##                                          t value Pr(>|t|)    \n## (Intercept)                               35.230  < 2e-16 ***\n## lag.04outcomeangle                        16.197  < 2e-16 ***\n## param_cue_typelow_cue                    -38.026  < 2e-16 ***\n## lag.04outcomeangle:param_cue_typelow_cue  -7.842  5.3e-15 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Correlation of Fixed Effects:\n##             (Intr) lg.04t prm___\n## lg.04tcmngl -0.350              \n## prm_c_typl_ -0.293  0.500       \n## lg.04tc:___  0.227 -0.639 -0.781\nmeanSummary_2dv <- function(DATA, GROUP, DV1, DV2) {\n    z <- ddply(DATA, GROUP, .fun = function(xx) {\n        c(\n            DV1_mean_per_sub = mean(xx[, DV1], na.rm = TRUE),\n            DV1_sd = sd(xx[, DV1], na.rm = TRUE),\n            DV2_mean_per_sub = mean(xx[, DV2], na.rm = TRUE),\n            DV2_sd = sd(xx[, DV1], na.rm = TRUE)\n        )\n    })\n    return(z)\n}\nsubjectwise_cuetype = meanSummary_2dv(data_a3lag_omit,\n        c(\"src_subject_id\", \"trial_index\", \"param_cue_type\"),\n        \"lag.04outcomeangle\", \"event02_expect_angle\")\n# subjectwise_cuetype_2dv <- na.omit(subjectwise_cuetype)\nsubjectwise_cuetype$param_cue_type <- as.factor(subjectwise_cuetype$param_cue_type)\nsp <- ggplot(data=subjectwise_cuetype,\n             aes(x=DV1_mean_per_sub, y=DV2_mean_per_sub,\n             color = param_cue_type)) +\n  geom_point() +\n  geom_abline(intercept = 0, slope = 1, color=\"green\",\n                 linetype=\"dashed\", size=0.5) +\n  geom_smooth(method = 'lm') +\n  theme(aspect.ratio=1) +\n  xlab(\"n-1 outcome rating\") +\n  ylab(\"n expectation rating\")\nsp +\n    labs(title = paste(taskname, \"- Does the linear relationship between current expectation ratings and the previous outcome ratings differ as a function of cue?\"),\n       subtitle = \"Plotting the raw data - with all of the datapoints averaged across runs per 12 trials\",\n       caption = \"high cue vs low cue. The slope is significant, theree is not interaction; Green: 1:1 slope\")## `geom_smooth()` using formula = 'y ~ x'## Warning: Removed 49 rows containing non-finite values (`stat_smooth()`).## Warning: Removed 49 rows containing missing values (`geom_point()`).\n# plot(subjectwise_naomit_2dv$DV1_mean_per_sub, subjectwise_naomit_2dv$DV2_mean_per_sub) + lines(x = c(0,200), y = c(0,200))"},{"path":"demean-per-sub-n1.html","id":"demean-per-sub-n1","chapter":"7 beh :: outcome_demean ~ cue * stim * expect * n-1outcome","heading":"7 beh :: outcome_demean ~ cue * stim * expect * n-1outcome","text":"","code":""},{"path":"demean-per-sub-n1.html","id":"what-is-the-purpose-of-this-notebook-4","chapter":"7 beh :: outcome_demean ~ cue * stim * expect * n-1outcome","heading":"What is the purpose of this notebook?","text":", model outcome ratings function cue, stimulus intensity, expectation ratings, N-1 outcome rating.opposed notebook 14, demean ratings within participantsAs opposed notebook 14, demean ratings within participantsIn words, calculate average within subjects subtract ratingsIn words, calculate average within subjects subtract ratingsMain model: lmer(outcome_rating ~ cue * stim * expectation rating + N-1 outcomerating)Main model: lmer(outcome_rating ~ cue * stim * expectation rating + N-1 outcomerating)Main question: constitutes reported outcome rating?Main question: constitutes reported outcome rating?Sub questions:\nlinear relationship expectation rating outcome rating, differ function cue?\nN-1 outcome rating affect current expectation ratings?\nLater, effect different across tasks similar?\nSub questions:linear relationship expectation rating outcome rating, differ function cue?N-1 outcome rating affect current expectation ratings?Later, effect different across tasks similar?IV:\nstim (high / med / low)\ncue (high / low)\nexpectation rating (continuous)\nN-1 outcome rating (continuous)IV:\nstim (high / med / low)\ncue (high / low)\nexpectation rating (continuous)\nN-1 outcome rating (continuous)DV: outcome ratingDV: outcome rating","code":""},{"path":"demean-per-sub-n1.html","id":"todos","chapter":"7 beh :: outcome_demean ~ cue * stim * expect * n-1outcome","heading":"TODOs","text":"Standardized coefficientsSlope difference? Intercept difference? ( cue expectation rating)Correct range (within participant)\nhypothesis:Larger expectation leads prediction errorIndividual differences ratingsOutcome experience, based behavioral experience\nbrain maps associated component.load data combine participant data","code":"##  event02_expect_RT event04_actual_RT event02_expect_angle event04_actual_angle\n##  Min.   :0.6504    Min.   :0.0168    Min.   :  0.00       Min.   :  0.00      \n##  1st Qu.:1.6341    1st Qu.:1.9197    1st Qu.: 30.18       1st Qu.: 38.80      \n##  Median :2.0517    Median :2.3510    Median : 58.56       Median : 60.77      \n##  Mean   :2.1397    Mean   :2.4005    Mean   : 62.94       Mean   : 66.33      \n##  3rd Qu.:2.5678    3rd Qu.:2.8512    3rd Qu.: 90.00       3rd Qu.: 88.38      \n##  Max.   :3.9912    Max.   :3.9930    Max.   :180.00       Max.   :180.00      \n##  NA's   :661       NA's   :638       NA's   :661          NA's   :641"},{"path":"demean-per-sub-n1.html","id":"groupby-subject-and-average","chapter":"7 beh :: outcome_demean ~ cue * stim * expect * n-1outcome","heading":"7.0.1 groupby subject and average","text":"","code":""},{"path":"demean-per-sub-n1.html","id":"linear-model-0508","chapter":"7 beh :: outcome_demean ~ cue * stim * expect * n-1outcome","heading":"7.1 linear model 0508","text":"","code":"\n# model.factorize_demean = lmer(demean_outcome~ CUE_high_gt_low*stim_factor*demean_expect +EXPECT_cmc+ lag.demean_outcome+(1|src_subject_id), data = pvc)\n# summary(model.factorize_demean)\n\nmodel.factorize_demean = lmer(demean_outcome~ CUE_high_gt_low*stim_con_linear*demean_expect +\n                                CUE_high_gt_low*stim_con_quad*demean_expect +\n                                EXPECT_cmc + (1|src_subject_id), data = pvc)## fixed-effect model matrix is rank deficient so dropping 1 column / coefficient## boundary (singular) fit: see help('isSingular')\nsummary(model.factorize_demean)## Linear mixed model fit by REML. t-tests use Satterthwaite's method [\n## lmerModLmerTest]\n## Formula: demean_outcome ~ CUE_high_gt_low * stim_con_linear * demean_expect +  \n##     CUE_high_gt_low * stim_con_quad * demean_expect + EXPECT_cmc +  \n##     (1 | src_subject_id)\n##    Data: pvc\n## \n## REML criterion at convergence: 43246.4\n## \n## Scaled residuals: \n##     Min      1Q  Median      3Q     Max \n## -5.3122 -0.5823 -0.0037  0.5936  5.1434 \n## \n## Random effects:\n##  Groups         Name        Variance Std.Dev.\n##  src_subject_id (Intercept)   0.0     0.00   \n##  Residual                   370.8    19.26   \n## Number of obs: 4939, groups:  src_subject_id, 110\n## \n## Fixed effects:\n##                                                 Estimate Std. Error         df\n## (Intercept)                                   -7.897e-01  3.461e-01  4.927e+03\n## CUE_high_gt_low                               -3.686e+00  6.922e-01  4.927e+03\n## stim_con_linear                                3.010e+01  8.554e-01  4.927e+03\n## demean_expect                                  3.306e-01  1.219e-02  4.927e+03\n## stim_con_quad                                  2.020e+00  7.350e-01  4.927e+03\n## CUE_high_gt_low:stim_con_linear                1.066e+00  1.711e+00  4.927e+03\n## CUE_high_gt_low:demean_expect                 -4.084e-02  2.438e-02  4.927e+03\n## stim_con_linear:demean_expect                  1.195e-02  2.993e-02  4.927e+03\n## CUE_high_gt_low:stim_con_quad                 -3.891e+00  1.470e+00  4.927e+03\n## demean_expect:stim_con_quad                    3.232e-03  2.606e-02  4.927e+03\n## CUE_high_gt_low:stim_con_linear:demean_expect  2.105e-01  5.986e-02  4.927e+03\n## CUE_high_gt_low:demean_expect:stim_con_quad   -3.814e-02  5.212e-02  4.927e+03\n##                                               t value Pr(>|t|)    \n## (Intercept)                                    -2.281 0.022563 *  \n## CUE_high_gt_low                                -5.324 1.06e-07 ***\n## stim_con_linear                                35.190  < 2e-16 ***\n## demean_expect                                  27.118  < 2e-16 ***\n## stim_con_quad                                   2.748 0.006013 ** \n## CUE_high_gt_low:stim_con_linear                 0.623 0.533311    \n## CUE_high_gt_low:demean_expect                  -1.675 0.094003 .  \n## stim_con_linear:demean_expect                   0.399 0.689707    \n## CUE_high_gt_low:stim_con_quad                  -2.647 0.008141 ** \n## demean_expect:stim_con_quad                     0.124 0.901304    \n## CUE_high_gt_low:stim_con_linear:demean_expect   3.516 0.000442 ***\n## CUE_high_gt_low:demean_expect:stim_con_quad    -0.732 0.464328    \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Correlation of Fixed Effects:\n##                        (Intr) CUE_h__ stm_cn_l dmn_xp stm_cn_q\n## CUE_hgh_gt_             0.092                                 \n## stim_cn_lnr            -0.030 -0.028                          \n## demean_xpct            -0.100 -0.609   0.016                  \n## stim_con_qd            -0.026 -0.028   0.022    0.015         \n## CUE_hgh_gt_lw:stm_cn_l -0.028 -0.030   0.110    0.023  0.020  \n## CUE_hgh__:_            -0.609 -0.100   0.023    0.102  0.019  \n## stm_cn_ln:_             0.016  0.024  -0.109   -0.040 -0.012  \n## CUE_hgh_gt_lw:stm_cn_q -0.028 -0.026   0.020    0.019  0.074  \n## dmn_xpct:__             0.014  0.018  -0.011   -0.007 -0.091  \n## CUE___:__:_             0.024  0.016  -0.615   -0.001 -0.017  \n## CUE___:_:__             0.018  0.014  -0.017    0.001 -0.603  \n##                        CUE_hgh_gt_lw:stm_cn_l CUE_h__:_ st__:_\n## CUE_hgh_gt_                                                   \n## stim_cn_lnr                                                   \n## demean_xpct                                                   \n## stim_con_qd                                                   \n## CUE_hgh_gt_lw:stm_cn_l                                        \n## CUE_hgh__:_             0.016                                 \n## stm_cn_ln:_            -0.615                 -0.001          \n## CUE_hgh_gt_lw:stm_cn_q  0.022                  0.015    -0.017\n## dmn_xpct:__            -0.017                  0.001     0.028\n## CUE___:__:_            -0.109                 -0.040     0.101\n## CUE___:_:__            -0.011                 -0.007     0.001\n##                        CUE_hgh_gt_lw:stm_cn_q dm_:__ CUE___:__:\n## CUE_hgh_gt_                                                    \n## stim_cn_lnr                                                    \n## demean_xpct                                                    \n## stim_con_qd                                                    \n## CUE_hgh_gt_lw:stm_cn_l                                         \n## CUE_hgh__:_                                                    \n## stm_cn_ln:_                                                    \n## CUE_hgh_gt_lw:stm_cn_q                                         \n## dmn_xpct:__            -0.603                                  \n## CUE___:__:_            -0.012                  0.001           \n## CUE___:_:__            -0.091                  0.104  0.028    \n## fit warnings:\n## fixed-effect model matrix is rank deficient so dropping 1 column / coefficient\n## optimizer (nloptwrap) convergence code: 0 (OK)\n## boundary (singular) fit: see help('isSingular')"},{"path":"demean-per-sub-n1.html","id":"linear-model","chapter":"7 beh :: outcome_demean ~ cue * stim * expect * n-1outcome","heading":"7.2 linear model","text":"","code":"## Linear mixed model fit by REML. t-tests use Satterthwaite's method [\n## lmerModLmerTest]\n## Formula: demean_outcome ~ CUE_high_gt_low * stim_factor * demean_expect +  \n##     lag.demean_outcome + (1 | src_subject_id)\n##    Data: pvc\n## \n## REML criterion at convergence: 42884.2\n## \n## Scaled residuals: \n##     Min      1Q  Median      3Q     Max \n## -5.6746 -0.5825  0.0064  0.5976  5.5568 \n## \n## Random effects:\n##  Groups         Name        Variance Std.Dev.\n##  src_subject_id (Intercept)   0.0     0.00   \n##  Residual                   344.1    18.55   \n## Number of obs: 4939, groups:  src_subject_id, 110\n## \n## Fixed effects:\n##                                                     Estimate Std. Error\n## (Intercept)                                        1.359e+01  5.718e-01\n## CUE_high_gt_low                                    2.734e-01  1.149e+00\n## stim_factorlow_stim                               -3.049e+01  8.242e-01\n## stim_factormed_stim                               -1.279e+01  8.054e-01\n## demean_expect                                      2.713e-01  2.015e-02\n## lag.demean_outcome                                 2.177e-01  1.111e-02\n## CUE_high_gt_low:stim_factorlow_stim               -4.737e-01  1.648e+00\n## CUE_high_gt_low:stim_factormed_stim               -5.026e+00  1.611e+00\n## CUE_high_gt_low:demean_expect                      1.048e-01  3.980e-02\n## stim_factorlow_stim:demean_expect                 -1.928e-02  2.883e-02\n## stim_factormed_stim:demean_expect                 -1.078e-03  2.838e-02\n## CUE_high_gt_low:stim_factorlow_stim:demean_expect -2.491e-01  5.770e-02\n## CUE_high_gt_low:stim_factormed_stim:demean_expect -1.639e-01  5.677e-02\n##                                                           df t value Pr(>|t|)\n## (Intercept)                                        4.926e+03  23.761  < 2e-16\n## CUE_high_gt_low                                    4.926e+03   0.238  0.81188\n## stim_factorlow_stim                                4.926e+03 -36.993  < 2e-16\n## stim_factormed_stim                                4.926e+03 -15.879  < 2e-16\n## demean_expect                                      4.926e+03  13.461  < 2e-16\n## lag.demean_outcome                                 4.926e+03  19.585  < 2e-16\n## CUE_high_gt_low:stim_factorlow_stim                4.926e+03  -0.287  0.77384\n## CUE_high_gt_low:stim_factormed_stim                4.926e+03  -3.120  0.00182\n## CUE_high_gt_low:demean_expect                      4.926e+03   2.633  0.00849\n## stim_factorlow_stim:demean_expect                  4.926e+03  -0.669  0.50373\n## stim_factormed_stim:demean_expect                  4.926e+03  -0.038  0.96969\n## CUE_high_gt_low:stim_factorlow_stim:demean_expect  4.926e+03  -4.317 1.61e-05\n## CUE_high_gt_low:stim_factormed_stim:demean_expect  4.926e+03  -2.888  0.00390\n##                                                      \n## (Intercept)                                       ***\n## CUE_high_gt_low                                      \n## stim_factorlow_stim                               ***\n## stim_factormed_stim                               ***\n## demean_expect                                     ***\n## lag.demean_outcome                                ***\n## CUE_high_gt_low:stim_factorlow_stim                  \n## CUE_high_gt_low:stim_factormed_stim               ** \n## CUE_high_gt_low:demean_expect                     ** \n## stim_factorlow_stim:demean_expect                    \n## stim_factormed_stim:demean_expect                    \n## CUE_high_gt_low:stim_factorlow_stim:demean_expect ***\n## CUE_high_gt_low:stim_factormed_stim:demean_expect ** \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## optimizer (nloptwrap) convergence code: 0 (OK)\n## boundary (singular) fit: see help('isSingular')"},{"path":"demean-per-sub-n1.html","id":"q.-are-those-overestimating-for-high-cues-also-underestimators-for-low-cues","chapter":"7 beh :: outcome_demean ~ cue * stim * expect * n-1outcome","heading":"7.3 Q. Are those overestimating for high cues also underestimators for low cues?","text":"y axis: outcome rating\nx axis: high cuedistance 1:1 line\nUsing ODR, can test whether different cues lead different distances identity line","code":"## boundary (singular) fit: see help('isSingular')## Linear mixed model fit by REML. t-tests use Satterthwaite's method [\n## lmerModLmerTest]\n## Formula: \n## as.formula(reformulate(c(iv, sprintf(\"(%s|%s)\", iv, subject_keyword)),  \n##     response = dv))\n##    Data: df\n## \n## REML criterion at convergence: 42138.3\n## \n## Scaled residuals: \n##     Min      1Q  Median      3Q     Max \n## -3.0513 -0.6728 -0.1352  0.5460  6.0466 \n## \n## Random effects:\n##  Groups         Name        Variance Std.Dev. Corr\n##  src_subject_id (Intercept)  66.398   8.148       \n##                 cue_namelow   2.915   1.707   1.00\n##  Residual                   280.906  16.760       \n## Number of obs: 4939, groups:  src_subject_id, 110\n## \n## Fixed effects:\n##             Estimate Std. Error       df t value Pr(>|t|)    \n## (Intercept)  23.1557     0.8577 108.8675  26.998   <2e-16 ***\n## cue_namelow   0.7289     0.5052 478.1364   1.443     0.15    \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Correlation of Fixed Effects:\n##             (Intr)\n## cue_namelow 0.032 \n## optimizer (nloptwrap) convergence code: 0 (OK)\n## boundary (singular) fit: see help('isSingular')"},{"path":"demean-per-sub-n1.html","id":"todo-can-you-test-if-the-slopes-are-the-same-that-might-tell-us-something-about-whether-expectancies-translate-into-outcomes-with-the-same-efficacy-across-all-three-tasks.","chapter":"7 beh :: outcome_demean ~ cue * stim * expect * n-1outcome","heading":"7.4 TODO: Can you test if the slopes are the same? That might tell us something about whether, expectancies translate into outcomes with the same efficacy across all three tasks.","text":"","code":"## Linear mixed model fit by REML. t-tests use Satterthwaite's method [\n## lmerModLmerTest]\n## Formula: \n## as.formula(reformulate(c(iv, sprintf(\"(%s|%s)\", iv, subject_keyword)),  \n##     response = dv))\n##    Data: df\n## \n## REML criterion at convergence: 42138.3\n## \n## Scaled residuals: \n##     Min      1Q  Median      3Q     Max \n## -3.0513 -0.6728 -0.1352  0.5460  6.0466 \n## \n## Random effects:\n##  Groups         Name        Variance Std.Dev. Corr\n##  src_subject_id (Intercept)  66.398   8.148       \n##                 cue_namelow   2.915   1.707   1.00\n##  Residual                   280.906  16.760       \n## Number of obs: 4939, groups:  src_subject_id, 110\n## \n## Fixed effects:\n##             Estimate Std. Error       df t value Pr(>|t|)    \n## (Intercept)  23.1557     0.8577 108.8675  26.998   <2e-16 ***\n## cue_namelow   0.7289     0.5052 478.1364   1.443     0.15    \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Correlation of Fixed Effects:\n##             (Intr)\n## cue_namelow 0.032 \n## optimizer (nloptwrap) convergence code: 0 (OK)\n## boundary (singular) fit: see help('isSingular')## Warning in geom_line(data = subjectwise, aes(group = .data[[subject]], x =\n## as.numeric(as.factor(.data[[iv]])) - : Ignoring unknown aesthetics: fill## Warning: Removed 1 rows containing non-finite values (`stat_half_ydensity()`).## Warning: Removed 1 rows containing non-finite values (`stat_boxplot()`).## Warning: Removed 1 row containing missing values (`geom_line()`).## Warning: Removed 1 rows containing missing values (`geom_point()`).## Warning: Removed 1 rows containing non-finite values (`stat_half_ydensity()`).## Warning: Removed 1 rows containing non-finite values (`stat_boxplot()`).## Warning: Removed 1 row containing missing values (`geom_line()`).## Warning: Removed 1 rows containing missing values (`geom_point()`)."},{"path":"demean-per-sub-n1.html","id":"pain-run-collapsed-across-stimulus-intensity","chapter":"7 beh :: outcome_demean ~ cue * stim * expect * n-1outcome","heading":"7.5 pain run, collapsed across stimulus intensity","text":"","code":""},{"path":"demean-per-sub-n1.html","id":"vicarious-6","chapter":"7 beh :: outcome_demean ~ cue * stim * expect * n-1outcome","heading":"7.6 vicarious","text":"","code":"\nmodel.factorize_demean = lmer(demean_outcome~ CUE_high_gt_low*stim_con_linear*demean_expect +\n                                CUE_high_gt_low*stim_con_quad*demean_expect +\n                                EXPECT_cmc + (1|src_subject_id), data = pvc)## fixed-effect model matrix is rank deficient so dropping 1 column / coefficient## boundary (singular) fit: see help('isSingular')\nsummary(model.factorize_demean)## Linear mixed model fit by REML. t-tests use Satterthwaite's method [\n## lmerModLmerTest]\n## Formula: demean_outcome ~ CUE_high_gt_low * stim_con_linear * demean_expect +  \n##     CUE_high_gt_low * stim_con_quad * demean_expect + EXPECT_cmc +  \n##     (1 | src_subject_id)\n##    Data: pvc\n## \n## REML criterion at convergence: 45954.8\n## \n## Scaled residuals: \n##    Min     1Q Median     3Q    Max \n## -3.475 -0.602 -0.138  0.446  5.630 \n## \n## Random effects:\n##  Groups         Name        Variance Std.Dev.\n##  src_subject_id (Intercept)   0.0     0.00   \n##  Residual                   469.7    21.67   \n## Number of obs: 5111, groups:  src_subject_id, 110\n## \n## Fixed effects:\n##                                                 Estimate Std. Error         df\n## (Intercept)                                      0.21603    0.44918 5099.00000\n## CUE_high_gt_low                                  1.24687    0.89837 5099.00000\n## stim_con_linear                                 23.90084    1.10386 5099.00000\n## demean_expect                                    0.19711    0.01918 5099.00000\n## stim_con_quad                                   -4.72799    0.95934 5099.00000\n## CUE_high_gt_low:stim_con_linear                  6.38339    2.20771 5099.00000\n## CUE_high_gt_low:demean_expect                   -0.02451    0.03835 5099.00000\n## stim_con_linear:demean_expect                    0.03147    0.04753 5099.00000\n## CUE_high_gt_low:stim_con_quad                   -3.13553    1.91869 5099.00000\n## demean_expect:stim_con_quad                      0.01270    0.04060 5099.00000\n## CUE_high_gt_low:stim_con_linear:demean_expect    0.37387    0.09506 5099.00000\n## CUE_high_gt_low:demean_expect:stim_con_quad     -0.07222    0.08120 5099.00000\n##                                               t value Pr(>|t|)    \n## (Intercept)                                     0.481  0.63058    \n## CUE_high_gt_low                                 1.388  0.16522    \n## stim_con_linear                                21.652  < 2e-16 ***\n## demean_expect                                  10.278  < 2e-16 ***\n## stim_con_quad                                  -4.928 8.55e-07 ***\n## CUE_high_gt_low:stim_con_linear                 2.891  0.00385 ** \n## CUE_high_gt_low:demean_expect                  -0.639  0.52280    \n## stim_con_linear:demean_expect                   0.662  0.50793    \n## CUE_high_gt_low:stim_con_quad                  -1.634  0.10228    \n## demean_expect:stim_con_quad                     0.313  0.75449    \n## CUE_high_gt_low:stim_con_linear:demean_expect   3.933 8.50e-05 ***\n## CUE_high_gt_low:demean_expect:stim_con_quad    -0.889  0.37386    \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Correlation of Fixed Effects:\n##                        (Intr) CUE_h__ stm_cn_l dmn_xp stm_cn_q\n## CUE_hgh_gt_            -0.193                                 \n## stim_cn_lnr             0.007 -0.063                          \n## demean_xpct             0.258 -0.736   0.052                  \n## stim_con_qd            -0.009  0.026  -0.005   -0.009         \n## CUE_hgh_gt_lw:stm_cn_l -0.063  0.007  -0.210   -0.015  0.045  \n## CUE_hgh__:_            -0.736  0.258  -0.015   -0.336  0.019  \n## stm_cn_ln:_             0.052 -0.015   0.261    0.019 -0.037  \n## CUE_hgh_gt_lw:stm_cn_q  0.026 -0.009   0.045    0.019 -0.176  \n## dmn_xpct:__            -0.010  0.019  -0.037   -0.034  0.255  \n## CUE___:__:_            -0.015  0.052  -0.738   -0.023  0.011  \n## CUE___:_:__             0.019 -0.010   0.011   -0.034 -0.734  \n##                        CUE_hgh_gt_lw:stm_cn_l CUE_h__:_ st__:_\n## CUE_hgh_gt_                                                   \n## stim_cn_lnr                                                   \n## demean_xpct                                                   \n## stim_con_qd                                                   \n## CUE_hgh_gt_lw:stm_cn_l                                        \n## CUE_hgh__:_             0.052                                 \n## stm_cn_ln:_            -0.738                 -0.023          \n## CUE_hgh_gt_lw:stm_cn_q -0.005                 -0.009     0.011\n## dmn_xpct:__             0.011                 -0.034    -0.014\n## CUE___:__:_             0.261                  0.019    -0.305\n## CUE___:_:__            -0.037                 -0.034     0.017\n##                        CUE_hgh_gt_lw:stm_cn_q dm_:__ CUE___:__:\n## CUE_hgh_gt_                                                    \n## stim_cn_lnr                                                    \n## demean_xpct                                                    \n## stim_con_qd                                                    \n## CUE_hgh_gt_lw:stm_cn_l                                         \n## CUE_hgh__:_                                                    \n## stm_cn_ln:_                                                    \n## CUE_hgh_gt_lw:stm_cn_q                                         \n## dmn_xpct:__            -0.734                                  \n## CUE___:__:_            -0.037                  0.017           \n## CUE___:_:__             0.255                 -0.369 -0.014    \n## fit warnings:\n## fixed-effect model matrix is rank deficient so dropping 1 column / coefficient\n## optimizer (nloptwrap) convergence code: 0 (OK)\n## boundary (singular) fit: see help('isSingular')## Linear mixed model fit by REML. t-tests use Satterthwaite's method [\n## lmerModLmerTest]\n## Formula: \n## as.formula(reformulate(c(iv, sprintf(\"(%s|%s)\", iv, subject_keyword)),  \n##     response = dv))\n##    Data: df\n## \n## REML criterion at convergence: 42592.7\n## \n## Scaled residuals: \n##     Min      1Q  Median      3Q     Max \n## -2.8941 -0.6915 -0.1167  0.5386  5.2943 \n## \n## Random effects:\n##  Groups         Name        Variance  Std.Dev. Corr \n##  src_subject_id (Intercept) 4.520e+01  6.72295      \n##                 cue_namelow 9.234e-03  0.09609 -1.00\n##  Residual                   2.325e+02 15.24653      \n## Number of obs: 5111, groups:  src_subject_id, 110\n## \n## Fixed effects:\n##              Estimate Std. Error        df t value Pr(>|t|)    \n## (Intercept)   20.3562     0.7177  111.0539  28.364   <2e-16 ***\n## cue_namelow   -0.2391     0.4276 4783.4156  -0.559    0.576    \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Correlation of Fixed Effects:\n##             (Intr)\n## cue_namelow -0.319\n## optimizer (nloptwrap) convergence code: 0 (OK)\n## boundary (singular) fit: see help('isSingular')## Warning in geom_line(data = subjectwise, aes(group = .data[[subject]], x =\n## as.numeric(as.factor(.data[[iv]])) - : Ignoring unknown aesthetics: fill## Warning: Removed 1 rows containing non-finite values (`stat_half_ydensity()`).## Warning: Removed 1 rows containing non-finite values (`stat_boxplot()`).## Warning: Removed 1 row containing missing values (`geom_line()`).## Warning: Removed 1 rows containing missing values (`geom_point()`).## Warning: Removed 1 rows containing non-finite values (`stat_half_ydensity()`).## Warning: Removed 1 rows containing non-finite values (`stat_boxplot()`).## Warning: Removed 1 row containing missing values (`geom_line()`).## Warning: Removed 1 rows containing missing values (`geom_point()`)."},{"path":"demean-per-sub-n1.html","id":"cognitive-6","chapter":"7 beh :: outcome_demean ~ cue * stim * expect * n-1outcome","heading":"7.7 cognitive","text":"","code":""},{"path":"demean-per-sub-n1.html","id":"linear-model-0508-1","chapter":"7 beh :: outcome_demean ~ cue * stim * expect * n-1outcome","heading":"7.8 linear model 0508","text":"","code":"\n# model.factorize_demean = lmer(demean_outcome~ CUE_high_gt_low*stim_factor*demean_expect +EXPECT_cmc+ lag.demean_outcome+(1|src_subject_id), data = pvc)\n# summary(model.factorize_demean)\n\nmodel.factorize_demean = lmer(demean_outcome~ CUE_high_gt_low*stim_con_linear*demean_expect +\n                                CUE_high_gt_low*stim_con_quad*demean_expect +\n                                EXPECT_cmc + (1|src_subject_id), data = pvc)## fixed-effect model matrix is rank deficient so dropping 1 column / coefficient## boundary (singular) fit: see help('isSingular')\nsummary(model.factorize_demean)## Linear mixed model fit by REML. t-tests use Satterthwaite's method [\n## lmerModLmerTest]\n## Formula: demean_outcome ~ CUE_high_gt_low * stim_con_linear * demean_expect +  \n##     CUE_high_gt_low * stim_con_quad * demean_expect + EXPECT_cmc +  \n##     (1 | src_subject_id)\n##    Data: pvc\n## \n## REML criterion at convergence: 43807.3\n## \n## Scaled residuals: \n##     Min      1Q  Median      3Q     Max \n## -4.1272 -0.6113 -0.1388  0.4529  7.1545 \n## \n## Random effects:\n##  Groups         Name        Variance Std.Dev.\n##  src_subject_id (Intercept)   0.0     0.00   \n##  Residual                   347.4    18.64   \n## Number of obs: 5041, groups:  src_subject_id, 110\n## \n## Fixed effects:\n##                                                 Estimate Std. Error         df\n## (Intercept)                                    6.017e-02  3.729e-01  5.029e+03\n## CUE_high_gt_low                               -1.515e-02  7.458e-01  5.029e+03\n## stim_con_linear                                8.066e+00  8.920e-01  5.029e+03\n## demean_expect                                  2.374e-01  1.662e-02  5.029e+03\n## stim_con_quad                                  3.181e+00  8.174e-01  5.029e+03\n## CUE_high_gt_low:stim_con_linear                2.562e+00  1.784e+00  5.029e+03\n## CUE_high_gt_low:demean_expect                 -1.247e-02  3.324e-02  5.029e+03\n## stim_con_linear:demean_expect                  1.995e-02  3.894e-02  5.029e+03\n## CUE_high_gt_low:stim_con_quad                 -2.304e+00  1.635e+00  5.029e+03\n## demean_expect:stim_con_quad                    1.089e-03  3.710e-02  5.029e+03\n## CUE_high_gt_low:stim_con_linear:demean_expect  1.105e-01  7.788e-02  5.029e+03\n## CUE_high_gt_low:demean_expect:stim_con_quad   -9.891e-03  7.419e-02  5.029e+03\n##                                               t value Pr(>|t|)    \n## (Intercept)                                     0.161 0.871825    \n## CUE_high_gt_low                                -0.020 0.983797    \n## stim_con_linear                                 9.044  < 2e-16 ***\n## demean_expect                                  14.286  < 2e-16 ***\n## stim_con_quad                                   3.892 0.000101 ***\n## CUE_high_gt_low:stim_con_linear                 1.436 0.151056    \n## CUE_high_gt_low:demean_expect                  -0.375 0.707610    \n## stim_con_linear:demean_expect                   0.512 0.608536    \n## CUE_high_gt_low:stim_con_quad                  -1.410 0.158728    \n## demean_expect:stim_con_quad                     0.029 0.976584    \n## CUE_high_gt_low:stim_con_linear:demean_expect   1.419 0.156016    \n## CUE_high_gt_low:demean_expect:stim_con_quad    -0.133 0.893945    \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Correlation of Fixed Effects:\n##                        (Intr) CUE_h__ stm_cn_l dmn_xp stm_cn_q\n## CUE_hgh_gt_            -0.165                                 \n## stim_cn_lnr            -0.006 -0.029                          \n## demean_xpct             0.225 -0.709   0.015                  \n## stim_con_qd             0.064 -0.036   0.004    0.050         \n## CUE_hgh_gt_lw:stm_cn_l -0.029 -0.006  -0.146   -0.005  0.020  \n## CUE_hgh__:_            -0.709  0.225  -0.005   -0.307 -0.079  \n## stm_cn_ln:_             0.015 -0.005   0.202    0.006 -0.011  \n## CUE_hgh_gt_lw:stm_cn_q -0.036  0.064   0.020   -0.079 -0.183  \n## dmn_xpct:__             0.049 -0.077  -0.010    0.115  0.245  \n## CUE___:__:_            -0.005  0.015  -0.698    0.014  0.003  \n## CUE___:_:__            -0.077  0.049   0.003   -0.078 -0.719  \n##                        CUE_hgh_gt_lw:stm_cn_l CUE_h__:_ st__:_\n## CUE_hgh_gt_                                                   \n## stim_cn_lnr                                                   \n## demean_xpct                                                   \n## stim_con_qd                                                   \n## CUE_hgh_gt_lw:stm_cn_l                                        \n## CUE_hgh__:_             0.015                                 \n## stm_cn_ln:_            -0.698                  0.014          \n## CUE_hgh_gt_lw:stm_cn_q  0.004                  0.050     0.003\n## dmn_xpct:__             0.003                 -0.078    -0.004\n## CUE___:__:_             0.202                  0.006    -0.273\n## CUE___:_:__            -0.010                  0.115    -0.009\n##                        CUE_hgh_gt_lw:stm_cn_q dm_:__ CUE___:__:\n## CUE_hgh_gt_                                                    \n## stim_cn_lnr                                                    \n## demean_xpct                                                    \n## stim_con_qd                                                    \n## CUE_hgh_gt_lw:stm_cn_l                                         \n## CUE_hgh__:_                                                    \n## stm_cn_ln:_                                                    \n## CUE_hgh_gt_lw:stm_cn_q                                         \n## dmn_xpct:__            -0.719                                  \n## CUE___:__:_            -0.011                 -0.009           \n## CUE___:_:__             0.245                 -0.336 -0.004    \n## fit warnings:\n## fixed-effect model matrix is rank deficient so dropping 1 column / coefficient\n## optimizer (nloptwrap) convergence code: 0 (OK)\n## boundary (singular) fit: see help('isSingular')\n# model.factorize_C= lmer(demean_outcome~ CUE_high_gt_low*stim_factor*demean_expect +EXPECT_cmc+ (1|src_subject_id), data = pvc)\n# summary(model.factorize_demean)## Linear mixed model fit by REML. t-tests use Satterthwaite's method [\n## lmerModLmerTest]\n## Formula: \n## as.formula(reformulate(c(iv, sprintf(\"(%s|%s)\", iv, subject_keyword)),  \n##     response = dv))\n##    Data: df\n## \n## REML criterion at convergence: 40996.5\n## \n## Scaled residuals: \n##     Min      1Q  Median      3Q     Max \n## -2.4634 -0.6567 -0.1325  0.5028  6.6541 \n## \n## Random effects:\n##  Groups         Name        Variance  Std.Dev. Corr \n##  src_subject_id (Intercept)  43.94315  6.6290       \n##                 cue_namelow   0.03079  0.1755  -1.00\n##  Residual                   189.43985 13.7637       \n## Number of obs: 5041, groups:  src_subject_id, 110\n## \n## Fixed effects:\n##              Estimate Std. Error        df t value Pr(>|t|)    \n## (Intercept)   18.8604     0.6959  107.7330  27.101   <2e-16 ***\n## cue_namelow   -0.5008     0.3891 4141.2072  -1.287    0.198    \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Correlation of Fixed Effects:\n##             (Intr)\n## cue_namelow -0.319\n## optimizer (nloptwrap) convergence code: 0 (OK)\n## boundary (singular) fit: see help('isSingular')## Warning in geom_line(data = subjectwise, aes(group = .data[[subject]], x =\n## as.numeric(as.factor(.data[[iv]])) - : Ignoring unknown aesthetics: fill\n# library(plotly)\n# plot_ly(x=subjectwise_naomit_2dv$param_cue_type, y=subjectwise_naomit_2dv$DV1_mean_per_sub, z=subjectwise_naomit_2dv$DV2_mean_per_sub, type=\"scatter3d\", mode=\"markers\", color=subjectwise_naomit_2dv$param_cue_type)"},{"path":"demean-per-sub-n1.html","id":"across-tasks-pvc-is-the-slope-for-highvslow-cue-the-sametor-question","chapter":"7 beh :: outcome_demean ~ cue * stim * expect * n-1outcome","heading":"7.9 across tasks (PVC), is the slope for (highvslow cue) the same?Tor question","text":"Adding “participant” random effects leads singular boundary issue. reason random effects variance across participants.add task random effect, words, allowing differences across tasks, get following results:expectancy-outcome relationship differs across tasks, taskname_lin:demean_expect, t(14130) = 4.317, p < .001expectancy-outcome relationship differs across cue tasks, “tasknamelin:CUE_high_gt_low:demean_expect”, t(14130) = 5.758, p < .001\ntaskname_lin:CUE_high_gt_low -3.790e+00 1.448e+00 1.413e+04 -2.618 0.00886 \n++ taskname_lin:demean_expect 9.854e-02 2.283e-02 1.413e+04 4.317 1.59e-05 *\nCUE_high_gt_low:demean_expect -9.077e-02 1.987e-02 1.413e+04 -4.569 4.95e-06 **\nCUEhigh_gt_low:taskname_quad 5.352e+00 1.334e+00 1.413e+04 4.012 6.04e-05 \ndemean_expect:taskname_quad -1.596e-01 2.253e-02 1.413e+04 -7.084 1.47e-12 _\ntaskname_lin:CUE_high_gt_low:demean_expect 2.629e-01 4.565e-02 1.413e+04 5.758 8.67e-09 _**\nCUE_high_gt_low:demean_expect:taskname_quad -1.021e-01 4.505e-02 1.413e+04 -2.266 0.02348 *add sub random effect ignore singular. Plus, remove cue contrast…expectancy-outcome relationship differs across tasks, factor(param_task_name):demean_expect, F(2, 14136) = 54.765, p < .001","code":"\np <- load_task_social_df(datadir, taskname = 'pain', subject_varkey = subject_varkey, iv = iv, exclude = exclude)\nv <- load_task_social_df(datadir, taskname = 'vicarious', subject_varkey = subject_varkey, iv = iv, exclude = exclude)\nc <- load_task_social_df(datadir, taskname = 'cognitive', subject_varkey = subject_varkey, iv = iv, exclude = exclude)\np_sub <- p[, c(\"param_task_name\", \"param_cue_type\", \"src_subject_id\",\"session_id\", \"param_run_num\", \"param_stimulus_type\", \"event04_actual_angle\", \"event02_expect_angle\")]\nv_sub <- v[, c(\"param_task_name\", \"param_cue_type\", \"src_subject_id\",\"session_id\", \"param_run_num\", \"param_stimulus_type\", \"event04_actual_angle\", \"event02_expect_angle\")]\nc_sub <- c[, c(\"param_task_name\", \"param_cue_type\", \"src_subject_id\", \"session_id\", \"param_run_num\",\"param_stimulus_type\", \"event04_actual_angle\", \"event02_expect_angle\")]\npvc_sub <- do.call(\"rbind\", list(p_sub, v_sub, c_sub))\nmaindata <- pvc_sub %>%\ngroup_by(src_subject_id) %>%\nmutate(event04_actual_angle = as.numeric(event04_actual_angle)) %>%\nmutate(event02_expect_angle = as.numeric(event02_expect_angle)) %>%\nmutate(avg_outcome = mean(event04_actual_angle, na.rm = TRUE)) %>%\nmutate(demean_outcome = event04_actual_angle - avg_outcome) %>%\nmutate(avg_expect = mean(event02_expect_angle, na.rm = TRUE)) %>%\nmutate(demean_expect = event02_expect_angle - avg_expect)\n\ndata_p2= maindata %>%\n  arrange(src_subject_id ) %>%\n  group_by(src_subject_id) %>%\n  mutate(trial_index = row_number())\ndata_a3 <- data_p2 %>%\n  group_by(src_subject_id, session_id, param_run_num) %>%\n  mutate(trial_index = row_number(param_run_num))\n\ndata_a3lag <-\n    data_a3 %>%\n    group_by(src_subject_id, session_id, param_run_num) %>%\n    mutate(lag.demean_outcome = dplyr::lag(demean_outcome, n = 1, default = NA))\ndata_a3lag_omit <- data_a3lag[complete.cases(data_a3lag$lag.demean_outcome),]\n\ndf <- data_a3lag_omit\npvc_sub <- simple_contrasts_beh(df)## Warning: Unknown or uninitialised column: `stim_con_linear`.## Warning: Unknown or uninitialised column: `stim_con_quad`.## Warning: Unknown or uninitialised column: `CUE_high_gt_low`.## Warning: Unknown or uninitialised column: `cue_name`.\n# contrast code 1 linear\npvc_sub$taskname_lin[pvc_sub$param_task_name == \"pain\"] <-  0.5## Warning: Unknown or uninitialised column: `taskname_lin`.\npvc_sub$taskname_lin[pvc_sub$param_task_name == \"vicarious\"] <-  0\npvc_sub$taskname_lin[pvc_sub$param_task_name == \"cognitive\"] <-  -0.5\n\n# contrast code 2 quadratic\npvc_sub$taskname_quad[pvc_sub$param_task_name == \"pain\"] <-  -0.33## Warning: Unknown or uninitialised column: `taskname_quad`.\npvc_sub$taskname_quad[pvc_sub$param_task_name == \"vicarious\"] <-  0.66\npvc_sub$taskname_quad[pvc_sub$param_task_name == \"cognitive\"] <-  -0.33\n\npvc_sub$sub = factor(pvc_sub$src_subject_id)\n# model_test = lm(pvc_sub$demean_outcome~ pvc_sub$demean_expect)\nmodel_task = lmer(demean_outcome~ taskname_lin*CUE_high_gt_low*demean_expect + taskname_quad*CUE_high_gt_low*demean_expect +  (1 | sub), data = pvc_sub)\nmodel_wotask = lmer(demean_outcome~ CUE_high_gt_low*demean_expect +(1 | sub), data = pvc_sub)## boundary (singular) fit: see help('isSingular')\nsummary(model_task)## Linear mixed model fit by REML. t-tests use Satterthwaite's method [\n## lmerModLmerTest]\n## Formula: demean_outcome ~ taskname_lin * CUE_high_gt_low * demean_expect +  \n##     taskname_quad * CUE_high_gt_low * demean_expect + (1 | sub)\n##    Data: pvc_sub\n## \n## REML criterion at convergence: 139399.8\n## \n## Scaled residuals: \n##     Min      1Q  Median      3Q     Max \n## -4.5727 -0.6342 -0.1226  0.5514  5.3674 \n## \n## Random effects:\n##  Groups   Name        Variance Std.Dev.\n##  sub      (Intercept)   0.1232  0.351  \n##  Residual             600.5633 24.506  \n## Number of obs: 15091, groups:  sub, 111\n## \n## Fixed effects:\n##                                               Estimate Std. Error         df\n## (Intercept)                                 -3.019e-01  2.951e-01  2.477e+02\n## taskname_lin                                 1.801e+01  6.935e-01  1.447e+04\n## CUE_high_gt_low                             -9.551e+00  5.853e-01  1.369e+04\n## demean_expect                                4.696e-01  9.457e-03  1.156e+04\n## taskname_quad                               -1.082e+01  6.465e-01  1.482e+04\n## taskname_lin:CUE_high_gt_low                -4.377e+00  1.388e+00  7.418e+03\n## taskname_lin:demean_expect                   1.007e-01  2.163e-02  1.758e+03\n## CUE_high_gt_low:demean_expect               -8.861e-02  1.894e-02  4.064e+03\n## CUE_high_gt_low:taskname_quad                5.276e+00  1.294e+00  1.247e+04\n## demean_expect:taskname_quad                 -1.730e-01  2.157e-02  8.290e+03\n## taskname_lin:CUE_high_gt_low:demean_expect   2.685e-01  4.314e-02  1.405e+04\n## CUE_high_gt_low:demean_expect:taskname_quad -1.063e-01  4.310e-02  1.484e+04\n##                                             t value Pr(>|t|)    \n## (Intercept)                                  -1.023  0.30723    \n## taskname_lin                                 25.973  < 2e-16 ***\n## CUE_high_gt_low                             -16.319  < 2e-16 ***\n## demean_expect                                49.657  < 2e-16 ***\n## taskname_quad                               -16.741  < 2e-16 ***\n## taskname_lin:CUE_high_gt_low                 -3.153  0.00162 ** \n## taskname_lin:demean_expect                    4.655 3.48e-06 ***\n## CUE_high_gt_low:demean_expect                -4.679 2.98e-06 ***\n## CUE_high_gt_low:taskname_quad                 4.078 4.56e-05 ***\n## demean_expect:taskname_quad                  -8.022 1.18e-15 ***\n## taskname_lin:CUE_high_gt_low:demean_expect    6.224 4.98e-10 ***\n## CUE_high_gt_low:demean_expect:taskname_quad  -2.466  0.01368 *  \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Correlation of Fixed Effects:\n##                  (Intr) tsknm_l CUE_h__ dmn_xp tsknm_q ts_:CUE___ tsk_:_\n## taskname_ln       0.005                                                 \n## CUE_hgh_gt_      -0.188  0.369                                          \n## demean_xpct       0.224 -0.360  -0.620                                  \n## taskname_qd       0.087 -0.004  -0.299   0.280                          \n## tsk_:CUE___       0.368  0.032   0.004   0.141 -0.253                   \n## tsknm_ln:d_      -0.374  0.022   0.146  -0.281  0.256  -0.574           \n## CUE_hgh_gt_lw:d_ -0.616  0.140   0.225  -0.197 -0.142  -0.362      0.151\n## CUE_hgh_gt_lw:t_ -0.298 -0.253   0.088  -0.143 -0.382  -0.005     -0.097\n## dmn_xpct:t_       0.271  0.240  -0.139   0.177  0.391  -0.091      0.183\n## t_:CUE___:_       0.145 -0.572  -0.375   0.150 -0.099   0.023     -0.120\n## CUE_h__:_:_      -0.137 -0.093   0.272  -0.123 -0.659   0.239     -0.099\n##                  CUE_hgh_gt_lw:d_ CUE_hgh_gt_lw:t_ dmn_:_ t_:CUE___:\n## taskname_ln                                                         \n## CUE_hgh_gt_                                                         \n## demean_xpct                                                         \n## taskname_qd                                                         \n## tsk_:CUE___                                                         \n## tsknm_ln:d_                                                         \n## CUE_hgh_gt_lw:d_                                                    \n## CUE_hgh_gt_lw:t_  0.281                                             \n## dmn_xpct:t_      -0.123           -0.660                            \n## t_:CUE___:_      -0.280            0.256           -0.099           \n## CUE_h__:_:_       0.176            0.391           -0.255  0.185\nanova(model_task)## Type III Analysis of Variance Table with Satterthwaite's method\n##                                              Sum Sq Mean Sq NumDF   DenDF\n## taskname_lin                                 405142  405142     1 14470.1\n## CUE_high_gt_low                              159941  159941     1 13687.7\n## demean_expect                               1480894 1480894     1 11560.3\n## taskname_quad                                168310  168310     1 14820.0\n## taskname_lin:CUE_high_gt_low                   5970    5970     1  7418.2\n## taskname_lin:demean_expect                    13016   13016     1  1757.8\n## CUE_high_gt_low:demean_expect                 13146   13146     1  4063.7\n## CUE_high_gt_low:taskname_quad                  9989    9989     1 12473.3\n## demean_expect:taskname_quad                   38647   38647     1  8289.7\n## taskname_lin:CUE_high_gt_low:demean_expect    23266   23266     1 14053.9\n## CUE_high_gt_low:demean_expect:taskname_quad    3652    3652     1 14843.7\n##                                               F value    Pr(>F)    \n## taskname_lin                                 674.6035 < 2.2e-16 ***\n## CUE_high_gt_low                              266.3187 < 2.2e-16 ***\n## demean_expect                               2465.8423 < 2.2e-16 ***\n## taskname_quad                                280.2539 < 2.2e-16 ***\n## taskname_lin:CUE_high_gt_low                   9.9409  0.001623 ** \n## taskname_lin:demean_expect                    21.6722 3.477e-06 ***\n## CUE_high_gt_low:demean_expect                 21.8899 2.981e-06 ***\n## CUE_high_gt_low:taskname_quad                 16.6325 4.565e-05 ***\n## demean_expect:taskname_quad                   64.3519 1.183e-15 ***\n## taskname_lin:CUE_high_gt_low:demean_expect    38.7401 4.979e-10 ***\n## CUE_high_gt_low:demean_expect:taskname_quad    6.0802  0.013681 *  \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nanova(model_wotask, model_task)## refitting model(s) with ML (instead of REML)## Data: pvc_sub\n## Models:\n## model_wotask: demean_outcome ~ CUE_high_gt_low * demean_expect + (1 | sub)\n## model_task: demean_outcome ~ taskname_lin * CUE_high_gt_low * demean_expect + taskname_quad * CUE_high_gt_low * demean_expect + (1 | sub)\n##              npar    AIC    BIC logLik deviance  Chisq Df Pr(>Chisq)    \n## model_wotask    6 141394 141440 -70691   141382                         \n## model_task     14 139396 139502 -69684   139368 2014.4  8  < 2.2e-16 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n# summary(model_test)\nmodel_task1 = lmer(demean_outcome~ factor(param_task_name)*demean_expect  +  (1 | sub), data = pvc_sub)\nmodel_wotask1 = lmer(demean_outcome~ demean_expect+ (1 | sub), data = pvc_sub)## boundary (singular) fit: see help('isSingular')\nsummary(model_task1)## Linear mixed model fit by REML. t-tests use Satterthwaite's method [\n## lmerModLmerTest]\n## Formula: demean_outcome ~ factor(param_task_name) * demean_expect + (1 |  \n##     sub)\n##    Data: pvc_sub\n## \n## REML criterion at convergence: 139725.4\n## \n## Scaled residuals: \n##     Min      1Q  Median      3Q     Max \n## -4.2535 -0.6307 -0.1171  0.5506  5.2255 \n## \n## Random effects:\n##  Groups   Name        Variance  Std.Dev.\n##  sub      (Intercept)   0.03748  0.1936 \n##  Residual             613.93050 24.7776 \n## Number of obs: 15091, groups:  sub, 111\n## \n## Fixed effects:\n##                                                  Estimate Std. Error         df\n## (Intercept)                                    -8.081e+00  3.662e-01  8.076e+02\n## factor(param_task_name)pain                     2.304e+01  5.519e-01  1.465e+04\n## factor(param_task_name)vicarious               -1.434e+00  5.227e-01  1.508e+04\n## demean_expect                                   3.702e-01  1.369e-02  9.687e+03\n## factor(param_task_name)pain:demean_expect       1.136e-01  1.724e-02  3.523e+03\n## factor(param_task_name)vicarious:demean_expect -8.418e-02  1.912e-02  1.410e+04\n##                                                t value Pr(>|t|)    \n## (Intercept)                                    -22.067  < 2e-16 ***\n## factor(param_task_name)pain                     41.742  < 2e-16 ***\n## factor(param_task_name)vicarious                -2.744  0.00607 ** \n## demean_expect                                   27.033  < 2e-16 ***\n## factor(param_task_name)pain:demean_expect        6.589 5.07e-11 ***\n## factor(param_task_name)vicarious:demean_expect  -4.403 1.08e-05 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Correlation of Fixed Effects:\n##                     (Intr) fctr(prm_tsk_nm)p fctr(prm_tsk_nm)v dmn_xp\n## fctr(prm_tsk_nm)p   -0.662                                           \n## fctr(prm_tsk_nm)v   -0.699  0.464                                    \n## demean_xpct          0.298 -0.198            -0.209                  \n## fctr(prm_tsk_nm)p:_ -0.237 -0.080             0.166            -0.794\n## fctr(prm_tsk_nm)v:_ -0.214  0.142             0.336            -0.716\n##                     fctr(prm_tsk_nm)p:_\n## fctr(prm_tsk_nm)p                      \n## fctr(prm_tsk_nm)v                      \n## demean_xpct                            \n## fctr(prm_tsk_nm)p:_                    \n## fctr(prm_tsk_nm)v:_  0.569\nanova(model_task1)## Type III Analysis of Variance Table with Satterthwaite's method\n##                                        Sum Sq Mean Sq NumDF   DenDF  F value\n## factor(param_task_name)               1451299  725650     2 14837.1 1181.974\n## demean_expect                         1679513 1679513     1 14954.2 2735.674\n## factor(param_task_name):demean_expect   86935   43467     2  5101.8   70.802\n##                                          Pr(>F)    \n## factor(param_task_name)               < 2.2e-16 ***\n## demean_expect                         < 2.2e-16 ***\n## factor(param_task_name):demean_expect < 2.2e-16 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nanova(model_wotask1)## Type III Analysis of Variance Table with Satterthwaite's method\n##                Sum Sq Mean Sq NumDF DenDF F value    Pr(>F)    \n## demean_expect 4785248 4785248     1 15089  6564.5 < 2.2e-16 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nanova(model_wotask1, model_task1)## refitting model(s) with ML (instead of REML)## Data: pvc_sub\n## Models:\n## model_wotask1: demean_outcome ~ demean_expect + (1 | sub)\n## model_task1: demean_outcome ~ factor(param_task_name) * demean_expect + (1 | sub)\n##               npar    AIC    BIC logLik deviance  Chisq Df Pr(>Chisq)    \n## model_wotask1    4 142306 142337 -71149   142298                         \n## model_task1      8 139720 139781 -69852   139704 2594.7  4  < 2.2e-16 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nlibrary(emmeans)\n# emm1 = emmeans(model_task, specs = pairwise ~ stimintensity:task)\n# emm1"},{"path":"demean-per-sub-n1.html","id":"alireza-congruent-incongruent-pe","chapter":"7 beh :: outcome_demean ~ cue * stim * expect * n-1outcome","heading":"7.10 Alireza congruent incongruent (PE)","text":"categorize based congruent, incongruentsplit dataframe","code":"\n# %% -------------------------------------------------------------------------\n#  load pain data\n# ----------------------------------------------------------------------------\n\nmain_dir = dirname(dirname(getwd()))\ndatadir = file.path(main_dir, 'data', 'beh', 'beh02_preproc')\nsubject_varkey <- \"src_subject_id\"\niv <- \"param_cue_type\"\nxlab <- \"\"\ntaskname <- \"pain\"\nylab <- \"ratings (degree)\"\nsubject <- \"subject\"\nexclude <- \"sub-0001|sub-0003|sub-0004|sub-0005|sub-0025|sub-0999\"\ndata = data.frame()\ndata <- load_task_social_df(datadir, taskname = taskname, subject_varkey = subject_varkey, iv = iv, exclude = exclude)\ndata$event03_RT <- data$event03_stimulusC_reseponseonset - data$event03_stimulus_displayonset\n\ndir.create(analysis_dir, showWarnings = FALSE, recursive = TRUE)\n\nmaindata <- data %>%\ngroup_by(src_subject_id) %>%\nmutate(event04_actual_angle = as.numeric(event04_actual_angle)) %>%\nmutate(event02_expect_angle = as.numeric(event02_expect_angle)) %>%\nmutate(avg_outcome = mean(event04_actual_angle, na.rm = TRUE)) %>%\nmutate(demean_outcome = event04_actual_angle - avg_outcome) %>%\nmutate(avg_expect = mean(event02_expect_angle, na.rm = TRUE)) %>%\nmutate(demean_expect = event02_expect_angle - avg_expect)\n\n# %% -------------------------------------------------------------------------\n#  0. argparse\n# ----------------------------------------------------------------------------\n\ndata_p2= maindata %>%\n  arrange(src_subject_id ) %>%\n  group_by(src_subject_id) %>%\n  mutate(trial_index = row_number())\ndata_a3 <- data_p2 %>%\n  group_by(src_subject_id, session_id, param_run_num) %>%\n  mutate(trial_index = row_number(param_run_num))\n\ndata_a3lag <-\n    data_a3 %>%\n    group_by(src_subject_id, session_id, param_run_num) %>%\n    mutate(lag.demean_outcome = dplyr::lag(demean_outcome, n = 1, default = NA))\ndata_a3lag <- data_a3lag %>%\n  mutate(EXPECT_cmc = avg_expect - mean(avg_expect))\ndata_a3lag_omit <- data_a3lag[complete.cases(data_a3lag$lag.demean_outcome),]\n\ndf <- data_a3lag_omit\npvc <- simple_contrasts_beh(df)## Warning: Unknown or uninitialised column: `stim_con_linear`.## Warning: Unknown or uninitialised column: `stim_con_quad`.## Warning: Unknown or uninitialised column: `CUE_high_gt_low`.## Warning: Unknown or uninitialised column: `cue_name`."},{"path":"demean-per-sub-n1.html","id":"archive-this-cell","chapter":"7 beh :: outcome_demean ~ cue * stim * expect * n-1outcome","heading":"7.10.1 archive this cell","text":"","code":"\n# previous_congruency <- is_congruent(param_cue_type[previous_index], param_stimulus_type[previous_index])\n\nis_congruent <- function(cue, stim) {\n  if (cue == \"low_cue\" && stim == \"low_stim\") {\n    return(\"congruent\")\n  } else if (cue == \"low_cue\" && stim == \"high_stim\") {\n    return(\"incongruent\")\n  } else if (cue == \"high_cue\" && stim == \"low_stim\") {\n    return(\"incongruent\")\n  } else if (cue == \"high_cue\" && stim == \"high_stim\") {\n    return(\"congruent\")\n  } else if (cue == \"high_cue\" && stim == \"med_stim\") {\n    return(\"congruent\")\n  } else if (cue == \"low_cue\" && stim == \"med_stim\") {\n    return(\"incongruent\")\n  } else {\n    return(NA)  # Handle other cases\n  }\n}\npvc.pain <- pvc[pvc$param_task_name == \"pain\",]\npvc.pain$pe <- pvc.pain$demean_outcome - pvc.pain$demean_expect\n\n# define congruency patterns\npvc.pain$congruency[(pvc.pain$param_cue_type == \"low_cue\") & (pvc.pain$pe < 0)] <- \"congruent\"## Warning: Unknown or uninitialised column: `congruency`.\npvc.pain$congruency[(pvc.pain$param_cue_type == \"high_cue\") & (pvc.pain$pe > 0)] <- \"congruent\"\n\npvc.pain$congruency[(pvc.pain$param_cue_type == \"low_cue\") & (pvc.pain$pe > 0)] <- \"incongruent\"\npvc.pain$congruency[(pvc.pain$param_cue_type == \"high_cue\") & (pvc.pain$pe < 0)] <- \"incongruent\"\n\n\nlibrary(dplyr)\n\n# definition: current cue level (high, low).\n# Find N-1 trial where cue level matches current trial\n# populate that as \"congruency_vector\"\npvc.pain <- pvc.pain %>%\n  # group by subject, session, run\n  group_by(src_subject_id, session_id, param_run_num) %>%\n  mutate(\n    congruency_status = {\n      congruency_vector <- vector(\"character\", n())\n\n      for (i in 1:n()) {\n        # get the current cue. find the trial indices with the same cue level as current trial `matching_indices`\n        current_cue <- param_cue_type[i]\n        # identifying all existing trials that matches the current cue level\n        matching_indices <- which(param_cue_type[1:(i - 1)] == current_cue)\n        if (length(matching_indices) > 0) {\n          # from matching_indices, grab the largest number.\n          # this maximum number would be the most recent N-1 cue trial, based on matching_indices\n          previous_index <- max(matching_indices)\n          # populate congruency_vector with previous N-1 trial's congruency value. (NOTE: must match current cue level)\n          congruency_vector[i] <- congruency[previous_index]\n        } else {\n          congruency_vector[i] <- NA\n        }\n      }\n      congruency_vector\n    }\n  )\n  # ungroup() %>%\n  # mutate(\n  #   congruency_status = ifelse(is.na(congruency_status), pvc$congruency, congruency_status)\n  # )"},{"path":"demean-per-sub-n1.html","id":"alireza-congruent-incongruent-incorrect","chapter":"7 beh :: outcome_demean ~ cue * stim * expect * n-1outcome","heading":"7.11 Alireza congruent incongruent (incorrect)","text":"categorize based congruent, incongruentsplit dataframe","code":""},{"path":"demean-per-sub-n1.html","id":"archive-this-cell-1","chapter":"7 beh :: outcome_demean ~ cue * stim * expect * n-1outcome","heading":"7.11.1 archive this cell","text":"","code":"\n# previous_congruency <- is_congruent(param_cue_type[previous_index], param_stimulus_type[previous_index])\n\nis_congruent <- function(cue, stim) {\n  if (cue == \"low_cue\" && stim == \"low_stim\") {\n    return(\"congruent\")\n  } else if (cue == \"low_cue\" && stim == \"high_stim\") {\n    return(\"incongruent\")\n  } else if (cue == \"high_cue\" && stim == \"low_stim\") {\n    return(\"incongruent\")\n  } else if (cue == \"high_cue\" && stim == \"high_stim\") {\n    return(\"congruent\")\n  } else if (cue == \"high_cue\" && stim == \"med_stim\") {\n    return(\"congruent\")\n  } else if (cue == \"low_cue\" && stim == \"med_stim\") {\n    return(\"incongruent\")\n  } else {\n    return(NA)  # Handle other cases\n  }\n}\npvc <- pvc[pvc$param_task_name == \"pain\",]\n\n# define congruency patterns\npvc.pain$congruency2[(pvc.pain$param_cue_type == \"low_cue\") & (pvc.pain$param_stimulus_type == \"low_stim\")] <- \"congruent\"## Warning: Unknown or uninitialised column: `congruency2`.\npvc.pain$congruency2[(pvc.pain$param_cue_type == \"high_cue\") & (pvc.pain$param_stimulus_type == \"low_stim\")] <- \"incongruent\"\n\npvc.pain$congruency2[(pvc.pain$param_cue_type == \"low_cue\") & (pvc.pain$param_stimulus_type == \"med_stim\")] <- \"incongruent\"\npvc.pain$congruency2[(pvc.pain$param_cue_type == \"high_cue\") & (pvc.pain$param_stimulus_type == \"med_stim\")] <- \"congruent\"\n\npvc.pain$congruency2[(pvc.pain$param_cue_type == \"low_cue\") & (pvc.pain$param_stimulus_type == \"high_stim\")] <- \"incongruent\"\npvc.pain$congruency2[(pvc.pain$param_cue_type == \"high_cue\") & (pvc.pain$param_stimulus_type == \"high_stim\")] <- \"congruent\"\n\n\nlibrary(dplyr)\n\n# definition: current cue level (high, low).\n# Find N-1 trial where cue level matches current trial\n# populate that as \"congruency_vector\"\npvc.pain <- pvc.pain %>%\n  # group by subject, session, run\n  group_by(src_subject_id, session_id, param_run_num) %>%\n  mutate(\n    congruency_status2 = {\n      congruency_vector <- vector(\"character\", n())\n\n      for (i in 1:n()) {\n        # get the current cue. find the trial indices with the same cue level as current trial `matching_indices`\n        current_cue <- param_cue_type[i]\n        # identifying all existing trials that matches the current cue level\n        matching_indices <- which(param_cue_type[1:(i - 1)] == current_cue)\n        if (length(matching_indices) > 0) {\n          # from matching_indices, grab the largest number.\n          # this maximum number would be the most recent N-1 cue trial, based on matching_indices\n          previous_index <- max(matching_indices)\n          # populate congruency_vector with previous N-1 trial's congruency value. (NOTE: must match current cue level)\n          congruency_vector[i] <- congruency2[previous_index]\n        } else {\n          congruency_vector[i] <- NA\n        }\n      }\n      congruency_vector\n    }\n  )\n  # ungroup() %>%\n  # mutate(\n  #   congruency_status2 = ifelse(is.na(congruency_status2), pvc$congruency2, congruency_status2)\n  # )"},{"path":"mediation.html","id":"mediation","chapter":"8 beh :: Mediation","heading":"8 beh :: Mediation","text":"","code":""},{"path":"mediation.html","id":"what-is-the-purpose-of-this-notebook-5","chapter":"8 beh :: Mediation","heading":"What is the purpose of this notebook?","text":", model outcome ratings function cue, stimulus intensity, expectation ratings, N-1 outcome rating.opposed notebook 15, want check demeaning process runs opposed subjects.opposed notebook 15, want check demeaning process runs opposed subjects.words, calculate average within run subtract ratingsIn words, calculate average within run subtract ratingsMain model: lmer(outcome_rating ~ cue * stim * expectation rating + N-1 outcomerating)Main model: lmer(outcome_rating ~ cue * stim * expectation rating + N-1 outcomerating)Main question: constitutes reported outcome rating?Main question: constitutes reported outcome rating?Sub questions:\nlinear relationship expectation rating outcome rating, differ function cue?\nN-1 outcome rating affect current expectation ratings?\nLater, effect different across tasks similar?\nSub questions:linear relationship expectation rating outcome rating, differ function cue?N-1 outcome rating affect current expectation ratings?Later, effect different across tasks similar?IV:\nstim (high / med / low)\ncue (high / low)\nexpectation rating (continuous)\nN-1 outcome rating (continuous)IV:\nstim (high / med / low)\ncue (high / low)\nexpectation rating (continuous)\nN-1 outcome rating (continuous)DV: outcome ratingDV: outcome rating","code":""},{"path":"mediation.html","id":"some-thoughts-todos-1","chapter":"8 beh :: Mediation","heading":"Some thoughts, TODOs","text":"Standardized coefficientsSlope difference? Intercept difference? ( cue expectantion rating)Correct range (within participant)\nhypothesis:Larger expectation leads prediction errorIndividual differences ratingsOutcome experience, based behavioral experience\nbrain maps associated component.load data combine participant data","code":"##  event02_expect_RT event04_actual_RT event02_expect_angle event04_actual_angle\n##  Min.   :0.6504    Min.   :0.0171    Min.   :  0.00       Min.   :  0.00      \n##  1st Qu.:1.6200    1st Qu.:1.9188    1st Qu.: 29.55       1st Qu.: 37.83      \n##  Median :2.0511    Median :2.3511    Median : 57.58       Median : 60.49      \n##  Mean   :2.1337    Mean   :2.4011    Mean   : 61.88       Mean   : 65.47      \n##  3rd Qu.:2.5589    3rd Qu.:2.8514    3rd Qu.: 88.61       3rd Qu.: 87.70      \n##  Max.   :3.9912    Max.   :3.9930    Max.   :180.00       Max.   :180.00      \n##  NA's   :651       NA's   :638       NA's   :651          NA's   :641"},{"path":"mediation.html","id":"covariance-matrix-ratings-and-rt","chapter":"8 beh :: Mediation","heading":"Covariance matrix: ratings and RT","text":"","code":""},{"path":"mediation.html","id":"covariance-matrix-fixation-durations-e.g.-isis","chapter":"8 beh :: Mediation","heading":"Covariance matrix: fixation durations (e.g. ISIs)","text":"","code":""},{"path":"mediation.html","id":"mediation-1","chapter":"8 beh :: Mediation","heading":"8.1 mediation","text":"","code":"\npsych::mediate(event04_actual_angle ~ CUE_high_gt_low*stim_con_linear+ event02_expect_angle + lag.04outcomeangle, data = pvc, n.iter = 1000) %>% print(short = FALSE)## \n## Mediation/Moderation Analysis \n## Call: psych::mediate(y = event04_actual_angle ~ CUE_high_gt_low * stim_con_linear + \n##     event02_expect_angle + lag.04outcomeangle, data = pvc, n.iter = 1000)\n## \n## The DV (Y) was  event04_actual_angle . The IV (X) was  CUE_high_gt_low stim_con_linear event02_expect_angle lag.04outcomeangle CUE_high_gt_low*stim_con_linear . The mediating variable(s) =  .Call: psych::mediate(y = event04_actual_angle ~ CUE_high_gt_low * stim_con_linear + \n##     event02_expect_angle + lag.04outcomeangle, data = pvc, n.iter = 1000)\n## \n## No mediator specified leads to traditional regression \n##                                 event04_actual_angle   se     t   df      Prob\n## Intercept                                       0.00 0.30 -0.01 5023  9.89e-01\n## CUE_high_gt_low                                -5.37 0.71 -7.54 5023  5.62e-14\n## stim_con_linear                                34.42 0.75 46.13 5023  0.00e+00\n## event02_expect_angle                            0.36 0.01 33.69 5023 1.84e-224\n## lag.04outcomeangle                              0.48 0.01 46.08 5023  0.00e+00\n## CUE_high_gt_low*stim_con_linear                 1.71 1.49  1.14 5023  2.53e-01\n## \n## R = 0.83 R2 = 0.68   F = 2177.74 on 5 and 5023 DF   p-value:  0"},{"path":"mediation.html","id":"mediation-2","chapter":"8 beh :: Mediation","heading":"8.2 mediation 2","text":"","code":"\nmod1 <- \"# a path\n         #thirst ~ a * room_temp\n         event02_expect_angle ~ a * CUE_high_gt_low\n\n         # b path\n         #consume ~ b * thirst\n         event04_actual_angle ~ b* event02_expect_angle\n\n         # c prime path\n         #consume ~ cp * room_temp\n         event04_actual_angle ~ cp * CUE_high_gt_low\n\n         # indirect and total effects\n         ab := a * b\n         total := cp + ab\"\nlibrary(lavaan)## This is lavaan 0.6-17\n## lavaan is FREE software! Please report any bugs.## \n## Attaching package: 'lavaan'## The following object is masked from 'package:psych':\n## \n##     cor2cov\nfsem1 <- sem(mod1, data = pvc, se = \"bootstrap\", bootstrap = 1000)## Warning in lav_model_nvcov_bootstrap(lavmodel = lavmodel, lavsamplestats =\n## lavsamplestats, : lavaan WARNING: 251 bootstrap runs failed or did not\n## converge.\nsummary(fsem1, standardized = TRUE)## lavaan 0.6.17 ended normally after 1 iteration\n## \n##   Estimator                                         ML\n##   Optimization method                           NLMINB\n##   Number of model parameters                         5\n## \n##                                                   Used       Total\n##   Number of observations                          4621        5029\n## \n## Model Test User Model:\n##                                                       \n##   Test statistic                                 0.000\n##   Degrees of freedom                                 0\n## \n## Parameter Estimates:\n## \n##   Standard errors                            Bootstrap\n##   Number of requested bootstrap draws             1000\n##   Number of successful bootstrap draws             749\n## \n## Regressions:\n##                          Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all\n##   event02_expect_angle ~                                                      \n##     CUE_hgh__  (a)         34.622    1.026   33.751    0.000   34.622    0.429\n##   event04_actual_angle ~                                                      \n##     evnt02_x_  (b)          0.674    0.013   51.844    0.000    0.674    0.715\n##     CUE_hgh__ (cp)        -15.034    0.967  -15.552    0.000  -15.034   -0.198\n## \n## Variances:\n##                    Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all\n##    .evnt02_xpct_ng 1328.872   33.570   39.585    0.000 1328.872    0.816\n##    .evnt04_ctl_ngl  825.688   20.739   39.813    0.000  825.688    0.571\n## \n## Defined Parameters:\n##                    Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all\n##     ab               23.321    0.822   28.379    0.000   23.321    0.307\n##     total             8.287    1.143    7.251    0.000    8.287    0.109\nparameterestimates(fsem1, boot.ci.type = \"bca.simple\", standardized = TRUE) %>%\n  kable()"},{"path":"mediation.html","id":"mediation-3-test-same-model-using-mediation-from-mbess","chapter":"8 beh :: Mediation","heading":"8.3 mediation 3: Test same model using mediation() from MBESS","text":"","code":"## Warning in resid.Y.on.X + resid.Y.on.M: longer object length is not a multiple\n## of shorter object length## Warning in resid.Y.on.X + resid.Y.on.M - resid.Y.on.X.and.M: longer object\n## length is not a multiple of shorter object length## Warning in standardized.resid.Y.on.X + standardized.resid.Y.on.M: longer object\n## length is not a multiple of shorter object length## Warning in standardized.resid.Y.on.X + standardized.resid.Y.on.M -\n## standardized.resid.Y.on.X.and.M: longer object length is not a multiple of\n## shorter object length## Warning in abs(e.1M) + abs(e.1Y): longer object length is not a multiple of\n## shorter object length## Warning in abs(standardized.e.1M) + abs(standardized.e.1Y): longer object\n## length is not a multiple of shorter object length## [1] \"Bootstrap resampling has begun. This process may take a considerable amount of time if the number of replications is large, which is optimal for the bootstrap procedure.\"##                                           Estimate CI.Lower_BCa CI.Upper_BCa\n## Indirect.Effect                        23.32106331           NA           NA\n## Indirect.Effect.Partially.Standardized  0.61326642           NA           NA\n## Index.of.Mediation                      0.30663221           NA           NA\n## R2_4.5                                 -0.02001083           NA           NA\n## R2_4.6                                  0.07764679           NA           NA\n## R2_4.7                                  0.18103664           NA           NA\n## Ratio.of.Indirect.to.Total.Effect       2.81406275           NA           NA\n## Ratio.of.Indirect.to.Direct.Effect     -1.55124885           NA           NA\n## Success.of.Surrogate.Endpoint           0.23936430           NA           NA\n## Residual.Based_Gamma                            NA           NA           NA\n## Residual.Based.Standardized_gamma               NA           NA           NA\n## SOS                                    -1.68537707           NA           NA"},{"path":"mediation.html","id":"mediation-4-test-library-mediation","chapter":"8 beh :: Mediation","heading":"8.4 mediation 4: Test library mediation","text":":::: {.refbox}https://nmmichalak.github.io/nicholas_michalak/blog_entries/2018/nrg01/nrg01.html\n::::","code":""},{"path":"simulation.html","id":"simulation","chapter":"9 RL :: simulation","heading":"9 RL :: simulation","text":"","code":""},{"path":"simulation.html","id":"what-is-the-purpose-of-this-notebook-6","chapter":"9 RL :: simulation","heading":"What is the purpose of this notebook?","text":", Aryan simulated behavioral outcome ratings using reinforcement learning model.","code":""},{"path":"simulation.html","id":"load-data","chapter":"9 RL :: simulation","heading":"load data","text":"","code":""},{"path":"simulation.html","id":"function","chapter":"9 RL :: simulation","heading":"9.1 function","text":"","code":"\n# summarize dataframe __________________________________________________________\nplot_twovariable <- function(df, iv1, iv2, group, subject, xmin, xmax, ymin,ymax,\nxlab, ylab, ggtitle, color_scheme, alpha, fit_lm, lm_method = NULL, identity_line=TRUE, size=NULL) {\n    # x: iv1 e.g. expect rating\n    # y: iv2 e.g. outcome rating\n    # group: param_cue_type\n    # subject: src_subject_id\n    # xlab(\"expect rating\") +\n    # ylab(\"outcome rating\") +\n    # color_scheme = c(\"high_cue\" = \"#000000\",low_cue\" = \"#BBBBBB\"        )\n    library(ggplot2)\n\n    df_dropna <- df[!is.na(df[, iv1]) & !is.na(df[, iv2]), ]\n    subjectwise_naomit_2dv <- meanSummary_2dv(\n        df_dropna,\n        c(subject, group),\n        iv1, iv2\n    )\n    # subjectwise_naomit_2dv <- na.omit(subjectwise_2dv)\n    subjectwise_naomit_2dv[ , group] <- as.factor(subjectwise_naomit_2dv[, group])\n    # plot _________________________________________________________________________ #nolint\n\n    g <- ggplot(\n        data = subjectwise_naomit_2dv,\n        aes(\n            x = .data[[\"DV1_mean_per_sub\"]],\n            y = .data[[\"DV2_mean_per_sub\"]],\n            color = .data[[group]],\n            size = size\n        )\n    ) +\n        geom_point(\n            aes(shape = .data[[group]],\n            color = .data[[group]]),\n            size = 2,\n            alpha = alpha) +\n\n        theme(aspect.ratio = 1) +\n        scale_color_manual(values = color_scheme) +\n        scale_shape_manual(values = c(16, 3)) +\n        xlab(xlab) +\n        ylab(ylab) +\n        ylim(ymin,ymax) +\n        xlim(xmin,xmax) +\n        ggtitle(ggtitle) +\n        theme(\n            axis.line = element_line(colour = \"grey50\"),\n            panel.background = element_blank(),\n            plot.subtitle = ggtext::element_textbox_simple(size = 11)\n        )\n\n    if (isTRUE(fit_lm)) {\n        g <- g +\n        # geom_ribbon(stat = \"smooth\", method = lm_method, se = FALSE, alpha = 0.1,\n        #       aes(color = NULL, group = factor(group))) +\n        geom_line(stat = \"smooth\", method = lm_method, se = FALSE, alpha = 0.8, linewidth = 1.5)\n    } else {\n        g\n    }\n\n    if (isTRUE(identity_line)) {\n        g <- g + geom_abline(\n            intercept = 0, slope = 1, color = \"#373737\", # color = \"green\"\n            linetype = \"dashed\",\n            linewidth = .5\n        )\n    } else {\n        g\n    }\n    return(g)\n}"},{"path":"simulation.html","id":"plot-data","chapter":"9 RL :: simulation","heading":"plot data","text":"","code":"\ngroup = \"cue\"\n\n    iv1 = \"demean_expect\"\n    iv2 = \"demean_outcome\"\n\n    subject = \"sub\"\n    xmin=48; xmax=50; ymin=48; ymax=50\n    xlab = \"expectation rating\"\n    ylab = \"outcome rating\"\n    ggtitle = \"all stimulus intensity\"\n    color_scheme = c(\"high_cue\" =\"#941100\",\"low_cue\" =  \"#5D5C5C\")\n    alpha = .8; fit_lm = TRUE; lm_method = \"lm\"; identity_line=TRUE; size=NULL\n    g <- ggplot(\n        data = merged_df,\n        aes(\n            x = .data[[\"expectation\"]],\n            y = .data[[\"outcome\"]],\n            color = .data[[group]],\n            size = size\n        )\n    ) +\n        geom_point(\n            aes(shape = .data[[group]],\n            color = .data[[group]]),\n            size = 2,\n            alpha = alpha) +\n\n        theme(aspect.ratio = 1) +\n        scale_color_manual(values = color_scheme) +\n        scale_shape_manual(values = c(16, 3)) +\n        xlab(xlab) +\n        ylab(ylab) +\n        ylim(ymin,ymax) +\n        xlim(xmin,xmax) +\n        ggtitle(ggtitle) +\n        theme(\n            axis.line = element_line(colour = \"grey50\"),\n            panel.background = element_blank(),\n            plot.subtitle = ggtext::element_textbox_simple(size = 11)\n        )\n\n    if (isTRUE(fit_lm)) {\n        g <- g +\n        # geom_ribbon(stat = \"smooth\", method = lm_method, se = FALSE, alpha = 0.1,\n        #       aes(color = NULL, group = factor(group))) +\n        geom_line(stat = \"smooth\", method = lm_method, se = FALSE, alpha = 0.8, linewidth = 1.5)\n    } else {\n        g\n    }\n\n    if (isTRUE(identity_line)) {\n        g <- g + geom_abline(\n            intercept = 0, slope = 1, color = \"#373737\", # color = \"green\"\n            linetype = \"dashed\",\n            linewidth = .5\n        )\n    } else {\n        g\n    }\ng## Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n## ℹ Please use `linewidth` instead.\n## This warning is displayed once every 8 hours.\n## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was\n## generated.## `geom_smooth()` using formula = 'y ~ x'"},{"path":"simulation.html","id":"model-04-4-4-lineplot","chapter":"9 RL :: simulation","heading":"9.1.1 model 04 4-4 lineplot","text":"","code":""},{"path":"simulation_aryan.html","id":"simulation_aryan","chapter":"10 RL :: simulation Aryan","heading":"10 RL :: simulation Aryan","text":"","code":""},{"path":"simulation_aryan.html","id":"output-rmdformatsdowncute","chapter":"10 RL :: simulation Aryan","heading":"10.1 output: rmdformats::downcute","text":"","code":""},{"path":"simulation_aryan.html","id":"what-is-the-purpose-of-this-notebook-7","chapter":"10 RL :: simulation Aryan","heading":"What is the purpose of this notebook?","text":", model Aryans model fitted results, using scheme behavioral analysis (15*.Rmd)","code":""},{"path":"simulation_aryan.html","id":"load-data-1","chapter":"10 RL :: simulation Aryan","heading":"load data","text":"","code":""},{"path":"simulation_aryan.html","id":"plot-the-relationship-between-expectation-and-outcome-rating-using-model-4-simulations-jepma","chapter":"10 RL :: simulation Aryan","heading":"10.2 Plot the relationship between expectation and outcome rating using model 4 simulations (Jepma)","text":"","code":""},{"path":"simulation_aryan.html","id":"plot-the-relationship-between-expectation-and-outcome-rating-using-model-2-simulations-jepma","chapter":"10 RL :: simulation Aryan","heading":"10.3 Plot the relationship between expectation and outcome rating using model 2 simulations (Jepma)","text":"","code":""},{"path":"simulation_aryan.html","id":"model-fits-from-model-2.-expectation-ratings-jepma-model","chapter":"10 RL :: simulation Aryan","heading":"10.3.1 model fits from model 2. expectation ratings (Jepma model)","text":"","code":"\nmain_dir = dirname(dirname(getwd()))\ndata <- read.csv(file.path(main_dir, 'data/simulated/model_ver04_0508/table_pain_new.csv'))\nsubjectwise_2dv <- meanSummary_2dv(data, c(\"src_subject_id\"),\n                                   \"event02_expect_angle\", \"Exp_mdl2\" )\nggplot(data = subjectwise_2dv,\n       aes(x = .data[[\"DV1_mean_per_sub\"]],\n           y = .data[[\"DV2_mean_per_sub\"]],\n           size = .5\n           )) +\n  geom_point(size = 2, alpha = .5  ) +\n  ylim(0,180) +\n  xlim(0,180) +\n  coord_fixed() +\n  geom_abline(intercept = 0, slope = 1, color = \"#373737\", linetype = \"dashed\", linewidth = .5) +\n  xlab(\"Observed\\nexpectation rating\") +\n  ylab(\"Model-fitted \\nexpectation rating\")+\n  theme(\n    axis.line = element_line(colour = \"grey50\"),\n    panel.background = element_blank(),\n    plot.subtitle = ggtext::element_textbox_simple(size = 1),\n    axis.text.x = element_text(size = 10),\n    axis.text.y = element_text(size = 10),\n    axis.title.x = element_text(size = 15),\n    axis.title.y = element_text(size = 15)\n\n  )"},{"path":"simulation_aryan.html","id":"model-fits-from-model-2.-outcome-ratings-jepma-model","chapter":"10 RL :: simulation Aryan","heading":"10.3.2 model fits from model 2. outcome ratings (Jepma model)","text":"","code":"\nsubjectwise_2dv <- meanSummary_2dv(data, c(\"src_subject_id\"),\n                                   \"event04_actual_angle\", \"Pain_mdl2\" )\nggplot(data = subjectwise_2dv,\n       aes(x = .data[[\"DV1_mean_per_sub\"]],\n           y = .data[[\"DV2_mean_per_sub\"]],\n           size = .5\n           )) +\n  geom_point(size = 2, alpha = .5  ) +\n  ylim(0,180) +\n  xlim(0,180) +\n  coord_fixed() +\n  geom_abline(intercept = 0, slope = 1, color = \"#373737\", linetype = \"dashed\", linewidth = .5) +\n  xlab(\"Observed\\noutcome rating\") +\n  ylab(\"Model-fitted \\noutcome rating\")+\n  theme(\n    axis.line = element_line(colour = \"grey50\"),\n    panel.background = element_blank(),\n    plot.subtitle = ggtext::element_textbox_simple(size = 1),\n    axis.text.x = element_text(size = 15),\n    axis.text.y = element_text(size = 15),\n    axis.title.x = element_text(size = 20),\n    axis.title.y = element_text(size = 20)\n\n  )"},{"path":"simulation_aryan.html","id":"correlation-betweeen-alpha_incongruent-and-cue-trial-slope-randome-effects-of-cue","chapter":"10 RL :: simulation Aryan","heading":"10.4 correlation betweeen alpha_incongruent and cue trial slope (randome effects of cue)","text":"","code":"## Warning: Removed 3 rows containing missing values (`geom_point()`).## Warning: Removed 2 rows containing missing values (`geom_point()`)."},{"path":"simulation_aryan.html","id":"correlation-betweeen-alpha_incongruent-and-nps","chapter":"10 RL :: simulation Aryan","heading":"10.5 correlation betweeen alpha_incongruent and NPS","text":"","code":"\n# load dataframe\nNPS <- data.frame(read.csv(file.path(main_dir, 'data/NPS_curated.csv')))\nNPS <- NPS %>%\n  mutate(congruency = case_when(\n    cuetype == \"cuetype-low\" & stimintensity == \"low\" ~ \"congruent\",\n    cuetype == \"cuetype-high\" & stimintensity == \"high\" ~ \"congruent\",\n    cuetype == \"cuetype-low\" & stimintensity == \"high\" ~ \"incongruent\",\n    cuetype == \"cuetype-high\" & stimintensity == \"low\" ~ \"incongruent\",\n    TRUE ~ \"other\"\n  ))\nNPS_congru <- NPS %>%\n  group_by(sub) %>%\n  summarise(avg_diff = mean(NPSpos[congruency == \"congruent\"]) - mean(NPSpos[congruency == \"incongruent\"]))\n\n# grab alpha_incongruent\nmodel_param <- data.frame(read.csv(file.path(main_dir, \"data/RL/modelfit_jepma_0525/par_mdl2_pain.csv\")))\n\nmodel_param <- model_param %>%\n  mutate(sub = sprintf(\"sub-%04d\", subj_num_new_pain))\n\n# Merge the two dataframes based on the \"sub\" column\nmerged_NPS <- merge(NPS_congru, model_param, by = \"sub\")\nmerged_NPS$alpha_c_gt_i <- merged_NPS$alpha_c - merged_NPS$alpha_i\n# grab cue slope\n# grab intersection of subject ids\n# plot ggplot\nggplot(data = merged_NPS,\n       aes(x = .data[[\"avg_diff\"]],\n           y = .data[[\"alpha_c_gt_i\"]],\n           size = .5\n           )) +\n  geom_point(size = 2, alpha = .5  ) +\n  ylim(-10,10) +\n  xlim(-10,10) +\n  coord_fixed() +\n  geom_abline(intercept = 0, slope = 1, color = \"#373737\", linetype = \"dashed\", linewidth = .5) +\n  xlab(\"NPS \\n(congruent > incongruent)\") +\n  ylab(\"Alpha \\n(congruent > incongruent)\")+\n  theme(\n    axis.line = element_line(colour = \"grey50\"),\n    panel.background = element_blank(),\n    plot.subtitle = ggtext::element_textbox_simple(size = 1),\n    axis.text.x = element_text(size = 15),\n    axis.text.y = element_text(size = 15),\n    axis.title.x = element_text(size = 20),\n    axis.title.y = element_text(size = 20)\n\n  )\n# run lmer"},{"path":"simulation_aryan.html","id":"correlation-bettween-nps-and-pe","chapter":"10 RL :: simulation Aryan","heading":"10.6 correlation bettween NPS and PE","text":"","code":""},{"path":"simulation_aryan.html","id":"test-similarity-between-nps-positive-values-and-pe-11062023","chapter":"10 RL :: simulation Aryan","heading":"10.6.1 test similarity between NPS positive values and PE (11/06/2023)","text":"","code":"\nPEdf <- read.csv(file.path(main_dir, 'data/RL/modelfit_jepma_0525/table_pain.csv'))\nNPS <- data.frame(read.csv(file.path(main_dir, 'data/NPS_curated.csv')))\n\nPEdf <- PEdf %>%\n  mutate(sub = sprintf(\"sub-%04d\", src_subject_id),\n         ses = sprintf(\"ses-%02d\", session_id),\n         run = sprintf(\"run-%02d\", param_run_num),\n         trial = sprintf(\"trial-%03d\", trial_index_runwise-1)\n         )\nmerged_NPSpe <- merge(NPS, PEdf, by = c(\"sub\", \"ses\", \"run\", \"trial\"))\n\n\nsubjectwise_2dv <- meanSummary_2dv(merged_NPSpe, c(\"src_subject_id\",\"stimintensity\", \"cuetype\"),\n                                   \"PE_mdl2\", \"NPSpos\" )\nggplot(data = subjectwise_2dv,\n       aes(x = .data[[\"DV1_mean_per_sub\"]],\n           y = .data[[\"DV2_mean_per_sub\"]],\n           color = .data[[\"cuetype\"]],\n           # shape = .data[[\"stimintensity\"]],\n           # size = .5\n           )) +\n  geom_point(size = 2, alpha = .5  ) +\n  ylim(-50,50) +\n  xlim(-50,50) +\n  coord_fixed() +\n  scale_color_manual(values = c(\"cuetype-high\" =\"red\",\"cuetype-low\" =  \"#5D5C5C\"))+\n  geom_abline(intercept = 0, slope = 1, color = \"#373737\", linetype = \"dashed\", linewidth = .5) +\n  xlab(\"PE\") +\n  ylab(\"NPSpos\")+\n  theme(\n    axis.line = element_line(colour = \"grey50\"),\n    panel.background = element_blank(),\n    plot.subtitle = ggtext::element_textbox_simple(size = 1),\n    axis.text.x = element_text(size = 15),\n    axis.text.y = element_text(size = 15),\n    axis.title.x = element_text(size = 20),\n    axis.title.y = element_text(size = 20)\n\n  )## Warning: Removed 13 rows containing missing values (`geom_point()`).\nmodel.25 <- lmer(merged_NPSpe$NPSpos ~ merged_NPSpe$PE_mdl2 + (1|sub), data = merged_NPSpe)\nsummary(model.25)## Linear mixed model fit by REML. t-tests use Satterthwaite's method [\n## lmerModLmerTest]\n## Formula: merged_NPSpe$NPSpos ~ merged_NPSpe$PE_mdl2 + (1 | sub)\n##    Data: merged_NPSpe\n## \n## REML criterion at convergence: 20826.7\n## \n## Scaled residuals: \n##     Min      1Q  Median      3Q     Max \n## -5.4290 -0.5073 -0.0168  0.5202  5.5313 \n## \n## Random effects:\n##  Groups   Name        Variance Std.Dev.\n##  sub      (Intercept) 28.52    5.340   \n##  Residual             68.76    8.292   \n## Number of obs: 2922, groups:  sub, 54\n## \n## Fixed effects:\n##                       Estimate Std. Error        df t value Pr(>|t|)    \n## (Intercept)          6.501e+00  7.457e-01 5.305e+01   8.718 8.06e-12 ***\n## merged_NPSpe$PE_mdl2 3.876e-02  6.866e-03 2.896e+03   5.645 1.81e-08 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Correlation of Fixed Effects:\n##             (Intr)\n## mr_NPS$PE_2 -0.052"},{"path":"simulation_aryan.html","id":"test-relationship-between-pe-and-cue-type-and-stimintensity-06162023","chapter":"10 RL :: simulation Aryan","heading":"10.6.2 test relationship between PE and cue type and stimintensity (06/16/2023)","text":"","code":"\nmodel.PENPS <- lmer(NPSpos ~ PE_mdl2*cuetype*stimintensity + (1|sub), data = merged_NPSpe)\nsummary(model.PENPS)## Linear mixed model fit by REML. t-tests use Satterthwaite's method [\n## lmerModLmerTest]\n## Formula: NPSpos ~ PE_mdl2 * cuetype * stimintensity + (1 | sub)\n##    Data: merged_NPSpe\n## \n## REML criterion at convergence: 20816\n## \n## Scaled residuals: \n##     Min      1Q  Median      3Q     Max \n## -5.5455 -0.5260 -0.0153  0.5196  5.6086 \n## \n## Random effects:\n##  Groups   Name        Variance Std.Dev.\n##  sub      (Intercept) 28.32    5.321   \n##  Residual             68.21    8.259   \n## Number of obs: 2922, groups:  sub, 54\n## \n## Fixed effects:\n##                                               Estimate Std. Error         df\n## (Intercept)                                  7.590e+00  8.362e-01  8.488e+01\n## PE_mdl2                                     -1.962e-02  3.555e-02  2.887e+03\n## cuetypecuetype-low                           1.515e+00  9.025e-01  2.890e+03\n## stimintensitylow                            -1.753e+00  8.436e-01  2.883e+03\n## stimintensitymed                            -2.107e+00  6.415e-01  2.873e+03\n## PE_mdl2:cuetypecuetype-low                   2.818e-03  4.109e-02  2.887e+03\n## PE_mdl2:stimintensitylow                     4.253e-02  4.452e-02  2.883e+03\n## PE_mdl2:stimintensitymed                     1.800e-03  4.896e-02  2.870e+03\n## cuetypecuetype-low:stimintensitylow         -1.618e+00  1.252e+00  2.893e+03\n## cuetypecuetype-low:stimintensitymed          4.626e-01  1.160e+00  2.868e+03\n## PE_mdl2:cuetypecuetype-low:stimintensitylow -2.715e-02  5.295e-02  2.867e+03\n## PE_mdl2:cuetypecuetype-low:stimintensitymed  2.309e-02  5.654e-02  2.863e+03\n##                                             t value Pr(>|t|)    \n## (Intercept)                                   9.077 3.81e-14 ***\n## PE_mdl2                                      -0.552  0.58111    \n## cuetypecuetype-low                            1.678  0.09337 .  \n## stimintensitylow                             -2.077  0.03786 *  \n## stimintensitymed                             -3.284  0.00104 ** \n## PE_mdl2:cuetypecuetype-low                    0.069  0.94533    \n## PE_mdl2:stimintensitylow                      0.955  0.33953    \n## PE_mdl2:stimintensitymed                      0.037  0.97068    \n## cuetypecuetype-low:stimintensitylow          -1.293  0.19626    \n## cuetypecuetype-low:stimintensitymed           0.399  0.69017    \n## PE_mdl2:cuetypecuetype-low:stimintensitylow  -0.513  0.60816    \n## PE_mdl2:cuetypecuetype-low:stimintensitymed   0.408  0.68304    \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Correlation of Fixed Effects:\n##                                (Intr) PE_md2 ctypc- stmntnstyl stmntnstym\n## PE_mdl2                        -0.215                                    \n## ctypctyp-lw                    -0.224  0.174                             \n## stmntnstylw                    -0.252  0.234  0.273                      \n## stmntnstymd                    -0.329  0.314  0.308  0.365               \n## PE_mdl2:ct-                     0.184 -0.850 -0.565 -0.232     -0.276    \n## PE_mdl2:stmntnstyl              0.164 -0.780 -0.096  0.285     -0.217    \n## PE_mdl2:stmntnstym              0.141 -0.668 -0.096 -0.102      0.138    \n## ctypctyp-lw:stmntnstyl          0.168 -0.138 -0.747 -0.704     -0.249    \n## ctypctyp-lw:stmntnstym          0.180 -0.159 -0.741 -0.221     -0.557    \n## PE_mdl2:ctypctyp-lw:stmntnstyl -0.136  0.636  0.359 -0.222      0.181    \n## PE_mdl2:ctypctyp-lw:stmntnstym -0.121  0.572  0.337  0.095     -0.117    \n##                                PE_m2:- PE_mdl2:stmntnstyl PE_mdl2:stmntnstym\n## PE_mdl2                                                                     \n## ctypctyp-lw                                                                 \n## stmntnstylw                                                                 \n## stmntnstymd                                                                 \n## PE_mdl2:ct-                                                                 \n## PE_mdl2:stmntnstyl              0.635                                       \n## PE_mdl2:stmntnstym              0.554   0.566                               \n## ctypctyp-lw:stmntnstyl          0.434  -0.235              0.042            \n## ctypctyp-lw:stmntnstym          0.431   0.090             -0.099            \n## PE_mdl2:ctypctyp-lw:stmntnstyl -0.705  -0.807             -0.454            \n## PE_mdl2:ctypctyp-lw:stmntnstym -0.643  -0.478             -0.855            \n##                                ctypctyp-lw:stmntnstyl ctypctyp-lw:stmntnstym\n## PE_mdl2                                                                     \n## ctypctyp-lw                                                                 \n## stmntnstylw                                                                 \n## stmntnstymd                                                                 \n## PE_mdl2:ct-                                                                 \n## PE_mdl2:stmntnstyl                                                          \n## PE_mdl2:stmntnstym                                                          \n## ctypctyp-lw:stmntnstyl                                                      \n## ctypctyp-lw:stmntnstym          0.562                                       \n## PE_mdl2:ctypctyp-lw:stmntnstyl -0.068                 -0.295                \n## PE_mdl2:ctypctyp-lw:stmntnstym -0.226                 -0.264                \n##                                PE_mdl2:ctypctyp-lw:stmntnstyl\n## PE_mdl2                                                      \n## ctypctyp-lw                                                  \n## stmntnstylw                                                  \n## stmntnstymd                                                  \n## PE_mdl2:ct-                                                  \n## PE_mdl2:stmntnstyl                                           \n## PE_mdl2:stmntnstym                                           \n## ctypctyp-lw:stmntnstyl                                       \n## ctypctyp-lw:stmntnstym                                       \n## PE_mdl2:ctypctyp-lw:stmntnstyl                               \n## PE_mdl2:ctypctyp-lw:stmntnstym  0.520"},{"path":"simulation_aryan.html","id":"plot-the-relationship-between-pe-and-nps-as-a-function-of-cue","chapter":"10 RL :: simulation Aryan","heading":"10.6.3 plot the relationship between PE and NPS as a function of cue","text":"","code":"\nggplot(data = merged_NPSpe,\n       aes(x = .data[[\"PE_mdl2\"]],\n           y = .data[[\"NPSpos\"]],\n           color = .data[[\"cuetype\"]],\n           size = .5\n           )) +\n  geom_point(size = 2, alpha = .5  ) +\n  ylim(-150,150) +\n  xlim(-150,150) +\n  coord_fixed() +\n  scale_color_manual(values = c(\"cuetype-high\" =\"red\",\"cuetype-low\" =  \"#5D5C5C\"))+\n  geom_abline(intercept = 0, slope = 1, color = \"#373737\", linetype = \"dashed\", linewidth = .5) +\n  xlab(\"PE\") +\n  ylab(\"NPSpos\")+\n  theme(\n    axis.line = element_line(colour = \"grey50\"),\n    panel.background = element_blank(),\n    plot.subtitle = ggtext::element_textbox_simple(size = 1),\n    axis.text.x = element_text(size = 15),\n    axis.text.y = element_text(size = 15),\n    axis.title.x = element_text(size = 20),\n    axis.title.y = element_text(size = 20)\n\n  )"},{"path":"simulation_aryan.html","id":"plot-the-relationship-between-pe-and-nps-as-a-function-of-cue-and-stimulus-intensity","chapter":"10 RL :: simulation Aryan","heading":"10.6.4 plot the relationship between PE and NPS as a function of cue and stimulus intensity","text":"","code":""},{"path":"ch20_npssimulation.html","id":"ch20_npssimulation","chapter":"11 [model] NPSsimulation","heading":"11 [model] NPSsimulation","text":"","code":""},{"path":"ch20_npssimulation.html","id":"function-1","chapter":"11 [model] NPSsimulation","heading":"11.0.1 Function","text":"","code":""},{"path":"ch20_npssimulation.html","id":"nps-data","chapter":"11 [model] NPSsimulation","heading":"11.0.2 NPS data","text":"","code":""},{"path":"ch20_npssimulation.html","id":"behavioral-data","chapter":"11 [model] NPSsimulation","heading":"11.0.3 behavioral data","text":"","code":""},{"path":"ch20_npssimulation.html","id":"q.-within-pain-task-does-stimulus-intenisty-level-and-cue-level-significantly-predict-nps-dotproducts","chapter":"11 [model] NPSsimulation","heading":"Q. Within pain task, Does stimulus intenisty level and cue level significantly predict NPS dotproducts?","text":"","code":""},{"path":"ch20_npssimulation.html","id":"get-pain-relationship-controlling-for-cue-cuetype-expect","chapter":"11 [model] NPSsimulation","heading":"11.0.4 get pain relationship, controlling for cue, cuetype, expect","text":"\nMultilevel-modeling:\nlmer(NPSpos ~ CUE + STIM + EXPECT_demean + SES + (1| sub), data = pvc)\n","code":"\nmodel.stim <- lmer(event04_actual_angle ~\n                          STIM_linear +\n                          CUE_high_gt_low + STIM_quadratic+ EXPECT_demean +\n                          EXPECT_cmc +\n                          ses +\n                          (1|sub), data = df\n                    )\n# CUE_high_gt_low+STIM+EXPECT_demean\nsjPlot::tab_model(model.stim,\n                  title = \"Multilevel-modeling: \\nlmer(NPSpos ~ CUE + STIM + EXPECT_demean + SES + (1| sub), data = pvc)\",\n                  CSS = list(css.table = '+font-size: 12;'))\n# re.beta <- coef(model.stim)$unit[,\"x\"]\nfixEffect_expect <-as.data.frame(fixef(model.stim))\nrandEffect_expect <-as.data.frame(ranef(model.stim))\nntrials = 12\nlowintens = 48;\nmedintens = 49;\nhighintens = 50;\nstim <- 48:50\npainmean = 30      # average pain; arbitrary, on a 0 - 100 scale\npainslope = fixEffect_expect['STIM_linear',1]     # rise in pain per unit change in stim (per degree)\npainslope_stan = 0.33621048\nstdCoef.merMod <- function(object) {\n  sdy <- sd(getME(object,\"y\"))\n  sdx <- apply(getME(object,\"X\"), 2, sd)\n  sc <- fixef(object)*sdx/sdy\n  se.fixef <- coef(summary(object))[,\"Std. Error\"]\n  se <- se.fixef*sdx/sdy\n  return(data.frame(stdcoef=sc, stdse=se))\n}\nstdCoef.merMod(model.stim)##                     stdcoef       stdse\n## (Intercept)      0.00000000 0.000000000\n## STIM_linear      0.31648413 0.007848709\n## CUE_high_gt_low -0.02640086 0.009953683\n## STIM_quadratic   0.01621649 0.007849931\n## EXPECT_demean    0.22157672 0.009947333\n## EXPECT_cmc       0.69471095 0.034434185\n## sesses-03       -0.08777975 0.010153298\n## sesses-04       -0.09126342 0.010120143\n# # library(limma)\n\n# S <- rep(stim,times=ntrials) # stim\n# C <- rep(rep(c(1,-1), each = 3), times = 6) #cue\n# E <- painslope * (C + rnorm(length(C))) + painmean # pseudo nociception\n# Szscore <- (S - mean(S)) / sd(S)\n\ndf$S <- as.numeric(mapvalues(df$stimintensity,\n                                        from = c(\"low\", \"med\", \"high\"), c(48, 49, 50)))\ndf$C <- as.numeric(mapvalues(df$cuetype,\n                                        from = c(\"cuetype-low\", \"cuetype-high\"), c(-1, 1)))\ndf$E <- painslope * (df$C + rnorm(length(df$C))) + painmean\n\ndf$Szscore <- (df$S - mean(df$S, na.rm = TRUE)) / sd(df$S)\n\ndf$Pcalib = df$Szscore * painslope + painmean + rnorm(length(df$C))\n\nmodel.stim2pain <- lmer(Pcalib ~ S  + (1|sub), df)\n\nb_stim2pain = fixef(model.stim2pain)[2] #0.4126089 #36.5757\n\ndf$Sprime = df$Szscore * b_stim2pain + painmean # subjective pain experience, converted to a scale of 0-180, in order to match expectation ratings\n# df$Sprime = df$S * b_stim2pain\n\ndf <- df %>%\n  group_by(sub) %>%\n  mutate(E = as.numeric(E)) %>%\n  mutate(avg_E = mean(E, na.rm = TRUE)) %>%\n  mutate(E_demean = E - avg_E) %>%\n  mutate(E_cmc = avg_E - mean(avg_E))"},{"path":"ch20_npssimulation.html","id":"simulation-1","chapter":"11 [model] NPSsimulation","heading":"11.1 simulation **","text":"","code":"\nw = 0.7\n\nerror = rnorm(length(df$C))\n\ndf$P.assim <-  w * df$Sprime + (1 - w) * df$E + error\n\ndf$P.pe = df$Sprime - df$E + error\n\ndf$P.adapt <- 1\n\n  minimal.diff <- (df$Sprime - df$E)/std(df$Sprime) < b_stim2pain\n  large.diff <- (df$Sprime - df$E)/std(df$Sprime) > b_stim2pain\n  df$P.adapt[minimal.diff] <- w * df$Sprime[minimal.diff] + (1 - w) * df$E[minimal.diff] + error[minimal.diff]\n  df$P.adapt[large.diff] <- w * df$Sprime[large.diff]  + error[large.diff]"},{"path":"ch20_npssimulation.html","id":"lineplots-original","chapter":"11 [model] NPSsimulation","heading":"Lineplots Original","text":"","code":"## Automatically converting the following non-factors to factors: cue_name"},{"path":"ch20_npssimulation.html","id":"lineplots-p.assim","chapter":"11 [model] NPSsimulation","heading":"Lineplots P.assim","text":"","code":"## Automatically converting the following non-factors to factors: cue_name"},{"path":"ch20_npssimulation.html","id":"p.assim-demeaned_expect-_-cue-_-stim","chapter":"11 [model] NPSsimulation","heading":"11.1.1 P.assim ~ demeaned_expect _ cue _ stim","text":"","code":""},{"path":"ch20_npssimulation.html","id":"lineplots-p.pe","chapter":"11 [model] NPSsimulation","heading":"Lineplots P.pe","text":"","code":"## Automatically converting the following non-factors to factors: cue_name"},{"path":"ch20_npssimulation.html","id":"p.pe-demeaned_expect-_-cue-_-stim","chapter":"11 [model] NPSsimulation","heading":"11.1.2 P.pe ~ demeaned_expect _ cue _ stim","text":"","code":""},{"path":"ch20_npssimulation.html","id":"lineplots-p.adapt","chapter":"11 [model] NPSsimulation","heading":"Lineplots P.adapt","text":"","code":"## Automatically converting the following non-factors to factors: cue_name"},{"path":"ch20_npssimulation.html","id":"p.adapt-demeaned_expect-_-cue-_-stim","chapter":"11 [model] NPSsimulation","heading":"11.1.3 P.adapt ~ demeaned_expect _ cue _ stim","text":"","code":""},{"path":"fmri_time.html","id":"fmri_time","chapter":"fMRI timeseries","heading":"fMRI timeseries","text":"chapters, extract BOLD signal stimulus epoch, ROI course 42 TRs. cover 20s onset stimulus delivery. TTL2 TTL1 signals onset.TTL1 refers start rampup temperature, .e. baseline 32 starts rise intended temperatureTTL1 refers start rampup temperature, .e. baseline 32 starts rise intended temperatureTTL2 refers start plateau epoch, .e. onset intended temperature.TTL2 refers start plateau epoch, .e. onset intended temperature.Chapter @ref(ch51_fir_glasserTPJttl2) plots time series pain stimulus onset, using TTL2 referenceChapter @ref(ch51_fir_glasserTPJttl2) plots time series pain stimulus onset, using TTL2 referenceChapter @ref(fmritimeseries_tt1) plots time series pain stimulus onset, using TTL1 referenceChapter @ref(fmritimeseries_tt1) plots time series pain stimulus onset, using TTL1 reference","code":""},{"path":"fir_ttl2.html","id":"fir_ttl2","chapter":"12 fMRI :: FIR ~ task","heading":"12 fMRI :: FIR ~ task","text":"TODOload tsvconcatenateper time column, calculate mean varianceplot","code":"\nplot_timeseries_onefactor <-  function(df, iv1,  mean, error, xlab, ylab, ggtitle, color) {\n\nn_points <- 100  # Number of points for interpolation\n    g <- ggplot(\n      data = df,\n      aes(\n        x = .data[[iv1]],\n        y = .data[[mean]],\n        group = 1,\n        color = color\n      ),\n      cex.lab = 1.5,\n      cex.axis = 2,\n      cex.main = 1.5,\n      cex.sub = 1.5\n    ) +\n\n      geom_errorbar(aes(\n        ymin = (.data[[mean]] - .data[[error]]),\n        ymax = (.data[[mean]] + .data[[error]]),\n        color = color\n      ), width = .1, alpha=0.8) +\n\n      geom_line() +\n      geom_point(color=color) +\n      ggtitle(ggtitle) +\n      xlab(xlab) +\n      ylab(ylab) +\n\n      theme_classic() +\n\n      theme(aspect.ratio = .6) +\n      expand_limits(x = 3.25) +\n\n      scale_color_manual(\"\",\n                         values =  color) +\n            # scale_fill_manual(\"\",\n                         # values =  color) +\n      theme(\n        legend.position = c(.99, .99),\n        legend.justification = c(\"right\", \"top\"),\n        legend.box.just = \"right\",\n        legend.margin = margin(6, 6, 6, 6)\n      ) +\n      theme(legend.key = element_rect(fill = \"white\", colour = \"white\")) +\n      theme_bw()\n\n    return(g)\n  }"},{"path":"fir_ttl2.html","id":"parameters-todo-ignore","chapter":"12 fMRI :: FIR ~ task","heading":"12.1 parameters {TODO: ignore}","text":"","code":"\n# parameters\nmain_dir <- dirname(dirname(getwd()))\n\ndatadir <- file.path(main_dir, 'analysis/fmri/nilearn/glm/fir')\nanalysis_folder  = paste0(\"model52_iv-6cond_dv-firglasserSPM_ttl2\")\nanalysis_dir <-\n  file.path(main_dir,\n            \"analysis\",\n            \"mixedeffect\",\n            analysis_folder,\n            as.character(Sys.Date())) # nolint\ndir.create(analysis_dir,\n           showWarnings = FALSE,\n           recursive = TRUE)\nsave_dir <- analysis_dir"},{"path":"taskwise-stim-effect.html","id":"taskwise-stim-effect","chapter":"13 taskwise stim effect","heading":"13 taskwise stim effect","text":"","code":"\nroi_list <- c('rINS', 'TPJ', 'dACC', 'PHG', 'V1', 'SM', 'MT', 'RSC', 'LOC', 'FFC', 'PIT', 'pSTS', 'AIP', 'premotor')\nrun_types <- c(\"pain\", \"vicarious\", \"cognitive\")\n  plot_list <- list()\n  TR_length <- 42\nfor (ROI in roi_list) {\n\n    datadir = file.path(main_dir, \"analysis/fmri/spm/fir/ttl2par\")\n taskname = 'pain'\nexclude <- \"sub-0001\"\nfilename <- paste0(\"sub-*\",  \"*roi-\", ROI, \"_tr-42.csv\")\n  common_path <- Sys.glob(file.path(datadir, \"sub-*\",  filename\n  ))\n  filter_path <- common_path[!str_detect(common_path, pattern = exclude)]\n\ndf <- do.call(\"rbind.fill\", lapply(filter_path, FUN = function(files) {\n    read.table(files, header = TRUE, sep = \",\")\n    }))\n\nfor (run_type in run_types) {\n  print(run_type)\n  filtered_df <- df[!(df$condition == \"rating\" | df$condition == \"cue\" | df$runtype != run_type), ]\n\n  parsed_df <- filtered_df %>%\n    separate(condition, into = c(\"cue\", \"stim\"), sep = \"_\", remove = FALSE)\n  # --------------------- subset regions based on ROI ----------------------------\n  df_long <- pivot_longer(parsed_df, cols = starts_with(\"tr\"), names_to = \"tr_num\", values_to = \"tr_value\")\n\n  # ----------------------------- clean factor -----------------------------------\n  df_long$tr_ordered <- factor(\n          df_long$tr_num,\n          levels = c(paste0(\"tr\", 1:TR_length))\n      )\n  df_long$stim_ordered <- factor(\n          df_long$stim,\n          levels = c(\"stimH\", \"stimM\", \"stimL\")\n      )\n\n  # --------------------------- summary statistics -------------------------------\n  subjectwise <- meanSummary(df_long,\n                                        c(\"sub\",\"tr_ordered\", \"stim_ordered\"), \"tr_value\")\n  groupwise <- summarySEwithin(\n    data = subjectwise,\n    measurevar = \"mean_per_sub\",\n    withinvars = c( \"stim_ordered\", \"tr_ordered\"),\n    idvar = \"sub\"\n  )\n  groupwise$task <- run_type\n  # https://stackoverflow.com/questions/29402528/append-data-frames-together-in-a-for-loop/29419402\n\n  # ... Rest of your data processing code ...\n\n  # subset <- groupwise[groupwise$runtype == run_type, ]\n  LINEIV1 = \"tr_ordered\"\n  LINEIV2 = \"stim_ordered\"\n  MEAN = \"mean_per_sub_norm_mean\"\n  ERROR = \"se\"\n  dv_keyword = \"actual\"\n  sorted_indices <- order(groupwise$tr_ordered)\n  groupwise_sorted <- groupwise[sorted_indices, ]\n  p1 <- plot_timeseries_bar(groupwise_sorted,\n                            LINEIV1, LINEIV2, MEAN, ERROR,\n                            xlab = \"TRs\",\n                            ylab = paste0(ROI, \" activation (A.U.)\"),\n                            ggtitle = paste0(ROI, \": \",run_type, \" (N = \", length(unique(subjectwise$sub)),\") time series, Epoch - stimulus\"),\n                            color = c(\"#5f0f40\",\"#ae2012\", \"#fcbf49\"))\n  time_points <- seq(1, 0.46 * TR_length, 0.46)\n  #p1 <- p1 + scale_x_discrete(labels = setNames(time_points, colnames(df_long)[7:(7 + TR_length)])) + theme_classic()\n\n  plot_list[[run_type]] <- p1 + theme_classic()\n}\n\n  # --------------------------- plot three tasks -------------------------------\nlibrary(gridExtra)\nplot_list <- lapply(plot_list, function(plot) {\n  plot + theme(plot.margin = margin(5, 5, 5, 5))  # Adjust plot margins if needed\n})\ncombined_plot <- ggpubr::ggarrange(plot_list[[\"pain\"]],plot_list[[\"vicarious\"]],plot_list[[\"cognitive\"]],\n                  common.legend = TRUE,legend = \"bottom\", ncol = 3, nrow = 1,\n                  widths = c(3, 3, 3), heights = c(.5,.5,.5), align = \"v\")\ncombined_plot\nggsave(file.path(save_dir, paste0(\"roi-\", ROI,\"_epoch-stim_desc-highstimGTlowstim.png\")), combined_plot, width = 12, height = 4)\n\n}## [1] \"pain\"## \n## Attaching package: 'raincloudplots'## The following object is masked _by_ '.GlobalEnv':\n## \n##     GeomFlatViolin## [1] \"vicarious\"\n## [1] \"cognitive\"## \n## Attaching package: 'gridExtra'## The following object is masked from 'package:dplyr':\n## \n##     combine## [1] \"pain\"\n## [1] \"vicarious\"\n## [1] \"cognitive\"## [1] \"pain\"\n## [1] \"vicarious\"\n## [1] \"cognitive\"## [1] \"pain\"\n## [1] \"vicarious\"\n## [1] \"cognitive\"## [1] \"pain\"\n## [1] \"vicarious\"\n## [1] \"cognitive\"## [1] \"pain\"\n## [1] \"vicarious\"\n## [1] \"cognitive\"## [1] \"pain\"\n## [1] \"vicarious\"\n## [1] \"cognitive\"## [1] \"pain\"\n## [1] \"vicarious\"\n## [1] \"cognitive\"## [1] \"pain\"\n## [1] \"vicarious\"\n## [1] \"cognitive\"## [1] \"pain\"\n## [1] \"vicarious\"\n## [1] \"cognitive\"## [1] \"pain\"\n## [1] \"vicarious\"\n## [1] \"cognitive\"## [1] \"pain\"\n## [1] \"vicarious\"\n## [1] \"cognitive\"## [1] \"pain\"\n## [1] \"vicarious\"\n## [1] \"cognitive\"## [1] \"pain\"\n## [1] \"vicarious\"\n## [1] \"cognitive\""},{"path":"taskwise-stim-effect.html","id":"pca-subjectwise","chapter":"13 taskwise stim effect","heading":"13.0.1 PCA subjectwise","text":"","code":"\n# install.packages(\"ggplot2\")    # Install ggplot2 if you haven't already\n# install.packages(\"FactoMineR\") # Install FactoMineR if you haven't already\nlibrary(ggplot2)\nlibrary(FactoMineR)\nrun_types = c(\"pain\")\nfor (run_type in run_types) {\n  print(run_type)\n  filtered_df <- df[!(df$condition == \"rating\" | df$condition == \"cue\" | df$runtype != run_type), ]\n\n  parsed_df <- filtered_df %>%\n    separate(condition, into = c(\"cue\", \"stim\"), sep = \"_\", remove = FALSE)\n  # --------------------- subset regions based on ROI ----------------------------\n  df_long <- pivot_longer(parsed_df, cols = starts_with(\"tr\"), names_to = \"tr_num\", values_to = \"tr_value\")\n\n  # ----------------------------- clean factor -----------------------------------\n  df_long$tr_ordered <- factor(\n          df_long$tr_num,\n          levels = c(paste0(\"tr\", 1:TR_length))\n      )\n  df_long$stim_ordered <- factor(\n          df_long$stim,\n          levels = c(\"stimH\", \"stimM\", \"stimL\")\n      )\n\n  # --------------------------- summary statistics -------------------------------\n  subjectwise <- meanSummary(df_long,\n                                        c(\"sub\",\"tr_ordered\", \"stim_ordered\"), \"tr_value\")\n\n# Assuming your original dataframe is named 'df'\n\n# Convert the dataframe to wide format\ndf_wide <- pivot_wider(subjectwise,\n                       id_cols = c(\"tr_ordered\", \"stim_ordered\"),\n                       names_from = c(\"sub\"),\n                       values_from = \"mean_per_sub\")\n\n# df_wide <- pivot_wider(subjectwise,\n#                        id_cols = c(\"sub\", \"ROIindex\",\"stim_ordered\"),\n#                        names_from = \"tr_ordered\",\n#                        values_from = \"mean_per_sub\")\nstim_high.df <- df_wide[df_wide$stim_ordered == \"stimH\",]\nstim_med.df <- df_wide[df_wide$stim_ordered == \"stimM\",]\nstim_low.df <- df_wide[df_wide$stim_ordered == \"stimL\",]\n# selected_columns <- subset(stim_high.df, select = 2:(ncol(stim_high.df) - 1))\nmeanhighdf <- data.frame(subset(stim_high.df, select = 3:(ncol(stim_high.df) - 1)))\nhigh.pca_result <- prcomp(meanhighdf)\nhigh.pca_scores <- as.data.frame(high.pca_result$x)\n# Access the proportion of variance explained by each principal component\nhigh.variance_explained <- high.pca_result$sdev^2 / sum(high.pca_result$sdev^2)\nplot(high.variance_explained)\n# Access the standard deviations of each principal component\nhigh.stdev <- high.pca_result$sdev\n\nmeanmeddf <- data.frame(subset(stim_med.df, select = 3:(ncol(stim_med.df) - 1)))\nmed.pca <- prcomp(meanmeddf)\nmed.pca_scores <- as.data.frame(med.pca$x)\n\nmeanlowdf <- data.frame(subset(stim_low.df, select = 3:(ncol(stim_low.df) - 1)))\nlow.pca <- prcomp(meanlowdf)\nlow.pca_scores <- as.data.frame(low.pca$x)\nlibrary(plotly)  # You can use plotly to create an interactive 3D plot\n# plot_ly(high.pca_scores, x = ~PC1, y = ~PC2, z = ~PC3, type = \"scatter3d\", mode = \"markers\")\n# plot_ly(low.pca_scores, x = ~PC1, y = ~PC2, z = ~PC3, type = \"scatter3d\", mode = \"markers\")\ncombined_pca_scores <- rbind(high.pca_scores, med.pca_scores, low.pca_scores)\n\n# Add a new column to indicate the stim_ordered category (high_stim or low_stim)\ncombined_pca_scores$stim_ordered <- c(rep(\"high_stim\", nrow(high.pca_scores)),\n                                      rep(\"med_stim\", nrow(med.pca_scores)),\n                                      rep(\"low_stim\", nrow(low.pca_scores)))\n\n# Create the 3D PCA plot\nplot_ly(combined_pca_scores, x = ~PC1, y = ~PC2, z = ~PC3, type = \"scatter3d\", mode = \"markers\",\n        color = ~stim_ordered)\n# data_matrix <- groupwise[groupwise$stim_ordered == \"high_stim\",c(\"tr_ordered\", \"mean_per_sub_norm_mean\")]\n# sorted_indices <- order(data_matrix$tr_ordered)\n# df_ordered <- data_matrix[sorted_indices, ]\n# pca_result <- PCA(data_matrix$mean_per_sub_norm_mean)\n# datapoints <- df$datapoints\n}## [1] \"pain\"## \n## Attaching package: 'plotly'## The following object is masked from 'package:ggplot2':\n## \n##     last_plot## The following objects are masked from 'package:plyr':\n## \n##     arrange, mutate, rename, summarise## The following object is masked from 'package:reshape':\n## \n##     rename## The following object is masked from 'package:stats':\n## \n##     filter## The following object is masked from 'package:graphics':\n## \n##     layout\nplot_ly(combined_pca_scores, x = ~PC1, y = ~PC2, z = ~PC3, type = \"scatter3d\", mode = \"markers\",\n        color = ~stim_ordered)"},{"path":"taskwise-stim-effect.html","id":"pca-groupwise","chapter":"13 taskwise stim effect","heading":"13.0.2 PCA groupwise","text":"","code":"\n# install.packages(\"ggplot2\")    # Install ggplot2 if you haven't already\n# install.packages(\"FactoMineR\") # Install FactoMineR if you haven't already\nlibrary(ggplot2)\nlibrary(FactoMineR)\n\n\n\n# Assuming your original dataframe is named 'df'\n\n# Convert the dataframe to wide format\ndf_wide.group <- pivot_wider(subjectwise,\n                       id_cols = c(\"tr_ordered\", \"stim_ordered\"),\n                       names_from = \"sub\",\n                       values_from = \"mean_per_sub\")\n# ------\n# data_matrix <- groupwise[groupwise$stim_ordered == \"high_stim\",c(\"tr_ordered\", \"mean_per_sub_norm_mean\")]\n# sorted_indices <- order(data_matrix$tr_ordered)\n# df_ordered <- data_matrix[sorted_indices, ]\n# datapoints <- df_ordered$mean_per_sub_norm_mean\n# data_df <- data.frame(Dim1 = datapoints, Dim2 = datapoints, Dim3 = datapoints)\n# pca <- prcomp(data_df)\n# pca_scores <- as.data.frame(pca$x)\n# plot_ly(pca_scores, x = ~PC1, y = ~PC2, z = ~PC3, type = \"scatter3d\", mode = \"markers\")\n# -------\nstim_high.df <- df_wide[df_wide$stim_ordered == \"stimH\",]\nstim_low.df <- df_wide[df_wide$stim_ordered == \"stimL\",]\n# selected_columns <- subset(stim_high.df, select = 2:(ncol(stim_high.df) - 1))\nmeanhighdf <- data.frame(subset(stim_high.df, select = 3:(ncol(stim_high.df) - 1)))\nhigh.pca <- prcomp(meanhighdf)\nhigh.pca_scores <- as.data.frame(high.pca$x)\n\nmeanlowdf <- data.frame(subset(stim_low.df, select = 3:(ncol(stim_low.df) - 1)))\nlow.pca <- prcomp(meanlowdf)\nlow.pca_scores <- as.data.frame(low.pca$x)\nlibrary(plotly)  # You can use plotly to create an interactive 3D plot\n# plot_ly(high.pca_scores, x = ~PC1, y = ~PC2, z = ~PC3, type = \"scatter3d\", mode = \"markers\")\n# plot_ly(low.pca_scores, x = ~PC1, y = ~PC2, z = ~PC3, type = \"scatter3d\", mode = \"markers\")\ncombined_pca_scores <- rbind(high.pca_scores, low.pca_scores)\n\n# Add a new column to indicate the stim_ordered category (high_stim or low_stim)\ncombined_pca_scores$stim_ordered <- c(rep(\"high_stim\", nrow(high.pca_scores)), rep(\"low_stim\", nrow(low.pca_scores)))\n\n# Create the 3D PCA plot\nplot_ly(combined_pca_scores, x = ~PC1, y = ~PC2, z = ~PC3, type = \"scatter3d\", mode = \"markers\",\n        color = ~stim_ordered)## Warning in RColorBrewer::brewer.pal(N, \"Set2\"): minimal value for n is 3, returning requested palette with 3 different levels\n\n## Warning in RColorBrewer::brewer.pal(N, \"Set2\"): minimal value for n is 3, returning requested palette with 3 different levels\n# data_matrix <- groupwise[groupwise$stim_ordered == \"high_stim\",c(\"tr_ordered\", \"mean_per_sub_norm_mean\")]\n# sorted_indices <- order(data_matrix$tr_ordered)\n# df_ordered <- data_matrix[sorted_indices, ]\n# pca_result <- PCA(data_matrix$mean_per_sub_norm_mean)\n# datapoints <- df$datapoints\n\n# Assuming you have a dataframe named 'data' containing the 20 data points, 'x' and 'y' values, and corresponding standard deviations 'sd'\n\n# Load the ggplot2 library\n# install.packages(\"ggplot2\")\nlibrary(ggplot2)\n\n# Create the plot\n# y = \"mean_per_sub_mean\"z\n# combined_pca <- combined_pca_scores %>%\n  # mutate(group_index = group_indices(., stim_ordered))\n\ncombined_pca <- combined_pca_scores %>%\n  group_by(stim_ordered) %>%\n  mutate(group_index = row_number())\nggplot(combined_pca, aes(x=group_index,y=PC1, group = stim_ordered, colour=stim_ordered)) +\n  stat_smooth(method=\"loess\", span=0.25, se=TRUE, aes(color=stim_ordered), alpha=0.3) +\n  theme_bw()## `geom_smooth()` using formula = 'y ~ x'\n# Assuming you have a dataframe named 'data' containing the 20 data points, 'x' and 'y' values, and corresponding standard deviations 'sd'\n\n# Load the ggplot2 library\n# install.packages(\"ggplot2\")\nlibrary(ggplot2)\n\n# Create the plot\n# y = \"mean_per_sub_mean\"z\nggplot(groupwise, aes(x=tr_ordered,y=mean_per_sub_mean, group = stim_ordered, colour=stim_ordered)) +\n  stat_smooth(method=\"loess\", span=0.25, se=TRUE, aes(color=stim_ordered), alpha=0.3) +\n  theme_bw()## `geom_smooth()` using formula = 'y ~ x'\n# ggplot(data=groupwise, aes(x=tr_ordered, y=mean_per_sub_mean, ymin=se, ymax=se, fill=stim_ordered, linetype=stim_ordered)) +\n#  geom_line() +\n#  geom_ribbon(alpha=0.5)\n# Assuming you have a dataframe named 'data' containing the 20 mean data points and corresponding standard errors\n# 'x' represents the x-values (e.g., time points)\n# 'mean_y' represents the mean y-values\n# 'se_y' represents the standard errors of the mean y-values\n\n# Load the ggplot2 library\n# install.packages(\"ggplot2\")\nlibrary(ggplot2)\n# groupwise$x <- as.numeric(groupwise$x)\n#\n# # Sort the dataframe by the 'x' variable (if it's not already sorted)\n# data <- data[order(data$x), ]\n\n# Create the plot\n# Create the plot with custom span and smoothing method\nggplot(groupwise, aes(x=tr_ordered,y=mean_per_sub_mean)) +\n  geom_line() +                                   # Plot the smooth line for the mean\n  geom_ribbon(aes(ymin = mean_per_sub_mean - se, ymax = mean_per_sub_mean + se), alpha = 0.3) + # Add the ribbon for standard error\n  geom_smooth(method = \"loess\", span = 0.1, se = FALSE) +       # Add the loess smoothing curve\n  labs(x = \"X-axis Label\", y = \"Y-axis Label\", title = \"Smooth Line with Standard Error Ribbon\") +\n  theme_minimal()## `geom_smooth()` using formula = 'y ~ x'"},{"path":"taskwise-stim-effect.html","id":"dep-epoch-stim-high-cue-vs-low-cue","chapter":"13 taskwise stim effect","heading":"13.1 DEP: epoch: stim, high cue vs low cue","text":"","code":"\n# filtered_df <- subset(df, condition != \"rating\")\nfiltered_df <- df[!(df$condition == \"rating\" | df$condition == \"cue\"), ]\n\nparsed_df <- filtered_df %>%\n  separate(condition, into = c(\"cue\", \"stim\"), sep = \"_\", remove = FALSE)\n\nTR_length <- 42\n# --------------------- subset regions based on ROI ----------------------------\ndf_long <- pivot_longer(parsed_df, cols = starts_with(\"tr\"), names_to = \"tr_num\", values_to = \"tr_value\")\n\n# ----------------------------- clean factor -----------------------------------\ndf_long$tr_ordered <- factor(\n        df_long$tr_num,\n        levels = c(paste0(\"tr\", 1:TR_length))\n    )\ndf_long$cue_ordered <- factor(\n        df_long$cue,\n        levels = c(\"cueH\",\"cueL\")\n    )\n\n# --------------------------- summary statistics -------------------------------\nsubjectwise <- meanSummary(df_long,\n                                      c(\"sub\", \"tr_ordered\", \"cue_ordered\"), \"tr_value\")\ngroupwise <- summarySEwithin(\n  data = subjectwise,\n  measurevar = \"mean_per_sub\",\n  withinvars = c(\"cue_ordered\", \"tr_ordered\"),\n  idvar = \"sub\"\n)\ngroupwise$task <- taskname\n# https://stackoverflow.com/questions/29402528/append-data-frames-together-in-a-for-loop/29419402\n\n# --------------------------------- plot ---------------------------------------\nLINEIV1 = \"tr_ordered\"\nLINEIV2 = \"cue_ordered\"\nMEAN = \"mean_per_sub_norm_mean\"\nERROR = \"se\"\ndv_keyword = \"actual\"\nsorted_indices <- order(groupwise$tr_ordered)\ngroupwise_sorted <- groupwise[sorted_indices, ]\np1 = plot_timeseries_bar(groupwise,\n               LINEIV1, LINEIV2, MEAN, ERROR,  xlab = \"Runs\" , ylab= \"Epoch: stimulus, High cue vs. Low cue\", ggtitle=\"time_series\", color=c(\"red\", \"blue\"))\ntime_points <- seq(1, 0.46 * TR_length, 0.46)\np1 + scale_x_discrete(labels = setNames(time_points, colnames(df_long)[7:7+TR_length]))+ theme_classic()"},{"path":"taskwise-stim-effect.html","id":"taskwise-cue-effect","chapter":"13 taskwise stim effect","heading":"13.2 taskwise cue effect","text":"","code":"\nroi_list <- c('rINS', 'TPJ', 'dACC', 'PHG', 'V1', 'SM', 'MT', 'RSC', 'LOC', 'FFC', 'PIT', 'pSTS', 'AIP', 'premotor')\nfor (ROI in roi_list) {\n\n    datadir = file.path(main_dir, \"analysis/fmri/spm/fir/ttl2par\")\n# taskname = 'pain'\nexclude <- \"sub-0001\"\nfilename <- paste0(\"sub-*\",  \"*roi-\", ROI, \"_tr-42.csv\")\n  common_path <- Sys.glob(file.path(datadir, \"sub-*\",  filename\n  ))\n  filter_path <- common_path[!str_detect(common_path, pattern = exclude)]\n\ndf <- do.call(\"rbind.fill\", lapply(filter_path, FUN = function(files) {\n    read.table(files, header = TRUE, sep = \",\")\n    }))\n\n\nrun_types <- c(\"pain\", \"vicarious\", \"cognitive\")\n  plot_list <- list()\n  TR_length <- 42\nfor (run_type in run_types) {\n  filtered_df <- df[!(df$condition == \"rating\" | df$condition == \"cue\" | df$runtype != run_type), ]\n\n  parsed_df <- filtered_df %>%\n    separate(condition, into = c(\"cue\", \"stim\"), sep = \"_\", remove = FALSE)\n  # --------------------- subset regions based on ROI ----------------------------\n  df_long <- pivot_longer(parsed_df, cols = starts_with(\"tr\"), names_to = \"tr_num\", values_to = \"tr_value\")\n\n  # ----------------------------- clean factor -----------------------------------\n  df_long$tr_ordered <- factor(\n          df_long$tr_num,\n          levels = c(paste0(\"tr\", 1:TR_length))\n      )\ndf_long$cue_ordered <- factor(\n        df_long$cue,\n        levels = c(\"cueH\",\"cueL\")\n    )\n\n  # --------------------------- summary statistics -------------------------------\n  subjectwise <- meanSummary(df_long,\n                                        c(\"sub\",\"tr_ordered\", \"cue_ordered\"), \"tr_value\")\n  groupwise <- summarySEwithin(\n    data = subjectwise,\n    measurevar = \"mean_per_sub\",\n    withinvars = c( \"cue_ordered\", \"tr_ordered\"),\n    idvar = \"sub\"\n  )\n  groupwise$task <- run_type\n  # https://stackoverflow.com/questions/29402528/append-data-frames-together-in-a-for-loop/29419402\n\n  # ... Rest of your data processing code ...\n\n  # subset <- groupwise[groupwise$runtype == run_type, ]\n  LINEIV1 = \"tr_ordered\"\n  LINEIV2 = \"cue_ordered\"\n  MEAN = \"mean_per_sub_norm_mean\"\n  ERROR = \"se\"\n  dv_keyword = \"actual\"\n  sorted_indices <- order(groupwise$tr_ordered)\n  groupwise_sorted <- groupwise[sorted_indices, ]\n  p1 <- plot_timeseries_bar(groupwise_sorted,\n                            LINEIV1, LINEIV2, MEAN, ERROR,\n                            xlab = \"TRs\",\n                            ylab = paste0(ROI, \" activation (A.U.)\"),\n                            ggtitle = paste0(run_type, \" time series, Epoch - stimulus\"),\n                            color =c(\"red\", \"blue\"))\n  time_points <- seq(1, 0.46 * TR_length, 0.46)\n  #p1 <- p1 + scale_x_discrete(labels = setNames(time_points, colnames(df_long)[7:(7 + TR_length)])) + theme_classic()\n\n  plot_list[[run_type]] <- p1 + theme_classic()\n}\n\n  # --------------------------- plot three tasks -------------------------------\nlibrary(gridExtra)\nplot_list <- lapply(plot_list, function(plot) {\n  plot + theme(plot.margin = margin(5, 5, 5, 5))  # Adjust plot margins if needed\n})\ncombined_plot <- ggpubr::ggarrange(plot_list[[\"pain\"]],plot_list[[\"vicarious\"]],plot_list[[\"cognitive\"]],\n                  common.legend = TRUE,legend = \"bottom\", ncol = 3, nrow = 1,\n                  widths = c(3, 3, 3), heights = c(.5,.5,.5), align = \"v\")\ncombined_plot\nggsave(file.path(save_dir, paste0(\"roi-\", ROI, \"_epoch-stim_desc-highcueGTlowcue.png\")), combined_plot, width = 12, height = 4)\n}"},{"path":"taskwise-stim-effect.html","id":"epoch-stim-rating","chapter":"13 taskwise stim effect","heading":"13.3 epoch: stim, rating","text":"","code":""},{"path":"taskwise-stim-effect.html","id":"epoch-6-cond","chapter":"13 taskwise stim effect","heading":"13.4 epoch: 6 cond","text":"","code":"\n# ------------------------------------------------------------------------------\n#                       epoch stim, high cue vs low cue\n# ------------------------------------------------------------------------------\n# --------------------- subset regions based on ROI ----------------------------\n\n# ----------------------------- clean factor -----------------------------------\ndf_long$tr_ordered <- factor(\n        df_long$tr_num,\n        levels = c(paste0(\"tr\", 1:TR_length))\n    )\ndf_long$cue_ordered <- factor(\n        df_long$cue,\n        levels = c(\"cueH\", \"cueL\")\n    )\ndf_long$stim_ordered <- factor(\n        df_long$stim,\n        levels = c(\"stimH\", \"stimM\", \"stimL\")\n    )\n\ndf_long$sixcond <- factor(\n        df_long$condition,\n        levels = c(\"cueH_stimH\", \"cueL_stimH\",\n                   \"cueH_stimM\", \"cueL_stimM\",\n                   \"cueH_stimL\", \"cueL_stimL\")\n)\n# --------------------------- summary statistics -------------------------------\nsubjectwise <- meanSummary(df_long,\n                                      c(\"sub\", \"tr_ordered\", \"sixcond\"), \"tr_value\")\ngroupwise <- summarySEwithin(\n  data = subjectwise,\n  measurevar = \"mean_per_sub\",\n  withinvars = c(\"sixcond\", \"tr_ordered\"),\n  idvar = \"sub\"\n)\ngroupwise$task <- taskname\n# https://stackoverflow.com/questions/29402528/append-data-frames-together-in-a-for-loop/29419402\n\n# --------------------------------- plot ---------------------------------------\nLINEIV1 = \"tr_ordered\"\nLINEIV2 = \"sixcond\"\nMEAN = \"mean_per_sub_norm_mean\"\nERROR = \"se\"\ndv_keyword = \"actual\"\nsorted_indices <- order(groupwise$tr_ordered)\ngroupwise_sorted <- groupwise[sorted_indices, ]\np3H = plot_timeseries_bar(groupwise,\n               LINEIV1, LINEIV2, MEAN, ERROR,  xlab = \"Runs\" , ylab= \"Epoch: stimulus, High cue vs. Low cue\", ggtitle=paste0(\"High intensity - Low cue vs. High cue (N = \", unique(groupwise$N), \")\" ), color=c(\"red\",\"#5f0f40\",\"gray\", \"gray\", \"gray\", \"gray\"))\ntime_points <- seq(1, 0.46 * TR_length, 0.46)\np3H + scale_x_discrete(labels = setNames(time_points, colnames(df_long)[7:7+TR_length]))+ theme_classic()\np3H + theme_classic()\np3M = plot_timeseries_bar(groupwise,\n               LINEIV1, LINEIV2, MEAN, ERROR,  xlab = \"Runs\" , ylab= \"Epoch: stimulus, High cue vs. Low cue\", ggtitle=paste0(\"Medium intensity - Low cue vs. High cue (N = \", unique(groupwise$N), \")\"), color=c(\"#d6d6d6\",\"#d6d6d6\",\"#bc3908\", \"#f6aa1c\", \"gray\", \"gray\"))\ntime_points <- seq(1, 0.46 * TR_length, 0.46)\np3M + scale_x_discrete(labels = setNames(time_points, colnames(df_long)[7:7+TR_length]))+ theme_classic()\np3M + theme_classic()\np3L = plot_timeseries_bar(groupwise,\n               LINEIV1, LINEIV2, MEAN, ERROR,  xlab = \"Runs\" , ylab= \"Epoch: stimulus, High cue vs. Low cue\", ggtitle=paste0(\"Low intensity - Low cue vs. High cue (N = \", unique(groupwise$N), \")\"), color=c(\"gray\",\"gray\",\"gray\", \"gray\", \"#2541b2\", \"#00a6fb\"))\ntime_points <- seq(1, 0.46 * TR_length, 0.46)\np3L + scale_x_discrete(labels = setNames(time_points, colnames(df_long)[7:7+TR_length]))+ theme_classic()\np3L + theme_classic()"},{"path":"taskwise-6-cond-effect.html","id":"taskwise-6-cond-effect","chapter":"14 taskwise 6 cond effect","heading":"14 taskwise 6 cond effect","text":"","code":"\n# ------------------------------------------------------------------------------\n#                       epoch stim, high cue vs low cue\n# ------------------------------------------------------------------------------\n# --------------------- subset regions based on ROI ----------------------------\nrun_types <- c(\"pain\", \"vicarious\", \"cognitive\")\n\n  TR_length <- 42\nfor (run_type in run_types) {\n  filtered_df <- df[!(df$condition == \"rating\" | df$condition == \"cue\" | df$runtype != run_type), ]\nplot_list <- list()\n\n  parsed_df <- filtered_df %>%\n    separate(condition, into = c(\"cue\", \"stim\"), sep = \"_\", remove = FALSE)\n  # --------------------- subset regions based on ROI ----------------------------\n  df_long <- pivot_longer(parsed_df, cols = starts_with(\"tr\"), names_to = \"tr_num\", values_to = \"tr_value\")\n\n# ----------------------------- clean factor -----------------------------------\ndf_long$tr_ordered <- factor(\n        df_long$tr_num,\n        levels = c(paste0(\"tr\", 1:TR_length))\n    )\ndf_long$cue_ordered <- factor(\n        df_long$cue,\n        levels = c(\"cueH\", \"cueL\")\n    )\ndf_long$stim_ordered <- factor(\n        df_long$stim,\n        levels = c(\"stimH\", \"stimM\", \"stimL\")\n    )\n\ndf_long$sixcond <- factor(\n        df_long$condition,\n        levels = c(\"cueH_stimH\", \"cueL_stimH\",\n                   \"cueH_stimM\", \"cueL_stimM\",\n                   \"cueH_stimL\", \"cueL_stimL\")\n)\n# --------------------------- summary statistics -------------------------------\nsubjectwise <- meanSummary(df_long,\n                                      c(\"sub\", \"tr_ordered\", \"sixcond\"), \"tr_value\")\ngroupwise <- summarySEwithin(\n  data = subjectwise,\n  measurevar = \"mean_per_sub\",\n  withinvars = c(\"sixcond\", \"tr_ordered\"),\n  idvar = \"sub\"\n)\ngroupwise$task <- taskname\n# https://stackoverflow.com/questions/29402528/append-data-frames-together-in-a-for-loop/29419402\n\n# --------------------------------- plot ---------------------------------------\nLINEIV1 = \"tr_ordered\"\nLINEIV2 = \"sixcond\"\nMEAN = \"mean_per_sub_norm_mean\"\nERROR = \"se\"\ndv_keyword = \"actual\"\nsorted_indices <- order(groupwise$tr_ordered)\ngroupwise_sorted <- groupwise[sorted_indices, ]\np3H = plot_timeseries_bar(groupwise,\n               LINEIV1, LINEIV2, MEAN, ERROR,  xlab = \"Runs\" , ylab= \"Epoch: stimulus, High cue vs. Low cue\", ggtitle=paste0(\"High intensity - Low cue vs. High cue (N = \", unique(groupwise$N), \")\" ), color=c(\"red\",\"#5f0f40\",\"gray\", \"gray\", \"gray\", \"gray\"))\ntime_points <- seq(1, 0.46 * TR_length, 0.46)\n# p3H + scale_x_discrete(labels = setNames(time_points, colnames(df_long)[7:7+TR_length]))+ theme_classic()\np3H + theme_classic()\nplot_list[[\"H\"]] <- p3H + theme_classic()\n\np3M = plot_timeseries_bar(groupwise,\n               LINEIV1, LINEIV2, MEAN, ERROR,  xlab = \"Runs\" , ylab= \"Epoch: stimulus, High cue vs. Low cue\", ggtitle=paste0(\"Medium intensity - Low cue vs. High cue (N = \", unique(groupwise$N), \")\"), color=c(\"#d6d6d6\",\"#d6d6d6\",\"#bc3908\", \"#f6aa1c\", \"gray\", \"gray\"))\ntime_points <- seq(1, 0.46 * TR_length, 0.46)\n# p3M + scale_x_discrete(labels = setNames(time_points, colnames(df_long)[7:7+TR_length]))+ theme_classic()\nplot_list[[\"M\"]] <- p3M + theme_classic()\n\np3L = plot_timeseries_bar(groupwise,\n               LINEIV1, LINEIV2, MEAN, ERROR,  xlab = \"Runs\" , ylab= \"Epoch: stimulus, High cue vs. Low cue\", ggtitle=paste0(\"Low intensity - Low cue vs. High cue (N = \", unique(groupwise$N), \")\"), color=c(\"gray\",\"gray\",\"gray\", \"gray\", \"#2541b2\", \"#00a6fb\"))\ntime_points <- seq(1, 0.46 * TR_length, 0.46)\n# p3L + scale_x_discrete(labels = setNames(time_points, colnames(df_long)[7:7+TR_length]))+ theme_classic()\nplot_list[[\"L\"]] <- p3L + theme_classic()\n\n\n  # --------------------------- plot three tasks -------------------------------\nlibrary(gridExtra)\nplot_list <- lapply(plot_list, function(plot) {\n  plot + theme(plot.margin = margin(5, 5, 5, 5))  # Adjust plot margins if needed\n})\ncombined_plot <- ggpubr::ggarrange(plot_list[[\"H\"]],plot_list[[\"M\"]],plot_list[[\"L\"]],\n                  common.legend = FALSE,legend = \"bottom\", ncol = 3, nrow = 1,\n                  widths = c(3, 3, 3), heights = c(.5,.5,.5), align = \"v\")\ncombined_plot\nggsave(file.path(save_dir, paste0(\"taskwise-\",run_type, \"_epoch-stim_desc-stimcuecomparison.png\")), combined_plot, width = 12, height = 4)\n}"},{"path":"fmritimeseries_tt1.html","id":"fmritimeseries_tt1","chapter":"15 fMRI :: FIR ~ task TTL1","heading":"15 fMRI :: FIR ~ task TTL1","text":"purpose notebook plot BOLD timeseries SPM FIR model.\nTODOload tsvconcatenateper time column, calculate mean varianceplot","code":""},{"path":"fmritimeseries_tt1.html","id":"references","chapter":"15 fMRI :: FIR ~ task TTL1","heading":"15.1 references","text":"https://stackoverflow.com/questions/29402528/append-data-frames-together----loop/29419402","code":"\nplot_timeseries_onefactor <-\n  function(df, iv1, mean, error, xlab, ylab, ggtitle, color) {\n    n_points <- 100 # Number of points for interpolation\n\n    g <- ggplot(\n      data = df,\n      aes(\n        x = .data[[iv1]],\n        y = .data[[mean]],\n        group = 1,\n        color = color\n      ),\n      cex.lab = 1.5,\n      cex.axis = 2,\n      cex.main = 1.5,\n      cex.sub = 1.5\n    ) +\n      geom_errorbar(aes(\n        ymin = (.data[[mean]] - .data[[error]]),\n        ymax = (.data[[mean]] + .data[[error]]),\n        color = color\n      ),\n      width = .1,\n      alpha = 0.8) +\n      geom_line() +\n      geom_point(color = color) +\n      ggtitle(ggtitle) +\n      xlab(xlab) +\n      ylab(ylab) +\n      theme_classic() +\n      theme(aspect.ratio = .6) +\n      expand_limits(x = 3.25) +\n      scale_color_manual(\"\",\n                         values = color) +\n      # theme(\n      #   legend.position = c(.99, .99),\n      #   legend.justification = c(\"right\", \"top\"),\n      #   legend.box.just = \"right\",\n      #   legend.margin = margin(6, 6, 6, 6)\n      # ) +\n      # theme(legend.key = element_rect(fill = \"white\", colour = \"white\")) +\n      theme_bw()\n\n    return(g)\n  }\nplot_timeseries_bar_SANDBOX <-\n  function(df, iv1, iv2, mean, error, xlab, ylab, ggtitle, color) {\n    n_points <- 100 # Number of points for interpolation\n\n    ## Removing \"tr\" from the column values\n    df[[iv1]] <- as.numeric(sub(\"tr\", \"\", df[[iv1]]))\n\n    g <- ggplot(\n      data = df,\n      aes(\n        x = .data[[iv1]],\n        y = .data[[mean]],\n        group = factor(.data[[iv2]]),\n        color = factor(.data[[iv2]])\n      ),\n      cex.lab = 1.5,\n      cex.axis = 2,\n      cex.main = 1.5,\n      cex.sub = 1.5\n    ) +\n      geom_errorbar(aes(\n        ymin = (.data[[mean]] - .data[[error]]),\n        ymax = (.data[[mean]] + .data[[error]]),\n        fill =  factor(.data[[iv2]])\n      ),\n      width = .1,\n      alpha = 0.8) +\n      geom_line() +\n      geom_point() +\n      ggtitle(ggtitle) +\n      xlab(xlab) +\n      ylab(ylab) +\n      theme_classic() +\n      expand_limits(x = 3.25) +\n      scale_color_manual(\"\",\n                         values = color) +\n      scale_fill_manual(\"\",\n                        values = color) +\n      theme(\n        aspect.ratio = .6,\n        text = element_text(size = 20),\n        axis.title.x = element_text(size = 24),\n        axis.title.y = element_text(size = 24),\n        legend.position = c(.99, .99),\n        legend.justification = c(\"right\", \"top\"),\n        legend.box.just = \"right\",\n        legend.margin = margin(6, 6, 6, 6)\n      ) +\n      theme(legend.key = element_rect(fill = \"white\", colour = \"white\")) +\n      theme_bw()\n\n    return(g)\n  }"},{"path":"fmritimeseries_tt1.html","id":"parameters","chapter":"15 fMRI :: FIR ~ task TTL1","heading":"parameters","text":"","code":"\nmain_dir <- dirname(dirname(getwd()))\ndatadir <- file.path(main_dir, \"analysis/fmri/nilearn/glm/fir\")\nanalysis_folder <- paste0(\"model52_iv-6cond_dv-firglasserSPM_ttl1\")\nanalysis_dir <-\n  file.path(main_dir,\n            \"analysis\",\n            \"mixedeffect\",\n            analysis_folder,\n            as.character(Sys.Date()))\ndir.create(analysis_dir,\n           showWarnings = FALSE,\n           recursive = TRUE)\nsave_dir <- analysis_dir"},{"path":"fmritimeseries_tt1.html","id":"taskwise-stim-effect-1","chapter":"15 fMRI :: FIR ~ task TTL1","heading":"15.2 taskwise stim effect","text":", list ROIs. Per ROI, FIR values pain, vicarious, cognitive tasks.\n’ll aggregate data per ROI plot time series 3 tasks.","code":"\nroi_list <- c(\"dACC\", \"PHG\", \"V1\", \"SM\", \"MT\", \"RSC\", \"LOC\", \"FFC\", \"PIT\", \"pSTS\", \"AIP\", \"premotor\") # 'rINS', 'TPJ',\nrun_types <- c(\"pain\", \"vicarious\", \"cognitive\")\nplot_list <- list()\nTR_length <- 42\n\n\nfor (ROI in roi_list) {\n  main_dir <- dirname(dirname(getwd()))\n  datadir <- file.path(main_dir, \"analysis/fmri/spm/fir/ttl1par\")\n  taskname <- \"pain\"\n  exclude <- \"sub-0001\"\n  filename <- paste0(\"sub-*\", \"*roi-\", ROI, \"_tr-42.csv\")\n  common_path <- Sys.glob(file.path(datadir, \"sub-*\", filename))\n  filter_path <-\n    common_path[!str_detect(common_path, pattern = exclude)]\n\n  df <-\n    do.call(\"rbind.fill\", lapply(\n      filter_path,\n      FUN = function(files) {\n        read.table(files, header = TRUE, sep = \",\")\n      }\n    ))\n\n  for (run_type in run_types) {\n    print(run_type)\n    filtered_df <-\n      df[!(df$condition == \"rating\" |\n             df$condition == \"cue\" | df$runtype != run_type),]\n\n    parsed_df <- filtered_df %>%\n      separate(\n        condition,\n        into = c(\"cue\", \"stim\"),\n        sep = \"_\",\n        remove = FALSE\n      )\n    # --------------------------------------------------------------------------\n    #                           0) subset dataframe based on ROI\n    # --------------------------------------------------------------------------\n    df_long <-\n      pivot_longer(\n        parsed_df,\n        cols = starts_with(\"tr\"),\n        names_to = \"tr_num\",\n        values_to = \"tr_value\"\n      )\n\n    # --------------------------------------------------------------------------\n    #                           1) clean factor\n    # --------------------------------------------------------------------------\n    df_long$tr_ordered <- factor(df_long$tr_num,\n                                 levels = c(paste0(\"tr\", 1:TR_length)))\n    df_long$stim_ordered <- factor(df_long$stim,\n                                   levels = c(\"stimH\", \"stimM\", \"stimL\"))\n    # --------------------------------------------------------------------------\n    #                             2) summary statistics\n    # --------------------------------------------------------------------------\n    subjectwise <- meanSummary(df_long,\n                               c(\"sub\", \"tr_ordered\", \"stim_ordered\"),\n                               \"tr_value\")\n    groupwise <- summarySEwithin(\n      data = subjectwise,\n      measurevar = \"mean_per_sub\",\n      withinvars = c(\"stim_ordered\", \"tr_ordered\"),\n      idvar = \"sub\"\n    )\n    groupwise$task <- run_type\n    # https://stackoverflow.com/questions/29402528/append-data-frames-together-in-a-for-loop/29419402\n    LINEIV1 <- \"tr_ordered\"\n    LINEIV2 <- \"stim_ordered\"\n    MEAN <- \"mean_per_sub_norm_mean\"\n    ERROR <- \"se\"\n    dv_keyword <- \"actual\"\n    sorted_indices <- order(groupwise$tr_ordered)\n    groupwise_sorted <- groupwise[sorted_indices,]\n\n    # --------------------------------------------------------------------------\n    #                             3) plot per run\n    # --------------------------------------------------------------------------\n    p1 <- plot_timeseries_bar_SANDBOX(\n      groupwise_sorted,\n      LINEIV1,\n      LINEIV2,\n      MEAN,\n      ERROR,\n      xlab = \"TRs\",\n      ylab = paste0(ROI, \" activation (A.U.)\"),\n      ggtitle = paste0(\n        ROI,\n        \": \",\n        run_type,\n        \" (N = \",\n        length(unique(subjectwise$sub)),\n        \") time series, Epoch - stimulus\"\n      ),\n      color = c(\"#5f0f40\", \"#ae2012\", \"#fcbf49\")\n    )\n    time_points <- seq(1, 0.46 * TR_length, 0.46)\n    p1 <- p1 +\n      annotate(\n        \"rect\",\n        xmin = 0,\n        xmax = 20,\n        ymin = min(df[[MEAN]], na.rm = TRUE) - 5,\n        ymax = max(df[[MEAN]], na.rm = TRUE) + 5,\n        fill = \"grey\",\n        alpha = 0.2\n      )\n    plot_list[[run_type]] <- p1 + theme_classic()\n\n  }\n\n  # --------------------------------------------------------------------------\n  #                             4) plot three tasks per ROI\n  # --------------------------------------------------------------------------\n  library(gridExtra)\n  plot_list <- lapply(plot_list, function(plot) {\n    plot + theme(plot.margin = margin(5, 5, 5, 5)) # Adjust plot margins if needed\n  })\n  combined_plot <- ggpubr::ggarrange(\n    plot_list[[\"pain\"]],\n    plot_list[[\"vicarious\"]],\n    plot_list[[\"cognitive\"]],\n    common.legend = TRUE,\n    legend = \"bottom\",\n    ncol = 3,\n    nrow = 1,\n    widths = c(3, 3, 3),\n    heights = c(.5, .5, .5),\n    align = \"v\"\n  )\n  print(combined_plot)\n  ggsave(file.path(\n    save_dir,\n    paste0(\"roi-\", ROI, \"_epoch-stim_desc-highstimGTlowstim.png\")\n  ),\n  combined_plot,\n  width = 12,\n  height = 4)\n}## [1] \"pain\"## \n## Attaching package: 'raincloudplots'## The following object is masked _by_ '.GlobalEnv':\n## \n##     GeomFlatViolin## Warning in geom_errorbar(aes(ymin = (.data[[mean]] - .data[[error]]), ymax =\n## (.data[[mean]] + : Ignoring unknown aesthetics: fill## Warning in min(df[[MEAN]], na.rm = TRUE): no non-missing arguments to min;\n## returning Inf## Warning in max(df[[MEAN]], na.rm = TRUE): no non-missing arguments to max;\n## returning -Inf## [1] \"vicarious\"## Warning in geom_errorbar(aes(ymin = (.data[[mean]] - .data[[error]]), ymax =\n## (.data[[mean]] + : Ignoring unknown aesthetics: fill## Warning in min(df[[MEAN]], na.rm = TRUE): no non-missing arguments to min;\n## returning Inf## Warning in max(df[[MEAN]], na.rm = TRUE): no non-missing arguments to max;\n## returning -Inf## [1] \"cognitive\"## Warning in geom_errorbar(aes(ymin = (.data[[mean]] - .data[[error]]), ymax =\n## (.data[[mean]] + : Ignoring unknown aesthetics: fill## Warning in min(df[[MEAN]], na.rm = TRUE): no non-missing arguments to min;\n## returning Inf## Warning in max(df[[MEAN]], na.rm = TRUE): no non-missing arguments to max;\n## returning -Inf## \n## Attaching package: 'gridExtra'## The following object is masked from 'package:dplyr':\n## \n##     combine## [1] \"pain\"## Warning in geom_errorbar(aes(ymin = (.data[[mean]] - .data[[error]]), ymax =\n## (.data[[mean]] + : Ignoring unknown aesthetics: fill## Warning in min(df[[MEAN]], na.rm = TRUE): no non-missing arguments to min;\n## returning Inf## Warning in max(df[[MEAN]], na.rm = TRUE): no non-missing arguments to max;\n## returning -Inf## [1] \"vicarious\"## Warning in geom_errorbar(aes(ymin = (.data[[mean]] - .data[[error]]), ymax =\n## (.data[[mean]] + : Ignoring unknown aesthetics: fill## Warning in min(df[[MEAN]], na.rm = TRUE): no non-missing arguments to min;\n## returning Inf## Warning in max(df[[MEAN]], na.rm = TRUE): no non-missing arguments to max;\n## returning -Inf## [1] \"cognitive\"## Warning in geom_errorbar(aes(ymin = (.data[[mean]] - .data[[error]]), ymax =\n## (.data[[mean]] + : Ignoring unknown aesthetics: fill## Warning in min(df[[MEAN]], na.rm = TRUE): no non-missing arguments to min;\n## returning Inf## Warning in max(df[[MEAN]], na.rm = TRUE): no non-missing arguments to max;\n## returning -Inf## [1] \"pain\"## Warning in geom_errorbar(aes(ymin = (.data[[mean]] - .data[[error]]), ymax =\n## (.data[[mean]] + : Ignoring unknown aesthetics: fill## Warning in min(df[[MEAN]], na.rm = TRUE): no non-missing arguments to min;\n## returning Inf## Warning in max(df[[MEAN]], na.rm = TRUE): no non-missing arguments to max;\n## returning -Inf## [1] \"vicarious\"## Warning in geom_errorbar(aes(ymin = (.data[[mean]] - .data[[error]]), ymax =\n## (.data[[mean]] + : Ignoring unknown aesthetics: fill## Warning in min(df[[MEAN]], na.rm = TRUE): no non-missing arguments to min;\n## returning Inf## Warning in max(df[[MEAN]], na.rm = TRUE): no non-missing arguments to max;\n## returning -Inf## [1] \"cognitive\"## Warning in geom_errorbar(aes(ymin = (.data[[mean]] - .data[[error]]), ymax =\n## (.data[[mean]] + : Ignoring unknown aesthetics: fill## Warning in min(df[[MEAN]], na.rm = TRUE): no non-missing arguments to min;\n## returning Inf## Warning in max(df[[MEAN]], na.rm = TRUE): no non-missing arguments to max;\n## returning -Inf## [1] \"pain\"## Warning in geom_errorbar(aes(ymin = (.data[[mean]] - .data[[error]]), ymax =\n## (.data[[mean]] + : Ignoring unknown aesthetics: fill## Warning in min(df[[MEAN]], na.rm = TRUE): no non-missing arguments to min;\n## returning Inf## Warning in max(df[[MEAN]], na.rm = TRUE): no non-missing arguments to max;\n## returning -Inf## [1] \"vicarious\"## Warning in geom_errorbar(aes(ymin = (.data[[mean]] - .data[[error]]), ymax =\n## (.data[[mean]] + : Ignoring unknown aesthetics: fill## Warning in min(df[[MEAN]], na.rm = TRUE): no non-missing arguments to min;\n## returning Inf## Warning in max(df[[MEAN]], na.rm = TRUE): no non-missing arguments to max;\n## returning -Inf## [1] \"cognitive\"## Warning in geom_errorbar(aes(ymin = (.data[[mean]] - .data[[error]]), ymax =\n## (.data[[mean]] + : Ignoring unknown aesthetics: fill## Warning in min(df[[MEAN]], na.rm = TRUE): no non-missing arguments to min;\n## returning Inf## Warning in max(df[[MEAN]], na.rm = TRUE): no non-missing arguments to max;\n## returning -Inf## [1] \"pain\"## Warning in geom_errorbar(aes(ymin = (.data[[mean]] - .data[[error]]), ymax =\n## (.data[[mean]] + : Ignoring unknown aesthetics: fill## Warning in min(df[[MEAN]], na.rm = TRUE): no non-missing arguments to min;\n## returning Inf## Warning in max(df[[MEAN]], na.rm = TRUE): no non-missing arguments to max;\n## returning -Inf## [1] \"vicarious\"## Warning in geom_errorbar(aes(ymin = (.data[[mean]] - .data[[error]]), ymax =\n## (.data[[mean]] + : Ignoring unknown aesthetics: fill## Warning in min(df[[MEAN]], na.rm = TRUE): no non-missing arguments to min;\n## returning Inf## Warning in max(df[[MEAN]], na.rm = TRUE): no non-missing arguments to max;\n## returning -Inf## [1] \"cognitive\"## Warning in geom_errorbar(aes(ymin = (.data[[mean]] - .data[[error]]), ymax =\n## (.data[[mean]] + : Ignoring unknown aesthetics: fill## Warning in min(df[[MEAN]], na.rm = TRUE): no non-missing arguments to min;\n## returning Inf## Warning in max(df[[MEAN]], na.rm = TRUE): no non-missing arguments to max;\n## returning -Inf## [1] \"pain\"## Warning in geom_errorbar(aes(ymin = (.data[[mean]] - .data[[error]]), ymax =\n## (.data[[mean]] + : Ignoring unknown aesthetics: fill## Warning in min(df[[MEAN]], na.rm = TRUE): no non-missing arguments to min;\n## returning Inf## Warning in max(df[[MEAN]], na.rm = TRUE): no non-missing arguments to max;\n## returning -Inf## [1] \"vicarious\"## Warning in geom_errorbar(aes(ymin = (.data[[mean]] - .data[[error]]), ymax =\n## (.data[[mean]] + : Ignoring unknown aesthetics: fill## Warning in min(df[[MEAN]], na.rm = TRUE): no non-missing arguments to min;\n## returning Inf## Warning in max(df[[MEAN]], na.rm = TRUE): no non-missing arguments to max;\n## returning -Inf## [1] \"cognitive\"## Warning in geom_errorbar(aes(ymin = (.data[[mean]] - .data[[error]]), ymax =\n## (.data[[mean]] + : Ignoring unknown aesthetics: fill## Warning in min(df[[MEAN]], na.rm = TRUE): no non-missing arguments to min;\n## returning Inf## Warning in max(df[[MEAN]], na.rm = TRUE): no non-missing arguments to max;\n## returning -Inf## [1] \"pain\"## Warning in geom_errorbar(aes(ymin = (.data[[mean]] - .data[[error]]), ymax =\n## (.data[[mean]] + : Ignoring unknown aesthetics: fill## Warning in min(df[[MEAN]], na.rm = TRUE): no non-missing arguments to min;\n## returning Inf## Warning in max(df[[MEAN]], na.rm = TRUE): no non-missing arguments to max;\n## returning -Inf## [1] \"vicarious\"## Warning in geom_errorbar(aes(ymin = (.data[[mean]] - .data[[error]]), ymax =\n## (.data[[mean]] + : Ignoring unknown aesthetics: fill## Warning in min(df[[MEAN]], na.rm = TRUE): no non-missing arguments to min;\n## returning Inf## Warning in max(df[[MEAN]], na.rm = TRUE): no non-missing arguments to max;\n## returning -Inf## [1] \"cognitive\"## Warning in geom_errorbar(aes(ymin = (.data[[mean]] - .data[[error]]), ymax =\n## (.data[[mean]] + : Ignoring unknown aesthetics: fill## Warning in min(df[[MEAN]], na.rm = TRUE): no non-missing arguments to min;\n## returning Inf## Warning in max(df[[MEAN]], na.rm = TRUE): no non-missing arguments to max;\n## returning -Inf## [1] \"pain\"## Warning in geom_errorbar(aes(ymin = (.data[[mean]] - .data[[error]]), ymax =\n## (.data[[mean]] + : Ignoring unknown aesthetics: fill## Warning in min(df[[MEAN]], na.rm = TRUE): no non-missing arguments to min;\n## returning Inf## Warning in max(df[[MEAN]], na.rm = TRUE): no non-missing arguments to max;\n## returning -Inf## [1] \"vicarious\"## Warning in geom_errorbar(aes(ymin = (.data[[mean]] - .data[[error]]), ymax =\n## (.data[[mean]] + : Ignoring unknown aesthetics: fill## Warning in min(df[[MEAN]], na.rm = TRUE): no non-missing arguments to min;\n## returning Inf## Warning in max(df[[MEAN]], na.rm = TRUE): no non-missing arguments to max;\n## returning -Inf## [1] \"cognitive\"## Warning in geom_errorbar(aes(ymin = (.data[[mean]] - .data[[error]]), ymax =\n## (.data[[mean]] + : Ignoring unknown aesthetics: fill## Warning in min(df[[MEAN]], na.rm = TRUE): no non-missing arguments to min;\n## returning Inf## Warning in max(df[[MEAN]], na.rm = TRUE): no non-missing arguments to max;\n## returning -Inf## [1] \"pain\"## Warning in geom_errorbar(aes(ymin = (.data[[mean]] - .data[[error]]), ymax =\n## (.data[[mean]] + : Ignoring unknown aesthetics: fill## Warning in min(df[[MEAN]], na.rm = TRUE): no non-missing arguments to min;\n## returning Inf## Warning in max(df[[MEAN]], na.rm = TRUE): no non-missing arguments to max;\n## returning -Inf## [1] \"vicarious\"## Warning in geom_errorbar(aes(ymin = (.data[[mean]] - .data[[error]]), ymax =\n## (.data[[mean]] + : Ignoring unknown aesthetics: fill## Warning in min(df[[MEAN]], na.rm = TRUE): no non-missing arguments to min;\n## returning Inf## Warning in max(df[[MEAN]], na.rm = TRUE): no non-missing arguments to max;\n## returning -Inf## [1] \"cognitive\"## Warning in geom_errorbar(aes(ymin = (.data[[mean]] - .data[[error]]), ymax =\n## (.data[[mean]] + : Ignoring unknown aesthetics: fill## Warning in min(df[[MEAN]], na.rm = TRUE): no non-missing arguments to min;\n## returning Inf## Warning in max(df[[MEAN]], na.rm = TRUE): no non-missing arguments to max;\n## returning -Inf## [1] \"pain\"## Warning in geom_errorbar(aes(ymin = (.data[[mean]] - .data[[error]]), ymax =\n## (.data[[mean]] + : Ignoring unknown aesthetics: fill## Warning in min(df[[MEAN]], na.rm = TRUE): no non-missing arguments to min;\n## returning Inf## Warning in max(df[[MEAN]], na.rm = TRUE): no non-missing arguments to max;\n## returning -Inf## [1] \"vicarious\"## Warning in geom_errorbar(aes(ymin = (.data[[mean]] - .data[[error]]), ymax =\n## (.data[[mean]] + : Ignoring unknown aesthetics: fill## Warning in min(df[[MEAN]], na.rm = TRUE): no non-missing arguments to min;\n## returning Inf## Warning in max(df[[MEAN]], na.rm = TRUE): no non-missing arguments to max;\n## returning -Inf## [1] \"cognitive\"## Warning in geom_errorbar(aes(ymin = (.data[[mean]] - .data[[error]]), ymax =\n## (.data[[mean]] + : Ignoring unknown aesthetics: fill## Warning in min(df[[MEAN]], na.rm = TRUE): no non-missing arguments to min;\n## returning Inf## Warning in max(df[[MEAN]], na.rm = TRUE): no non-missing arguments to max;\n## returning -Inf## [1] \"pain\"## Warning in geom_errorbar(aes(ymin = (.data[[mean]] - .data[[error]]), ymax =\n## (.data[[mean]] + : Ignoring unknown aesthetics: fill## Warning in min(df[[MEAN]], na.rm = TRUE): no non-missing arguments to min;\n## returning Inf## Warning in max(df[[MEAN]], na.rm = TRUE): no non-missing arguments to max;\n## returning -Inf## [1] \"vicarious\"## Warning in geom_errorbar(aes(ymin = (.data[[mean]] - .data[[error]]), ymax =\n## (.data[[mean]] + : Ignoring unknown aesthetics: fill## Warning in min(df[[MEAN]], na.rm = TRUE): no non-missing arguments to min;\n## returning Inf## Warning in max(df[[MEAN]], na.rm = TRUE): no non-missing arguments to max;\n## returning -Inf## [1] \"cognitive\"## Warning in geom_errorbar(aes(ymin = (.data[[mean]] - .data[[error]]), ymax =\n## (.data[[mean]] + : Ignoring unknown aesthetics: fill## Warning in min(df[[MEAN]], na.rm = TRUE): no non-missing arguments to min;\n## returning Inf## Warning in max(df[[MEAN]], na.rm = TRUE): no non-missing arguments to max;\n## returning -Inf## [1] \"pain\"## Warning in geom_errorbar(aes(ymin = (.data[[mean]] - .data[[error]]), ymax =\n## (.data[[mean]] + : Ignoring unknown aesthetics: fill## Warning in min(df[[MEAN]], na.rm = TRUE): no non-missing arguments to min;\n## returning Inf## Warning in max(df[[MEAN]], na.rm = TRUE): no non-missing arguments to max;\n## returning -Inf## [1] \"vicarious\"## Warning in geom_errorbar(aes(ymin = (.data[[mean]] - .data[[error]]), ymax =\n## (.data[[mean]] + : Ignoring unknown aesthetics: fill## Warning in min(df[[MEAN]], na.rm = TRUE): no non-missing arguments to min;\n## returning Inf## Warning in max(df[[MEAN]], na.rm = TRUE): no non-missing arguments to max;\n## returning -Inf## [1] \"cognitive\"## Warning in geom_errorbar(aes(ymin = (.data[[mean]] - .data[[error]]), ymax =\n## (.data[[mean]] + : Ignoring unknown aesthetics: fill## Warning in min(df[[MEAN]], na.rm = TRUE): no non-missing arguments to min;\n## returning Inf## Warning in max(df[[MEAN]], na.rm = TRUE): no non-missing arguments to max;\n## returning -Inf\np1 + annotate(\"rect\", xmin = 0, xmax = 10, ymin = min(df[[MEAN]], na.rm = TRUE) - 5, ymax = max(df[[MEAN]], na.rm = TRUE) + 5, fill = \"grey\", alpha = 0.2)## Warning in min(df[[MEAN]], na.rm = TRUE): no non-missing arguments to min;\n## returning Inf## Warning in max(df[[MEAN]], na.rm = TRUE): no non-missing arguments to max;\n## returning -Inf"},{"path":"fmritimeseries_tt1.html","id":"pca-subjectwise-1","chapter":"15 fMRI :: FIR ~ task TTL1","heading":"15.2.1 PCA subjectwise","text":"","code":"\nrun_types <- c(\"pain\")\nfor (run_type in run_types) {\n  print(run_type)\n  filtered_df <-\n    df[!(df$condition == \"rating\" |\n           df$condition == \"cue\" | df$runtype != run_type),]\n\n  parsed_df <- filtered_df %>%\n    separate(\n      condition,\n      into = c(\"cue\", \"stim\"),\n      sep = \"_\",\n      remove = FALSE\n    )\n  # ------------------------------------------------------------------------------\n  #                       subset regions based on ROI\n  # ------------------------------------------------------------------------------\n  df_long <-\n    pivot_longer(\n      parsed_df,\n      cols = starts_with(\"tr\"),\n      names_to = \"tr_num\",\n      values_to = \"tr_value\"\n    )\n\n  # ------------------------------------------------------------------------------\n  #                             clean factor\n  # ------------------------------------------------------------------------------\n  df_long$tr_ordered <- factor(df_long$tr_num,\n                               levels = c(paste0(\"tr\", 1:TR_length)))\n  df_long$stim_ordered <- factor(df_long$stim,\n                                 levels = c(\"stimH\", \"stimM\", \"stimL\"))\n\n  # ------------------------------------------------------------------------------\n  #                            summary stats\n  # ------------------------------------------------------------------------------\n  subjectwise <- meanSummary(df_long,\n                             c(\"sub\", \"tr_ordered\", \"stim_ordered\"), \"tr_value\")\n\n\n  # ------------------------------------------------------------------------------\n  #                             convert dataframe long to wide\n  # ------------------------------------------------------------------------------\n\n  df_wide <- pivot_wider(\n    subjectwise,\n    id_cols = c(\"tr_ordered\", \"stim_ordered\"),\n    names_from = c(\"sub\"),\n    values_from = \"mean_per_sub\"\n  )\n\n  stim_high.df <- df_wide[df_wide$stim_ordered == \"stimH\",]\n  stim_med.df <- df_wide[df_wide$stim_ordered == \"stimM\",]\n  stim_low.df <- df_wide[df_wide$stim_ordered == \"stimL\",]\n\n  meanhighdf <-\n    data.frame(subset(stim_high.df, select = 3:(ncol(stim_high.df) - 1)))\n  high.pca_result <- prcomp(meanhighdf)\n  high.pca_scores <- as.data.frame(high.pca_result$x)\n  # Access the proportion of variance explained by each principal component\n  high.variance_explained <-\n    high.pca_result$sdev ^ 2 / sum(high.pca_result$sdev ^ 2)\n  plot(high.variance_explained)\n  # Access the standard deviations of each principal component\n  high.stdev <- high.pca_result$sdev\n\n  meanmeddf <-\n    data.frame(subset(stim_med.df, select = 3:(ncol(stim_med.df) - 1)))\n  med.pca <- prcomp(meanmeddf)\n  med.pca_scores <- as.data.frame(med.pca$x)\n\n  meanlowdf <-\n    data.frame(subset(stim_low.df, select = 3:(ncol(stim_low.df) - 1)))\n  low.pca <- prcomp(meanlowdf)\n  low.pca_scores <- as.data.frame(low.pca$x)\n\n  combined_pca_scores <-\n    rbind(high.pca_scores, med.pca_scores, low.pca_scores)\n\n  # Add a new column to indicate the stim_ordered category (high_stim or low_stim)\n  combined_pca_scores$stim_ordered <- c(rep(\"high_stim\", nrow(high.pca_scores)),\n                                        rep(\"med_stim\", nrow(med.pca_scores)),\n                                        rep(\"low_stim\", nrow(low.pca_scores)))\n\n  # ------------------------------------------------------------------------------\n  #                             3d PCA plot\n  # ------------------------------------------------------------------------------\n  plot_ly(\n    combined_pca_scores,\n    x = ~ PC1,\n    y = ~ PC2,\n    z = ~ PC3,\n    type = \"scatter3d\",\n    mode = \"markers\",\n    color = ~ stim_ordered\n  )\n}## [1] \"pain\"\nplot_ly(\n  combined_pca_scores,\n  x = ~ PC1,\n  y = ~ PC2,\n  z = ~ PC3,\n  type = \"scatter3d\",\n  mode = \"markers\",\n  color = ~ stim_ordered\n)"},{"path":"fmritimeseries_tt1.html","id":"pca-groupwise-1","chapter":"15 fMRI :: FIR ~ task TTL1","heading":"15.2.2 PCA groupwise","text":"","code":"\n# ------------------------------------------------------------------------------\n#                       data formatting\n# ------------------------------------------------------------------------------\n\n# Convert the dataframe to wide format\ndf_wide.group <- pivot_wider(\n  subjectwise,\n  id_cols = c(\"tr_ordered\", \"stim_ordered\"),\n  names_from = \"sub\",\n  values_from = \"mean_per_sub\"\n)\n\n# Split the data into two subsets based on the 'stim_ordered' value\n# One for 'stimH' and another for 'stimL'\nstim_high.df <- df_wide[df_wide$stim_ordered == \"stimH\",]\nstim_low.df <- df_wide[df_wide$stim_ordered == \"stimL\",]\n\n# Prepare data for PCA analysis by selecting relevant columns\n# Exclude the first two columns and the last column\nmeanhighdf <-\n  data.frame(subset(stim_high.df, select = 3:(ncol(stim_high.df) - 1)))\nmeanlowdf <-\n  data.frame(subset(stim_low.df, select = 3:(ncol(stim_low.df) - 1)))\n\n\n# ------------------------------------------------------------------------------\n#                      Principal Component Analysis (PCA)\n# ------------------------------------------------------------------------------\nhigh.pca <- prcomp(meanhighdf) # Perform Principal Component Analysis (PCA)\nhigh.pca_scores <- as.data.frame(high.pca$x) # Extract PCA scores\n\n# Repeat the process for the low stimulus data\nlow.pca <- prcomp(meanlowdf)\nlow.pca_scores <- as.data.frame(low.pca$x)\n\ncombined_pca_scores <- rbind(high.pca_scores, low.pca_scores)\n\n# Add a new column to indicate the 'stim_ordered' category (high_stim or low_stim)\n# This helps in distinguishing the groups in the plot\ncombined_pca_scores$stim_ordered <-\n  c(rep(\"high_stim\", nrow(high.pca_scores)), rep(\"low_stim\", nrow(low.pca_scores)))\n\n# ------------------------------------------------------------------------------\n#                      plot 3D scatter plot of the PCA scores\n# ------------------------------------------------------------------------------\n# The points are colored based on their stim_ordered category\nplot_ly(\n  combined_pca_scores,\n  x = ~ PC1,\n  y = ~ PC2,\n  z = ~ PC3,\n  type = \"scatter3d\",\n  mode = \"markers\",\n  color = ~ stim_ordered\n)## Warning in RColorBrewer::brewer.pal(N, \"Set2\"): minimal value for n is 3, returning requested palette with 3 different levels\n\n## Warning in RColorBrewer::brewer.pal(N, \"Set2\"): minimal value for n is 3, returning requested palette with 3 different levels\n# ------------------------------------------------------------------------------\n#                      plot 2D group plot\n# ------------------------------------------------------------------------------\n# Create a 2D plot with smoothed lines for each stim_ordered group\ncombined_pca <- combined_pca_scores %>%\n  group_by(stim_ordered) %>%\n  mutate(group_index = row_number())\nggplot(combined_pca,\n       aes(\n         x = group_index,\n         y = PC1,\n         group = stim_ordered,\n         colour = stim_ordered\n       )) +\n  stat_smooth(\n    method = \"loess\",\n    span = 0.25,\n    se = TRUE,\n    aes(color = stim_ordered),\n    alpha = 0.3\n  ) +\n  theme_bw()## `geom_smooth()` using formula = 'y ~ x'\n# Create the plot\n\nggplot(\n  groupwise,\n  aes(\n    x = tr_ordered,\n    y = mean_per_sub_mean,\n    group = stim_ordered,\n    colour = stim_ordered\n  )\n) +\n  stat_smooth(\n    method = \"loess\",\n    span = 0.25,\n    se = TRUE,\n    aes(color = stim_ordered),\n    alpha = 0.3\n  ) +\n  theme_bw()## `geom_smooth()` using formula = 'y ~ x'\n# Create the plot\n# Create the plot with custom span and smoothing method\nggplot(groupwise, aes(x = tr_ordered, y = mean_per_sub_mean)) +\n  geom_line() + # Plot the smooth line for the mean\n  geom_ribbon(aes(ymin = mean_per_sub_mean - se, ymax = mean_per_sub_mean + se),\n              alpha = 0.3) + # Add the ribbon for standard error\n  geom_smooth(method = \"loess\", span = 0.1, se = FALSE) + # Add the loess smoothing curve\n  labs(x = \"X-axis Label\", y = \"Y-axis Label\", title = \"Smooth Line with Standard Error Ribbon\") +\n  theme_minimal()## `geom_smooth()` using formula = 'y ~ x'"},{"path":"fmritimeseries_tt1.html","id":"taskwise-cue-effect-1","chapter":"15 fMRI :: FIR ~ task TTL1","heading":"15.3 taskwise cue effect","text":"","code":"\nroi_list <- c(\"dACC\", \"PHG\", \"V1\", \"SM\", \"MT\", \"RSC\", \"LOC\", \"FFC\", \"PIT\", \"pSTS\", \"AIP\", \"premotor\") # 'rINS', 'TPJ',\nfor (ROI in roi_list) {\n  datadir <- file.path(main_dir, \"analysis/fmri/spm/fir/ttl2par\")\n  # taskname = 'pain'\n  exclude <- \"sub-0001\"\n  filename <- paste0(\"sub-*\", \"*roi-\", ROI, \"_tr-42.csv\")\n  common_path <- Sys.glob(file.path(datadir, \"sub-*\", filename))\n  filter_path <-\n    common_path[!str_detect(common_path, pattern = exclude)]\n\n  df <-\n    do.call(\"rbind.fill\", lapply(\n      filter_path,\n      FUN = function(files) {\n        read.table(files, header = TRUE, sep = \",\")\n      }\n    ))\n\n\n  run_types <- c(\"pain\", \"vicarious\", \"cognitive\")\n  plot_list <- list()\n  TR_length <- 42\n  for (run_type in run_types) {\n    filtered_df <-\n      df[!(df$condition == \"rating\" |\n             df$condition == \"cue\" | df$runtype != run_type),]\n\n    parsed_df <- filtered_df %>%\n      separate(\n        condition,\n        into = c(\"cue\", \"stim\"),\n        sep = \"_\",\n        remove = FALSE\n      )\n\n    # --------------------------------------------------------------------------\n    #                        subset regions based on ROI\n    # --------------------------------------------------------------------------\n    df_long <-\n      pivot_longer(\n        parsed_df,\n        cols = starts_with(\"tr\"),\n        names_to = \"tr_num\",\n        values_to = \"tr_value\"\n      )\n\n    # --------------------------------------------------------------------------\n    #                             clean factor\n    # --------------------------------------------------------------------------\n    df_long$tr_ordered <- factor(df_long$tr_num,\n                                 levels = c(paste0(\"tr\", 1:TR_length)))\n    df_long$cue_ordered <- factor(df_long$cue,\n                                  levels = c(\"cueH\", \"cueL\"))\n\n    # --------------------------------------------------------------------------\n    #                             summary statistics\n    # --------------------------------------------------------------------------\n    subjectwise <- meanSummary(df_long,\n                               c(\"sub\", \"tr_ordered\", \"cue_ordered\"), \"tr_value\")\n    groupwise <- summarySEwithin(\n      data = subjectwise,\n      measurevar = \"mean_per_sub\",\n      withinvars = c(\"cue_ordered\", \"tr_ordered\"),\n      idvar = \"sub\"\n    )\n    groupwise$task <- run_type\n    # https://stackoverflow.com/questions/29402528/append-data-frames-together-in-a-for-loop/29419402\n\n    LINEIV1 <- \"tr_ordered\"\n    LINEIV2 <- \"cue_ordered\"\n    MEAN <- \"mean_per_sub_norm_mean\"\n    ERROR <- \"se\"\n    dv_keyword <- \"actual\"\n    sorted_indices <- order(groupwise$tr_ordered)\n    groupwise_sorted <- groupwise[sorted_indices,]\n    p1 <- plot_timeseries_bar(\n      groupwise_sorted,\n      LINEIV1,\n      LINEIV2,\n      MEAN,\n      ERROR,\n      xlab = \"TRs\",\n      ylab = paste0(ROI, \" activation (A.U.)\"),\n      ggtitle = paste0(run_type, \" time series, Epoch - stimulus\"),\n      color = c(\"red\", \"blue\")\n    )\n    time_points <- seq(1, 0.46 * TR_length, 0.46)\n\n    plot_list[[run_type]] <- p1 + theme_classic()\n  }\n\n  # ----------------------------------------------------------------------------\n  #                             plot three tasks\n  # ----------------------------------------------------------------------------\n  library(gridExtra)\n  plot_list <- lapply(plot_list, function(plot) {\n    plot + theme(plot.margin = margin(5, 5, 5, 5)) # Adjust plot margins if needed\n  })\n  combined_plot <-\n    ggpubr::ggarrange(\n      plot_list[[\"pain\"]],\n      plot_list[[\"vicarious\"]],\n      plot_list[[\"cognitive\"]],\n      common.legend = TRUE,\n      legend = \"bottom\",\n      ncol = 3,\n      nrow = 1,\n      widths = c(3, 3, 3),\n      heights = c(.5, .5, .5),\n      align = \"v\"\n    )\n\n  print(combined_plot)\n  ggsave(file.path(\n    save_dir,\n    paste0(\"roi-\", ROI, \"_epoch-cue_desc-highcueGTlowcue.png\")\n  ),\n  combined_plot,\n  width = 12,\n  height = 4)\n}"},{"path":"fmritimeseries_tt1.html","id":"epoch-stim-rating-1","chapter":"15 fMRI :: FIR ~ task TTL1","heading":"15.3.1 epoch: stim, rating","text":"","code":""},{"path":"fmritimeseries_tt1.html","id":"main-sandbox-6-condition-in-three-panels.-per-task.-per-roi","chapter":"15 fMRI :: FIR ~ task TTL1","heading":"15.4 MAIN SANDBOX: 6 condition in three panels. per task. per ROI","text":"","code":"\n# A function to plot data\nplot_data <- function(groupwise, iv1, iv2, mean, error, xlab, ylab, ggtitle, run_type, colors) {\n  p <- plot_timeseries_bar(\n    groupwise,\n    \"tr_ordered\",\n    \"sixcond\",\n    \"mean_per_sub_norm_mean\",\n    \"se\",\n    xlab = \"TRs\",\n    ylab = \"Epoch: stimulus, High cue vs. Low cue\",\n    ggtitle = paste0(run_type, \" intensity (N = \", unique(groupwise$N), \")\"),\n    color_mapping = colors,\n    show_legend = FALSE\n  )\n  p + theme_classic()\n}\n#' Calculate Point Size Proportionally\n#'\n#' This function calculates point size proportionally based on a base point size and figure dimensions\n#' (width and height). It can be used to adjust the point size in plots to maintain proportionality\n#' with varying figure sizes.\n#'\n#' @param point_size_base The base point size for `geom_points`.\n#' @param figure_width The width of the figure in which the point size needs to be adjusted.\n#' @param figure_height The height of the figure in which the point size needs to be adjusted.\n#'\n#' @return The calculated point size.\n#'\n#' @examples\n#' # Define your point size base\n#' point_size_base <- 3\n#'\n#' # Define your figure dimensions (width and height)\n#' figure_width <- 12\n#' figure_height <- 8\n#'\n#' # Calculate the point size using the function\n#' POINT_SIZE <- calculate_point_size(point_size_base, figure_width, figure_height)\n#'\n#' # Apply the point size to your plot elements\n#' plot + geom_point(size = POINT_SIZE)\n#'\n#' @export\ncalculate_point_size <- function(figure_width, figure_height, point_size_base = 5) {\n  scaling_factor <- min(figure_width, figure_height) / point_size_base\n  return(scaling_factor)\n}\n# ------------------------------------------------------------------------------\n#                       epoch stim, high cue vs low cue\n# ------------------------------------------------------------------------------\n\nrun_types <- c(\"pain\", \"vicarious\", \"cognitive\")\nall_plots <- list()\nTR_length <- 42\nfor (roi in c(\"dACC\", \"PHG\")) {\n  plot_list_per_roi <- list()\n  for (run_type in run_types) {\n    filtered_df <-\n      df[!(\n        df$condition == \"rating\" |\n          df$condition == \"cue\" |\n          df$runtype != run_type | df$ROI == roi\n      ),]\n    plot_list <- list()\n\n    parsed_df <- filtered_df %>%\n      separate(\n        condition,\n        into = c(\"cue\", \"stim\"),\n        sep = \"_\",\n        remove = FALSE\n      )\n    # --------------------- subset regions based on ROI ----------------------------\n    df_long <-\n      pivot_longer(\n        parsed_df,\n        cols = starts_with(\"tr\"),\n        names_to = \"tr_num\",\n        values_to = \"tr_value\"\n      )\n\n    # ----------------------------------------------------------------------------\n    #                             clean factor\n    # ----------------------------------------------------------------------------\n    df_long$tr_ordered <- factor(df_long$tr_num,\n                                 levels = c(paste0(\"tr\", 1:TR_length)))\n    df_long$cue_ordered <- factor(df_long$cue,\n                                  levels = c(\"cueH\", \"cueL\"))\n    df_long$stim_ordered <- factor(df_long$stim,\n                                   levels = c(\"stimH\", \"stimM\", \"stimL\"))\n\n    df_long$sixcond <- factor(\n      df_long$condition,\n      levels = c(\n        \"cueH_stimH\",\n        \"cueL_stimH\",\n        \"cueH_stimM\",\n        \"cueL_stimM\",\n        \"cueH_stimL\",\n        \"cueL_stimL\"\n      )\n    )\n\n    # ------------------------------------------------------------------------------\n    #                             summary statistics\n    # ------------------------------------------------------------------------------\n    subjectwise <- meanSummary(df_long,\n                               c(\"sub\", \"tr_ordered\", \"sixcond\"), \"tr_value\")\n    groupwise <- summarySEwithin(\n      data = subjectwise,\n      measurevar = \"mean_per_sub\",\n      withinvars = c(\"sixcond\", \"tr_ordered\"),\n      idvar = \"sub\"\n    )\n    groupwise$task <- taskname\n\n    # ----------------------------------------------------------------------------\n    #                             plot parameters\n    # ----------------------------------------------------------------------------\n    # convert TR orders to numeric values\n    tr_numbers <-\n      as.numeric(sub(\"tr\", \"\", as.character(groupwise$tr_ordered)))\n    tr_sequence <- (tr_numbers - 1) * 0.46\n    groupwise$tr_sequence <- tr_sequence\n\n    LINEIV1 <- \"tr_sequence\"\n    LINEIV2 <- \"sixcond\"\n    MEAN <- \"mean_per_sub_norm_mean\"\n    ERROR <- \"se\"\n    dv_keyword <- \"actual\"\n    sorted_indices <- order(groupwise$tr_ordered)\n    groupwise_sorted <- groupwise[sorted_indices,]\n    XLAB <- \"TRs\"\n    YLAB <- \"Stimulus Epoch High vs. Low cue\"\n    HIGHSTIM_COLOR <- c(\n      \"cueH_stimH\" = \"red\",\n      \"cueL_stimH\" = \"#5f0f40\",\n      \"cueH_stimM\" = \"gray\",\n      \"cueL_stimM\" = \"gray\",\n      \"cueH_stimL\" = \"gray\",\n      \"cueL_stimL\" = \"gray\"\n    )\n    MEDSTIM_COLOR <- c(\n      \"cueH_stimH\" = \"gray\",\n      \"cueL_stimH\" = \"gray\",\n      \"cueH_stimM\" = \"#bc3908\",\n      \"cueL_stimM\" = \"#f6aa1c\",\n      \"cueH_stimL\" = \"gray\",\n      \"cueL_stimL\" = \"gray\"\n    )\n    LOWSTIM_COLOR <- c(\n      \"cueH_stimH\" = \"gray\",\n      \"cueL_stimH\" = \"gray\",\n      \"cueH_stimM\" = \"gray\",\n      \"cueL_stimM\" = \"gray\",\n      \"cueH_stimL\" = \"#2541b2\",\n      \"cueL_stimL\" = \"#00a6fb\"\n    )\n\n    AXIS_FONTSIZE <- 10\n    COMMONAXIS_FONTSIZE <- 15\n    TITLE_FONTSIZE <- 20\n    figure_width <- 10  # Adjust this to your actual figure width\n    figure_height <- 10  # Adjust this to your actual figure height\n    GEOMPOINT_SIZE <- calculate_point_size(figure_width, figure_height)\n\n    # ----------------------------------------------------------------------------\n    #                             plot intensity per task\n    # ----------------------------------------------------------------------------\n    p3H <- plot_timeseries_bar(\n      groupwise,\n      LINEIV1,\n      LINEIV2,\n      MEAN,\n      ERROR,\n      XLAB,\n      YLAB,\n      ggtitle = paste0(tools::toTitleCase(run_type), \"\\n High intensity (N = \", unique(groupwise$N), \")\"),\n      color_mapping = HIGHSTIM_COLOR,\n      show_legend = FALSE,\n      geompoint_size = GEOMPOINT_SIZE\n    )\n\n    # Assuming tr_sequence is correct and has been added to groupwise\n    # Calculate breaks to show every 10th TR\n    breaks_to_show <-\n      seq(0, max(groupwise$tr_sequence), by = 0.46 * 5)\n    labels_to_show <-\n      seq(0, max(groupwise$tr_sequence), by = 0.46 * 5)\n    # It's important to ensure that both 'breaks_to_show' and 'labels_to_show' have the same length\n    # If the lengths differ, we need to adjust them so they match\n    if (length(breaks_to_show) != length(labels_to_show)) {\n      # Assuming you want to keep all the breaks and just adjust the labels\n      labels_to_show <- labels_to_show[seq_along(breaks_to_show)]\n    }\n\n    # High intensity\n    plot_list[[\"H\"]] <- p3H +\n      scale_x_continuous(\n        breaks = breaks_to_show,\n        # Set breaks at every 10th point\n        labels = labels_to_show,\n        # Use the calculated labels\n        limits = range(groupwise$tr_sequence)  # Set the limits based on the sequence\n      ) +\n      theme_classic()\n\n    # Medium intensity\n    p3M <- plot_timeseries_bar(\n      groupwise,\n      LINEIV1,\n      LINEIV2,\n      MEAN,\n      ERROR,\n      XLAB,\n      YLAB,\n      ggtitle = paste0(\n        tools::toTitleCase(run_type),\n        \"\\n Medium intensity (N = \",\n        unique(groupwise$N),\n        \")\"\n      ),\n      color_mapping = MEDSTIM_COLOR,\n      show_legend = FALSE,\n      geompoint_size = GEOMPOINT_SIZE\n    )\n    plot_list[[\"M\"]] <- p3M +\n      scale_x_continuous(\n        breaks = breaks_to_show,        # Set breaks at every 10th point\n        labels = labels_to_show,        # Use the calculated labels\n        limits = range(groupwise$tr_sequence)  # Set the limits based on the sequence\n      ) +\n      theme_classic()\n\n    # Low intensity\n    p3L <- plot_timeseries_bar(\n      groupwise,\n      LINEIV1,\n      LINEIV2,\n      MEAN,\n      ERROR,\n      XLAB,\n      YLAB,\n      ggtitle = paste0(tools::toTitleCase(run_type), \"\\n Low intensity (N = \", unique(groupwise$N), \")\"),\n      color_mapping = LOWSTIM_COLOR,\n      show_legend = FALSE,\n      geompoint_size = GEOMPOINT_SIZE\n    )\n    plot_list[[\"L\"]] <- p3L +\n      scale_x_continuous(\n        breaks = breaks_to_show,\n        # Set breaks at every 10th point\n        labels = labels_to_show,\n        # Use the calculated labels\n        limits = range(groupwise$tr_sequence)  # Set the limits based on the sequence\n      ) +\n      theme_classic()\n\n    # ----------------------------------------------------------------------------\n    #                   combine three tasks in one panel per ROI\n    # ----------------------------------------------------------------------------\n\n    library(gridExtra)\n    plot_list <- lapply(plot_list, function(plot) {\n      plot +\n        theme(\n          plot.margin = margin(5, 5, 5, 5),          # Adjust plot margins if needed\n          axis.title.y = element_blank(),          # Remove y-axis title\n          axis.title.x = element_blank(),\n          axis.text.y = element_text(size = AXIS_FONTSIZE),          # Increase y-axis text size\n          axis.text.x = element_text(size = AXIS_FONTSIZE, angle = 30)\n        )\n    })\n    combined_plot_per_run <-\n      ggpubr::ggarrange(\n        plot_list[[\"H\"]],\n        plot_list[[\"M\"]],\n        plot_list[[\"L\"]],\n        common.legend = FALSE,\n        legend = \"none\",\n        ncol = 3,\n        nrow = 1,\n        widths = c(3, 3, 3),\n        heights = c(.5, .5, .5),\n        align = \"v\"\n      )\n\n    # Add the combined plot for this run type to the list for the current ROI\n    plot_list_per_roi[[run_type]] <- combined_plot_per_run\n\n\n  } # end of run loop\n\n  # ----------------------------------------------------------------------------\n  #                  add commom legend\n  # ----------------------------------------------------------------------------\n  legend_data <- data.frame(\n    sixcond = factor(\n      c(\n        \"cueH_stimH\",\n        \"cueL_stimH\",\n        \"cueH_stimM\",\n        \"cueL_stimM\",\n        \"cueH_stimL\",\n        \"cueL_stimL\"\n      )\n    ),\n    color = c(\"red\", \"#5f0f40\", \"#bc3908\", \"#f6aa1c\", \"#2541b2\", \"#00a6fb\"),\n    stringsAsFactors = FALSE\n  )\n\n  legend_plot <-\n    ggplot(legend_data, aes(x = sixcond, y = 1, color = sixcond)) +\n    geom_point() +\n    scale_color_manual(values = legend_data$color) +\n    theme_void() +\n    theme(legend.position = \"bottom\") +\n    guides(color = guide_legend(title = \"Condition\"))\n\n  legend_grob <-\n    ggplotGrob(legend_plot)$grobs[[which(sapply(ggplotGrob(legend_plot)$grobs, function(x)\n      x$name) == \"guide-box\")]]\n  heights <- c(rep(1, length(run_types)), 2)\n  # ----------------------------------------------------------------------------\n  #                  common axes for the 9 panels\n  # ----------------------------------------------------------------------------\n  y_axis_label <-\n    textGrob(\n      \"FIR BOLD \\n(high > low cue; stimulus epoch)\",\n      rot = 90,\n      gp = gpar(fontsize = COMMONAXIS_FONTSIZE)\n    )\n    x_axis_label <-\n    textGrob(\n      \"TR (0.46s per TR)\",\n      rot = 0,\n      gp = gpar(fontsize = COMMONAXIS_FONTSIZE)\n    )\n  num_rows <- length(plot_list_per_roi) + 1  # +1 for the legend\n  # ----------------------------------------------------------------------------\n  #                  combined plots across 3 tasks\n  # ----------------------------------------------------------------------------\n  roi_combined_plot <-\n    do.call(grid.arrange, c(plot_list_per_roi, ncol = 1))\n\n  final_plot <- grid.arrange(\n    y_axis_label,\n    arrangeGrob(\n      roi_combined_plot,\n     x_axis_label,\n      legend_grob,\n\n      ncol = 1,\n      heights = c(11,.5, 1)\n    ),\n    ncol = 2,\n    widths = c(1, 10),    # Relative widths for the label, plots, and legend,\n    top = textGrob(sprintf(\"%s Time series per task\", roi), gp = gpar(\n      fontsize = TITLE_FONTSIZE, fontface = \"bold\"\n    ))  # title parameter\n  )\n  grid.draw(final_plot)\n\n\n  # ----------------------------------------------------------------------------\n  #                 save all plots\n  # ----------------------------------------------------------------------------\n  ggsave(file.path(\n    save_dir,\n    paste0(\"roi-\",\n           roi ,\n           \"_epoch-stim_desc-stimcuecomparison.png\")\n  ),\n  all_plots[[roi]],\n  width = 12,\n  height = 20)\n}"}]
